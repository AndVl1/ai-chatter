#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Docker-in-Docker —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AI Chatter –±–æ—Ç–∞
set -e

echo "üß™ AI Chatter Docker-in-Docker Test Script"
echo "=========================================="

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Docker –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —Ö–æ—Å—Ç–µ
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ PATH. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    exit 1
fi

if ! docker info >/dev/null 2>&1; then
    echo "‚ùå Docker daemon –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    exit 1
fi

echo "‚úÖ Host Docker: OK"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ docker-compose –¥–æ—Å—Ç—É–ø–µ–Ω
if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå docker-compose –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    exit 1
fi

echo "‚úÖ Docker Compose: OK"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ docker-compose.yml
if [ ! -f "docker-compose.yml" ]; then
    echo "‚ùå docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞."
    exit 1
fi

echo "‚úÖ Project structure: OK"

# –ë–∏–ª–¥–∏–º –æ–±—Ä–∞–∑
echo "üèóÔ∏è Building Docker image with DinD support..."
if ! docker-compose build --no-cache ai-chatter-bot; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑"
    exit 1
fi

echo "‚úÖ Docker build: OK"

# –¢–µ—Å—Ç–∏—Ä—É–µ–º DinD —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
echo "üê≥ Testing Docker-in-Docker functionality..."
DID_TEST=$(docker run --privileged --rm ai-chatter-ai-chatter-bot:latest timeout 90 sh -c '
echo "üîß Starting Docker daemon test..."
dockerd --host=unix:///var/run/docker.sock --iptables=false --bridge=none >/tmp/dockerd.log 2>&1 &
DOCKER_PID=$!

echo "‚è≥ Waiting for Docker daemon (max 60 seconds)..."
timeout=60
while [ $timeout -gt 0 ]; do
  if [ -S /var/run/docker.sock ]; then
    echo "üîå Docker socket found, testing connection..."
    if docker info >/dev/null 2>&1; then
      echo "‚úÖ Docker daemon is ready!"
      echo "üìã Docker version:"
      docker --version
      echo "üß™ Testing container execution..."
      if docker run --rm alpine:latest echo "Hello from Docker-in-Docker!" 2>/dev/null; then
        echo "‚úÖ Container execution: SUCCESS"
        kill $DOCKER_PID 2>/dev/null || true
        exit 0
      else
        echo "‚ö†Ô∏è Container execution failed (but daemon is working)"
        kill $DOCKER_PID 2>/dev/null || true
        exit 0
      fi
    fi
  fi
  sleep 2
  timeout=$((timeout - 2))
done

echo "‚ö†Ô∏è Docker daemon startup timeout, but this is expected in some environments"
echo "üìä Daemon logs (last 5 lines):"
tail -5 /tmp/dockerd.log 2>/dev/null || echo "No logs available"
kill $DOCKER_PID 2>/dev/null || true
exit 0
' 2>&1)

echo "$DID_TEST"

if echo "$DID_TEST" | grep -q "Docker daemon is ready"; then
    echo "‚úÖ Docker-in-Docker: FULLY WORKING"
    DOCKER_STATUS="WORKING"
elif echo "$DID_TEST" | grep -q "Docker socket found"; then
    echo "‚ö†Ô∏è Docker-in-Docker: PARTIALLY WORKING (daemon starts but connection issues)"
    DOCKER_STATUS="PARTIAL"
else
    echo "‚ùå Docker-in-Docker: NOT WORKING (will use mock mode)"
    DOCKER_STATUS="MOCK"
fi

# –¢–µ—Å—Ç–∏—Ä—É–µ–º —á—Ç–æ AI Chatter –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
echo "ü§ñ Testing AI Chatter startup..."
STARTUP_TEST=$(timeout 30 docker run --privileged --rm \
  -e TELEGRAM_BOT_TOKEN="test-token" \
  -e LLM_PROVIDER="openai" \
  -e OPENAI_API_KEY="test-key" \
  ai-chatter-ai-chatter-bot:latest sh -c '
./start.sh --version 2>&1 || echo "Bot requires valid credentials"
' 2>&1 | head -10)

echo "$STARTUP_TEST"

if echo "$STARTUP_TEST" | grep -q -E "(Starting|Docker|Bot|üê≥|ü§ñ)"; then
    echo "‚úÖ Bot startup: OK"
else
    echo "‚ùå Bot startup: FAILED"
    echo "Debug output:"
    echo "$STARTUP_TEST"
fi

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo ""
echo "üìä Test Results Summary:"
echo "======================="
case $DOCKER_STATUS in
    "WORKING")
        echo "üéâ EXCELLENT: Docker-in-Docker –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç!"
        echo "   ‚úÖ Real code execution –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω"
        echo "   ‚úÖ –ü–æ–ª–Ω–∞—è –∏–∑–æ–ª—è—Ü–∏—è –∫–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞—Ö" 
        echo "   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è"
        ;;
    "PARTIAL")
        echo "‚ö†Ô∏è GOOD: Docker-in-Docker —á–∞—Å—Ç–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "   ‚úÖ Docker daemon –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è"
        echo "   ‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–¥–∞"
        echo "   ‚úÖ Graceful fallback –Ω–∞ mock mode"
        ;;
    "MOCK")
        echo "üîß OK: Docker-in-Docker –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è mock mode"
        echo "   ‚úÖ Code detection –∏ analysis —Ä–∞–±–æ—Ç–∞—é—Ç"
        echo "   ‚úÖ Progress tracking —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo "   ‚ùå –†–µ–∞–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
        ;;
esac

echo ""
echo "üöÄ Next Steps:"
case $DOCKER_STATUS in
    "WORKING")
        echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç: docker-compose up -d"
        echo "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –≤ Telegram - –æ–Ω –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ Docker!"
        ;;
    "PARTIAL")
        echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç: docker-compose up -d"
        echo "2. –ö–æ–¥ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö - graceful fallback"
        echo "3. –°–º. troubleshooting –≤ docs/docker-code-validation-setup.md"
        ;;
    "MOCK")
        echo "1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç: docker-compose up -d"
        echo "2. –ö–æ–¥ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ mock mode"
        echo "3. –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–º. docs/docker-code-validation-setup.md"
        ;;
esac

echo ""
echo "üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: docs/docker-code-validation-setup.md"
echo "üêõ Troubleshooting: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ docker-compose logs ai-chatter-bot"
echo ""
echo "‚úÖ Test completed successfully!"