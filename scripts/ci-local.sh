#!/bin/bash

# –õ–æ–∫–∞–ª—å–Ω–∞—è –∏–º–∏—Ç–∞—Ü–∏—è CI –ø—Ä–æ—Ü–µ—Å—Å–∞
set -e

echo "üöÄ AI Chatter - Local CI Pipeline"
echo "=================================="

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
START_TIME=$(date +%s)
FAILED_TESTS=""
COVERAGE_THRESHOLD=75

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å timestamp
log() {
    echo "[$(date +'%H:%M:%S')] $1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ exit code
check_result() {
    if [ $? -eq 0 ]; then
        log "‚úÖ $1 - PASSED"
    else
        log "‚ùå $1 - FAILED"
        FAILED_TESTS="${FAILED_TESTS}$1\n"
        return 1
    fi
}

# –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
cleanup() {
    log "üßπ Cleaning up previous artifacts..."
    rm -f coverage.out *.prof *.log
    rm -f ai-chatter notion-mcp-server test-custom-mcp
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
check_environment() {
    log "üîç Checking environment..."
    
    echo "Go version: $(go version)"
    echo "OS: $(uname -s)"
    echo "Architecture: $(uname -m)"
    echo "Working directory: $(pwd)"
    echo "Available memory: $(free -h 2>/dev/null || echo 'N/A (not Linux)')"
    echo "Available disk: $(df -h . | tail -1)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Go –º–æ–¥—É–ª–∏
    if [ ! -f go.mod ]; then
        log "‚ùå go.mod not found! Run from project root."
        exit 1
    fi
    
    log "‚úÖ Environment check passed"
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
download_deps() {
    log "üì¶ Downloading dependencies..."
    go mod download
    check_result "Dependencies download"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
check_formatting() {
    log "üé® Checking code formatting..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º gofmt
    UNFORMATTED=$(gofmt -l .)
    if [ -n "$UNFORMATTED" ]; then
        log "‚ùå Code formatting issues found:"
        echo "$UNFORMATTED"
        log "üí° Run: go fmt ./..."
        return 1
    fi
    
    check_result "Code formatting"
}

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ (–µ—Å–ª–∏ –µ—Å—Ç—å golangci-lint)
static_analysis() {
    if command -v golangci-lint >/dev/null 2>&1; then
        log "üîç Running static analysis..."
        golangci-lint run ./...
        check_result "Static analysis"
    else
        log "‚ö†Ô∏è golangci-lint not found, skipping static analysis"
        log "üí° Install: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
    fi
}

# –°–±–æ—Ä–∫–∞
build_applications() {
    log "üî® Building applications..."
    
    go build -o ai-chatter cmd/bot/main.go
    check_result "Bot build"
    
    go build -o notion-mcp-server cmd/notion-mcp-server/main.go  
    check_result "MCP server build"
    
    go build -o test-custom-mcp cmd/test-custom-mcp/main.go
    check_result "Test MCP build"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã
    for binary in ai-chatter notion-mcp-server test-custom-mcp; do
        if [ ! -f "$binary" ]; then
            log "‚ùå Binary $binary not created"
            return 1
        fi
    done
    
    log "‚úÖ All binaries built successfully"
}

# Unit —Ç–µ—Å—Ç—ã
run_unit_tests() {
    log "üß™ Running unit tests..."
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å coverage –∏ race detection
    go test -race -coverprofile=coverage.out ./...
    check_result "Unit tests"
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º coverage
    if [ -f coverage.out ]; then
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        log "üìä Code coverage: ${COVERAGE}%"
        
        if (( $(echo "$COVERAGE < $COVERAGE_THRESHOLD" | bc -l) )); then
            log "‚ö†Ô∏è Coverage below threshold (${COVERAGE}% < ${COVERAGE_THRESHOLD}%)"
        else
            log "‚úÖ Coverage meets threshold (${COVERAGE}% >= ${COVERAGE_THRESHOLD}%)"
        fi
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –æ—Ç—á—ë—Ç
        go tool cover -html=coverage.out -o coverage.html
        log "üìã Coverage report: coverage.html"
    fi
}

# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
run_integration_tests() {
    log "üåê Checking integration test setup..."
    
    if [ -n "$NOTION_TOKEN" ] && [ -n "$NOTION_TEST_PAGE_ID" ]; then
        log "üöÄ Running integration tests..."
        chmod +x scripts/test-notion-integration.sh
        ./scripts/test-notion-integration.sh
        check_result "Integration tests"
    else
        log "‚ö†Ô∏è Skipping integration tests - environment not configured"
        log "üí° Set NOTION_TOKEN and NOTION_TEST_PAGE_ID to run integration tests"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
performance_check() {
    log "‚ö° Running performance checks..."
    
    # –ü—Ä–æ—Å—Ç–æ–π benchmark –µ—Å–ª–∏ –µ—Å—Ç—å
    if go test -bench=. ./... >/dev/null 2>&1; then
        log "üìà Running benchmarks..."
        go test -bench=. -benchmem ./... | tee benchmark-results.txt
        check_result "Benchmarks"
    else
        log "‚ö†Ô∏è No benchmarks found"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–∏–Ω–∞—Ä–µ–π
    log "üìè Binary sizes:"
    for binary in ai-chatter notion-mcp-server test-custom-mcp; do
        if [ -f "$binary" ]; then
            SIZE=$(du -h "$binary" | cut -f1)
            echo "  - $binary: $SIZE"
        fi
    done
}

# Cross-platform –ø—Ä–æ–≤–µ—Ä–∫–∞
cross_platform_check() {
    log "üåç Cross-platform build check..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–±–æ—Ä–∫—É –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platforms=("linux/amd64" "darwin/amd64" "windows/amd64")
    
    for platform in "${platforms[@]}"; do
        GOOS=${platform%/*}
        GOARCH=${platform#*/}
        
        log "Building for $GOOS/$GOARCH..."
        env GOOS=$GOOS GOARCH=$GOARCH go build -o /dev/null cmd/bot/main.go
        check_result "Build for $GOOS/$GOARCH"
    done
}

# –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç
final_report() {
    END_TIME=$(date +%s)
    DURATION=$((END_TIME - START_TIME))
    
    echo ""
    echo "üìä CI Pipeline Summary"
    echo "======================"
    echo "Total duration: ${DURATION}s"
    echo "Timestamp: $(date)"
    echo ""
    
    if [ -z "$FAILED_TESTS" ]; then
        echo "üéâ All checks passed! Ready for deployment."
        echo ""
        echo "‚úÖ Completed successfully:"
        echo "  - Environment check"
        echo "  - Dependencies download"  
        echo "  - Code formatting"
        echo "  - Application builds"
        echo "  - Unit tests"
        if [ -n "$NOTION_TOKEN" ]; then
            echo "  - Integration tests"
        fi
        echo "  - Performance checks"
        echo "  - Cross-platform builds"
        echo ""
        echo "üìã Generated artifacts:"
        echo "  - coverage.html (code coverage report)"
        echo "  - coverage.out (coverage data)"
        if [ -f benchmark-results.txt ]; then
            echo "  - benchmark-results.txt (performance data)"
        fi
        echo ""
        return 0
    else
        echo "‚ùå Some checks failed:"
        echo -e "$FAILED_TESTS"
        echo ""
        echo "üîß Please fix the issues and run again."
        return 1
    fi
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "${1:-all}" in
    "env")
        check_environment
        ;;
    "deps")
        download_deps
        ;;
    "format") 
        check_formatting
        ;;
    "build")
        build_applications
        ;;
    "test")
        run_unit_tests
        ;;
    "integration")
        run_integration_tests
        ;;
    "performance")
        performance_check
        ;;
    "cross")
        cross_platform_check
        ;;
    "clean")
        cleanup
        ;;
    "all"|*)
        echo "Running full CI pipeline..."
        echo ""
        
        cleanup
        check_environment
        download_deps
        check_formatting
        static_analysis
        build_applications  
        run_unit_tests
        run_integration_tests
        performance_check
        cross_platform_check
        final_report
        exit $?
        ;;
esac
