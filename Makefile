# AI Chatter - Makefile
.PHONY: help build test clean ci format integration cross coverage mcp-servers mcp-clean

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
GO_VERSION := $(shell go version | cut -d' ' -f3)
BUILD_TIME := $(shell date -u '+%Y-%m-%d %H:%M:%S UTC')
GIT_COMMIT := $(shell git rev-parse --short HEAD)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
BLUE := \033[34m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
NC := \033[0m # No Color

help: ## –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
	@echo "$(BLUE)AI Chatter - Available commands:$(NC)"
	@echo ""
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "$(GREEN)%-15s$(NC) %s\n", $$1, $$2}' $(MAKEFILE_LIST)
	@echo ""
	@echo "$(YELLOW)Build info:$(NC)"
	@echo "  Go version: $(GO_VERSION)"
	@echo "  Git commit: $(GIT_COMMIT)"
	@echo "  Build time: $(BUILD_TIME)"

build: ## –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	@echo "$(BLUE)üî® Building applications...$(NC)"
	@go build -o ai-chatter cmd/bot/main.go
	@make mcp-servers
	@go build -o test-custom-mcp cmd/test-custom-mcp/main.go
	@echo "$(GREEN)‚úÖ Build completed$(NC)"

test: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å unit —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üß™ Running unit tests...$(NC)"
	@go test -race -v ./...

coverage: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å coverage
	@echo "$(BLUE)üìä Running tests with coverage...$(NC)"
	@go test -race -coverprofile=coverage.out ./...
	@go tool cover -html=coverage.out -o coverage.html
	@echo "$(GREEN)‚úÖ Coverage report: coverage.html$(NC)"

mcp-servers: ## –°–æ–±—Ä–∞—Ç—å –≤—Å–µ MCP —Å–µ—Ä–≤–µ—Ä—ã
	@echo "$(BLUE)üîß Building MCP servers...$(NC)"
	@mkdir -p bin
	@go build -o bin/notion-mcp-server cmd/notion-mcp-server/main.go
	@go build -o bin/gmail-mcp-server cmd/gmail-mcp-server/main.go
	@go build -o bin/github-mcp-server cmd/github-mcp-server/main.go
	@go build -o bin/rustore-mcp-server cmd/rustore-mcp-server/main.go
	@go build -o bin/vibecoding-mcp-server cmd/vibecoding-mcp-server/main.go
	@go build -o bin/vibecoding-mcp-http-server cmd/vibecoding-mcp-http-server/main.go
	@echo "$(GREEN)‚úÖ MCP servers built in bin/ directory$(NC)"

mcp-clean: ## –û—á–∏—Å—Ç–∏—Ç—å —Å–æ–±—Ä–∞–Ω–Ω—ã–µ MCP —Å–µ—Ä–≤–µ—Ä—ã
	@echo "$(BLUE)üßπ Cleaning MCP servers...$(NC)"
	@rm -rf bin/
	@echo "$(GREEN)‚úÖ MCP servers cleaned$(NC)"

integration: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
	@echo "$(BLUE)üåê Running integration tests...$(NC)"
	@./scripts/test-notion-integration.sh

format: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
	@echo "$(BLUE)üé® Formatting code...$(NC)"
	@go fmt ./...
	@echo "$(GREEN)‚úÖ Code formatted$(NC)"

clean: ## –û—á–∏—Å—Ç–∏—Ç—å –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã —Å–±–æ—Ä–∫–∏
	@echo "$(BLUE)üßπ Cleaning up...$(NC)"
	@rm -f ai-chatter test-custom-mcp
	@make mcp-clean
	@rm -f coverage.out coverage.html *.prof *.log
	@echo "$(GREEN)‚úÖ Cleanup completed$(NC)"

ci: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π CI pipeline –ª–æ–∫–∞–ª—å–Ω–æ
	@echo "$(BLUE)üöÄ Running full CI pipeline...$(NC)"
	@./scripts/ci-local.sh

ci-fast: format build test ## –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ + —Å–±–æ—Ä–∫–∞ + unit —Ç–µ—Å—Ç—ã)
	@echo "$(GREEN)‚úÖ Fast CI check completed$(NC)"

cross: ## –ü—Ä–æ–≤–µ—Ä–∏—Ç—å cross-platform —Å–±–æ—Ä–∫—É
	@echo "$(BLUE)üåç Cross-platform build check...$(NC)"
	@GOOS=linux GOARCH=amd64 go build -o /dev/null cmd/bot/main.go
	@GOOS=darwin GOARCH=amd64 go build -o /dev/null cmd/bot/main.go  
	@GOOS=windows GOARCH=amd64 go build -o /dev/null cmd/bot/main.go
	@echo "$(GREEN)‚úÖ Cross-platform builds OK$(NC)"

deps: ## –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
	@echo "$(BLUE)üì¶ Updating dependencies...$(NC)"
	@go mod download
	@go mod tidy
	@echo "$(GREEN)‚úÖ Dependencies updated$(NC)"

lint: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –ª–∏–Ω—Ç–µ—Ä (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
	@if command -v golangci-lint >/dev/null 2>&1; then \
		echo "$(BLUE)üîç Running linter...$(NC)"; \
		golangci-lint run ./...; \
		echo "$(GREEN)‚úÖ Linting completed$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è golangci-lint not installed$(NC)"; \
		echo "Install: go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"; \
	fi

dev: build ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
	@echo "$(BLUE)üöÄ Starting development server...$(NC)"
	@echo "$(YELLOW)Loading .env file...$(NC)"
	@if [ -f .env ]; then set -a && source .env && set +a; fi
	@./ai-chatter

mcp-server: build ## –ó–∞–ø—É—Å—Ç–∏—Ç—å MCP —Å–µ—Ä–≤–µ—Ä (Notion)
	@echo "$(BLUE)üîå Starting Notion MCP server...$(NC)"
	@if [ -f .env ]; then set -a && source .env && set +a; fi
	@./notion-mcp-server

vibe-mcp: build ## –ó–∞–ø—É—Å—Ç–∏—Ç—å VibeCoding MCP —Å–µ—Ä–≤–µ—Ä (stdio)
	@echo "$(BLUE)üéØ Starting VibeCoding MCP server (stdio)...$(NC)"
	@if [ -f .env ]; then set -a && source .env && set +a; fi
	@./vibecoding-mcp-server

vibe-http: build ## –ó–∞–ø—É—Å—Ç–∏—Ç—å VibeCoding HTTP SSE MCP —Å–µ—Ä–≤–µ—Ä
	@echo "$(BLUE)üåê Starting VibeCoding HTTP SSE MCP server...$(NC)"
	@if [ -f .env ]; then set -a && source .env && set +a; fi
	@./vibecoding-mcp-http-server

install: build ## –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ GOPATH/bin
	@echo "$(BLUE)üì• Installing to GOPATH/bin...$(NC)"
	@go install cmd/bot/main.go
	@go install cmd/notion-mcp-server/main.go
	@go install cmd/vibecoding-mcp-server/main.go
	@go install cmd/vibecoding-mcp-http-server/main.go
	@echo "$(GREEN)‚úÖ Installation completed$(NC)"

docker-single: ## –°–æ–±—Ä–∞—Ç—å –æ–¥–∏–Ω Docker –æ–±—Ä–∞–∑
	@echo "$(BLUE)üê≥ Building single Docker image...$(NC)"
	@docker build -t ai-chatter:$(GIT_COMMIT) .
	@docker tag ai-chatter:$(GIT_COMMIT) ai-chatter:latest
	@echo "$(GREEN)‚úÖ Docker image built$(NC)"

release: clean format build test cross ## –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ä–µ–ª–∏–∑
	@echo "$(BLUE)üè∑Ô∏è Preparing release...$(NC)"
	@echo "$(YELLOW)Version: $(GIT_COMMIT)$(NC)"
	@echo "$(YELLOW)Build time: $(BUILD_TIME)$(NC)"
	@echo "$(GREEN)‚úÖ Release ready$(NC)"

benchmark: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–µ–Ω—á–º–∞—Ä–∫–∏
	@echo "$(BLUE)‚ö° Running benchmarks...$(NC)"
	@go test -bench=. -benchmem ./... | tee benchmark-results.txt
	@echo "$(GREEN)‚úÖ Benchmarks completed$(NC)"

profile-cpu: ## CPU –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
	@echo "$(BLUE)üî• CPU profiling...$(NC)"
	@go test -cpuprofile=cpu.prof -run=TestMCPConnection ./internal/notion
	@if [ -f cpu.prof ]; then \
		echo "$(GREEN)üìä CPU profile: cpu.prof$(NC)"; \
		echo "View with: go tool pprof cpu.prof"; \
	fi

profile-mem: ## Memory –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ  
	@echo "$(BLUE)üß† Memory profiling...$(NC)"
	@go test -memprofile=mem.prof -run=TestMCPConnection ./internal/notion
	@if [ -f mem.prof ]; then \
		echo "$(GREEN)üìä Memory profile: mem.prof$(NC)"; \
		echo "View with: go tool pprof mem.prof"; \
	fi

# Docker –∫–æ–º–∞–Ω–¥—ã
docker-build: ## –°–æ–±—Ä–∞—Ç—å –≤—Å–µ Docker –æ–±—Ä–∞–∑—ã
	@echo "$(BLUE)üê≥ Building Docker images...$(NC)"
	@docker-compose -f docker-compose.full.yml build
	@echo "$(GREEN)‚úÖ Docker images built$(NC)"

start: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å—é —Å–∏—Å—Ç–µ–º—É (–ø–æ–ª–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)
	@echo "$(BLUE)üöÄ Starting full AI Chatter system...$(NC)"
	@./start-ai-chatter.sh

start-basic: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω–æ–π –±–æ—Ç
	@echo "$(BLUE)ü§ñ Starting basic AI Chatter bot...$(NC)"
	@./start-ai-chatter.sh basic

start-vibe: ## –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å VibeCoding
	@echo "$(BLUE)üî• Starting AI Chatter with VibeCoding...$(NC)"
	@./start-ai-chatter.sh vibecoding

stop: ## –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
	@echo "$(BLUE)üõë Stopping AI Chatter system...$(NC)"
	@docker-compose -f docker-compose.full.yml down 2>/dev/null || true
	@docker-compose -f docker-compose.vibecoding.yml down 2>/dev/null || true
	@docker-compose -f docker-compose.yml down 2>/dev/null || true
	@echo "$(GREEN)‚úÖ System stopped$(NC)"

logs: ## –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
	@echo "$(BLUE)üìã Showing logs...$(NC)"
	@docker-compose -f docker-compose.full.yml logs -f

status: ## –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
	@echo "$(BLUE)üìä System status:$(NC)"
	@docker-compose -f docker-compose.full.yml ps 2>/dev/null || echo "$(YELLOW)No containers running$(NC)"

restart: stop start ## –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É

clean-docker: ## –û—á–∏—Å—Ç–∏—Ç—å Docker –¥–∞–Ω–Ω—ã–µ
	@echo "$(BLUE)üßπ Cleaning Docker data...$(NC)"
	@docker system prune -f
	@docker volume prune -f
	@echo "$(GREEN)‚úÖ Docker cleanup completed$(NC)"

# Aliases –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
all: ci ## Alias –¥–ª—è 'ci'
check: ci-fast ## Alias –¥–ª—è 'ci-fast'
fmt: format ## Alias –¥–ª—è 'format'
run: start ## Alias –¥–ª—è 'start'
