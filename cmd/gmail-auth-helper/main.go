package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/gmail/v1"
)

// OAuth2Credentials —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è OAuth2 credentials
type OAuth2Credentials struct {
	ClientID     string   `json:"client_id"`
	ClientSecret string   `json:"client_secret"`
	RedirectURIs []string `json:"redirect_uris"`
	AuthURI      string   `json:"auth_uri"`
	TokenURI     string   `json:"token_uri"`
}

// GoogleCredentialsFile —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ñ–∞–π–ª–∞ credentials.json –∏–∑ Google Cloud Console
type GoogleCredentialsFile struct {
	Installed *OAuth2Credentials `json:"installed,omitempty"`
	Web       *OAuth2Credentials `json:"web,omitempty"`
}

func main() {
	if len(os.Args) < 2 {
		log.Fatal("Usage: gmail-auth-helper <credentials.json>")
	}

	credentialsFile := os.Args[1]

	// –ß–∏—Ç–∞–µ–º credentials –∏–∑ —Ñ–∞–π–ª–∞
	credentialsData, err := os.ReadFile(credentialsFile)
	if err != nil {
		log.Fatalf("Failed to read credentials file: %v", err)
	}

	// –ü–∞—Ä—Å–∏–º credentials —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞ Google Cloud Console
	credentials, err := parseGoogleCredentials(credentialsData)
	if err != nil {
		log.Fatalf("Failed to parse credentials: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º OAuth2 config
	config := &oauth2.Config{
		ClientID:     credentials.ClientID,
		ClientSecret: credentials.ClientSecret,
		RedirectURL:  "urn:ietf:wg:oauth:2.0:oob",
		Scopes:       []string{gmail.GmailReadonlyScope},
		Endpoint:     google.Endpoint,
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)

	fmt.Printf("üîó Gmail OAuth2 Authorization Helper\n")
	fmt.Printf("=====================================\n")
	fmt.Printf("1. Open this URL in your browser:\n")
	fmt.Printf("   %s\n\n", authURL)
	fmt.Printf("2. Authorize the application\n")
	fmt.Printf("3. Copy the authorization code and enter it below\n\n")
	fmt.Printf("üìù Enter the authorization code: ")

	// –ß–∏—Ç–∞–µ–º –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	var authCode string
	if _, err := fmt.Scan(&authCode); err != nil {
		log.Fatalf("Failed to read authorization code: %v", err)
	}

	// –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
	token, err := config.Exchange(context.Background(), authCode)
	if err != nil {
		log.Fatalf("Failed to exchange code for token: %v", err)
	}

	fmt.Printf("\n‚úÖ Successfully obtained tokens!\n")
	fmt.Printf("=====================================\n")
	fmt.Printf("Add these to your .env file:\n\n")
	fmt.Printf("GMAIL_CREDENTIALS_JSON='%s'\n", string(credentialsData))
	if token.RefreshToken != "" {
		fmt.Printf("GMAIL_REFRESH_TOKEN='%s'\n", token.RefreshToken)
	}
	fmt.Printf("\nüìù Token details:\n")
	fmt.Printf("Access Token: %s\n", token.AccessToken[:20]+"...")
	if token.RefreshToken != "" {
		fmt.Printf("Refresh Token: %s\n", token.RefreshToken[:20]+"...")
	}
	fmt.Printf("Expires: %v\n", token.Expiry)
}

// parseGoogleCredentials –ø–∞—Ä—Å–∏—Ç credentials JSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
func parseGoogleCredentials(credentialsData []byte) (*OAuth2Credentials, error) {
	// –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –ø—Ä—è–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É OAuth2Credentials
	var directCredentials OAuth2Credentials
	if err := json.Unmarshal(credentialsData, &directCredentials); err == nil {
		if directCredentials.ClientID != "" && directCredentials.ClientSecret != "" {
			fmt.Printf("‚úÖ Parsed direct OAuth2 credentials format\n")
			return &directCredentials, nil
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç Google Cloud Console
	var googleFile GoogleCredentialsFile
	if err := json.Unmarshal(credentialsData, &googleFile); err != nil {
		return nil, fmt.Errorf("failed to parse credentials as Google format: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º installed credentials (Desktop application)
	if googleFile.Installed != nil {
		fmt.Printf("‚úÖ Parsed Google Cloud Console credentials (installed/desktop format)\n")
		return googleFile.Installed, nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º web credentials (Web application)
	if googleFile.Web != nil {
		fmt.Printf("‚úÖ Parsed Google Cloud Console credentials (web format)\n")
		return googleFile.Web, nil
	}

	return nil, fmt.Errorf("no valid credentials found in JSON - expected 'installed' or 'web' section")
}
