package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"math"
	"net/http"
	"os"
	"strings"
	"sync"
	"time"

	"github.com/joho/godotenv"
)

// OpenRouterRequest —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenRouter API
type OpenRouterRequest struct {
	Model       string                 `json:"model"`
	Messages    []OpenRouterMessage    `json:"messages"`
	Temperature *float32               `json:"temperature,omitempty"`
	MaxTokens   *int                   `json:"max_tokens,omitempty"`
	Metadata    map[string]interface{} `json:"metadata,omitempty"`
}

// OpenRouterMessage —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenRouter API
type OpenRouterMessage struct {
	Role    string `json:"role"`
	Content string `json:"content"`
}

// OpenRouterResponse –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API
type OpenRouterResponse struct {
	ID      string `json:"id"`
	Choices []struct {
		Message struct {
			Role    string `json:"role"`
			Content string `json:"content"`
		} `json:"message"`
		FinishReason string `json:"finish_reason"`
	} `json:"choices"`
	Usage struct {
		PromptTokens     int `json:"prompt_tokens"`
		CompletionTokens int `json:"completion_tokens"`
		TotalTokens      int `json:"total_tokens"`
		//PromptCost       float64 `json:"prompt_cost"`
		//CompletionCost   float64 `json:"completion_cost"`
		//TotalCost        float64 `json:"total_cost"`
	} `json:"usage"`
	Error *struct {
		Message string `json:"message"`
		Type    string `json:"type"`
		Code    string `json:"code"`
	} `json:"error"`
}

// OpenRouterGenerationResponse –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter Generation API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
type OpenRouterGenerationResponse struct {
	Data struct {
		ID                     string  `json:"id"`
		Model                  string  `json:"model"`
		CreatedAt              string  `json:"created_at"`
		TokensPrompt           int     `json:"tokens_prompt"`
		TokensCompletion       int     `json:"tokens_completion"`
		NativeTokensPrompt     int     `json:"native_tokens_prompt"`
		NativeTokensCompletion int     `json:"native_tokens_completion"`
		Usage                  float64 `json:"usage"`
		TotalCost              float64 `json:"total_cost"`
		Cancelled              bool    `json:"cancelled"`
		FinishReason           string  `json:"finish_reason"`
		GenerationTime         int     `json:"generation_time"`
		Latency                int     `json:"latency"`
	} `json:"data"`
}

// DetailedCostInfo –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
type DetailedCostInfo struct {
	RequestID        string  `json:"request_id"`
	Model            string  `json:"model"`
	PromptTokens     int     `json:"prompt_tokens"`
	CompletionTokens int     `json:"completion_tokens"`
	TotalTokens      int     `json:"total_tokens"`
	PromptCost       float64 `json:"prompt_cost"`
	CompletionCost   float64 `json:"completion_cost"`
	TotalCost        float64 `json:"total_cost"`
	PromptPrice      float64 `json:"prompt_price"`     // –¶–µ–Ω–∞ –∑–∞ 1K –ø—Ä–æ–º–ø—Ç —Ç–æ–∫–µ–Ω–æ–≤
	CompletionPrice  float64 `json:"completion_price"` // –¶–µ–Ω–∞ –∑–∞ 1K completion —Ç–æ–∫–µ–Ω–æ–≤
	NativeCost       float64 `json:"native_cost"`      // –°—Ç–æ–∏–º–æ—Å—Ç—å –≤ –Ω–∞—Ç–∏–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ –º–æ–¥–µ–ª–∏
}

// BenchmarkResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
type BenchmarkResult struct {
	Parameter        string            `json:"parameter"`
	Value            interface{}       `json:"value"`
	Response         string            `json:"response"`
	Tokens           int               `json:"tokens"`
	Cost             float64           `json:"cost"`
	Duration         time.Duration     `json:"duration"`
	ResponseLength   int               `json:"response_length"`
	DetailedCostInfo *DetailedCostInfo `json:"detailed_cost_info,omitempty"` // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç Generation API
}

// AnalysisResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç LLM
type AnalysisResult struct {
	QualityScore   float64     `json:"quality_score"`
	CostEfficiency float64     `json:"cost_efficiency"`
	ResponseTime   float64     `json:"response_time"`
	Analysis       string      `json:"analysis"`
	Recommendation string      `json:"recommendation"`
	BestValue      interface{} `json:"best_value"`
}

// ParallelTestResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
type ParallelTestResult struct {
	Result BenchmarkResult
	Error  error
}

const (
	// –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
	TEST_MODEL = "qwen/qwen3-coder"

	// –ë–∞–∑–æ–≤—ã–π URL OpenRouter
	OPENROUTER_BASE_URL = "https://openrouter.ai/api/v1/chat/completions"

	// URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
	OPENROUTER_GENERATION_URL = "https://openrouter.ai/api/v1/generation"
)

var (
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
	temperatureValues = []float32{0.0, 0.3, 0.7, 1.0, 1.2}

	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è max_tokens
	maxTokensValues = []int{100, 500, 1000, 2500}

	// HTTP –∫–ª–∏–µ–Ω—Ç —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
	httpClient = &http.Client{Timeout: 120 * time.Second}

	// API –∫–ª—é—á OpenRouter
	apiKey string
)

func main() {
	log.Printf("üöÄ Starting LLM Benchmark Tool")

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	if err := godotenv.Load(".env"); err != nil {
		log.Printf("Warning: .env file not found: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á
	apiKey = os.Getenv("OPENAI_API_KEY")
	if apiKey == "" {
		log.Fatalf("‚ùå OPENAI_API_KEY not set in environment")
	}

	log.Printf("üîë Using OpenRouter API Key: %s...%s", apiKey[:8], apiKey[len(apiKey)-8:])
	log.Printf("üéØ Testing model: %s", TEST_MODEL)

	ctx := context.Background()

	// –®–∞–≥ 1: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
	log.Printf("\nüß† Step 1: Generating test question...")
	testQuestion, err := generateTestQuestion(ctx)
	if err != nil {
		log.Fatalf("‚ùå Failed to generate test question: %v", err)
	}

	log.Printf("‚úÖ Generated test question: %s", testQuestion)

	// –®–∞–≥ 2: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	log.Printf("\nüå°Ô∏è Step 2: Testing different temperature values in parallel...")
	totalStart := time.Now()
	temperatureResults, err := benchmarkTemperature(ctx, testQuestion)
	totalTempDuration := time.Since(totalStart)
	if err != nil {
		log.Fatalf("‚ùå Temperature benchmark failed: %v", err)
	}
	log.Printf("‚è±Ô∏è Total temperature tests completed in: %v", totalTempDuration)

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
	log.Printf("\nüìä Analyzing temperature results...")
	tempAnalysis, err := analyzeResults(ctx, "temperature", temperatureResults, testQuestion)
	if err != nil {
		log.Printf("‚ö†Ô∏è Temperature analysis failed: %v", err)
	} else {
		printAnalysis("Temperature", tempAnalysis)
	}

	// –®–∞–≥ 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è max_tokens –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	log.Printf("\nüî¢ Step 3: Testing different max_tokens values in parallel...")
	totalStart2 := time.Now()
	maxTokensResults, err := benchmarkMaxTokens(ctx, testQuestion)
	totalTokensDuration := time.Since(totalStart2)
	if err != nil {
		log.Fatalf("‚ùå MaxTokens benchmark failed: %v", err)
	}
	log.Printf("‚è±Ô∏è Total max_tokens tests completed in: %v", totalTokensDuration)

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã max_tokens
	log.Printf("\nüìä Analyzing max_tokens results...")
	tokensAnalysis, err := analyzeResults(ctx, "max_tokens", maxTokensResults, testQuestion)
	if err != nil {
		log.Printf("‚ö†Ô∏è MaxTokens analysis failed: %v", err)
	} else {
		printAnalysis("Max Tokens", tokensAnalysis)
	}

	// –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	log.Printf("\nüìà –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
	log.Printf("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
	printSummaryStats("Temperature", temperatureResults)
	printSummaryStats("Max Tokens", maxTokensResults)

	log.Printf("\nüéâ Benchmark completed successfully!")
}

// generateTestQuestion –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é LLM
func generateTestQuestion(ctx context.Context) (string, error) {
	prompt := `–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –±–µ–Ω—á–º–∞—Ä–∫–∞ LLM –º–æ–¥–µ–ª–∏. 
–í–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
1. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–∂–Ω—ã–º, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø—Ä–∏ —Ä–∞–∑–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö
2. –ù–µ —Å–ª–∏—à–∫–æ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º (–¥–æ—Å—Ç—É–ø–Ω—ã–º –¥–ª—è –æ–±—â–µ–π –º–æ–¥–µ–ª–∏)
3. –¢—Ä–µ–±—É—é—â–∏–º —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–æ –Ω–µ –±–æ–ª–µ–µ 5000 —Ç–æ–∫–µ–Ω–æ–≤)
4. –ü–æ–∑–≤–æ–ª—è—é—â–∏–º –æ—Ü–µ–Ω–∏—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –ª–æ–≥–∏–∫—É –∏ –ø–æ–ª–Ω–æ—Ç—É –æ—Ç–≤–µ—Ç–∞

–ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: "–û–±—ä—è—Å–Ω–∏, –∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 –ª–µ—Ç, –∫–∞–∫–∏–µ –±—É–¥—É—Ç –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏ —Ä–∏—Å–∫–∏?"

–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º –≤–æ–ø—Ä–æ—Å–æ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.`

	request := OpenRouterRequest{
		Model: TEST_MODEL,
		Messages: []OpenRouterMessage{
			{Role: "user", Content: prompt},
		},
		Temperature: float32Ptr(0.7),
		MaxTokens:   intPtr(200),
	}

	response, err := makeOpenRouterRequest(ctx, request)
	if err != nil {
		return "", fmt.Errorf("failed to generate test question: %w", err)
	}

	if len(response.Choices) == 0 {
		return "", fmt.Errorf("no response choices received")
	}

	return strings.TrimSpace(response.Choices[0].Message.Content), nil
}

// benchmarkTemperature —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
func benchmarkTemperature(ctx context.Context, testQuestion string) ([]BenchmarkResult, error) {
	log.Printf("  üöÄ Starting %d parallel temperature tests...", len(temperatureValues))

	// –ö–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	resultsChan := make(chan ParallelTestResult, len(temperatureValues))
	var wg sync.WaitGroup

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
	for i, temp := range temperatureValues {
		wg.Add(1)
		go func(temperature float32, index int) {
			defer wg.Done()

			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å—Ç–∞—Ä—Ç–∞–º–∏ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ API
			time.Sleep(time.Duration(index) * 300 * time.Millisecond)

			log.Printf("    üå°Ô∏è Starting temperature test: %.1f", temperature)

			start := time.Now()

			request := OpenRouterRequest{
				Model: TEST_MODEL,
				Messages: []OpenRouterMessage{
					{Role: "user", Content: testQuestion},
				},
				Temperature: float32Ptr(temperature),
				MaxTokens:   intPtr(5000), // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π max_tokens –¥–ª—è —Ç–µ—Å—Ç–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
			}

			// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
			requestCtx, cancel := context.WithTimeout(ctx, 90*time.Second)
			defer cancel()

			response, err := makeOpenRouterRequest(requestCtx, request)
			duration := time.Since(start)

			if err != nil {
				log.Printf("    ‚ùå Failed temperature %.1f: %v", temperature, err)
				resultsChan <- ParallelTestResult{Error: fmt.Errorf("temperature %.1f failed: %w", temperature, err)}
				return
			}

			if len(response.Choices) == 0 {
				log.Printf("    ‚ùå No response for temperature %.1f", temperature)
				resultsChan <- ParallelTestResult{Error: fmt.Errorf("no response for temperature %.1f", temperature)}
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
			var detailedCost *DetailedCostInfo
			if response.ID != "" {
				if cost, err := getDetailedCostInfo(ctx, response.ID); err != nil {
					log.Printf("    ‚ö†Ô∏è Failed to get detailed cost for temperature %.1f: %v", temperature, err)
				} else {
					detailedCost = cost
				}
			}

			result := BenchmarkResult{
				Parameter:        "temperature",
				Value:            temperature,
				Response:         response.Choices[0].Message.Content,
				Tokens:           response.Usage.TotalTokens,
				Cost:             detailedCost.TotalCost,
				Duration:         duration,
				ResponseLength:   len(response.Choices[0].Message.Content),
				DetailedCostInfo: detailedCost,
			}

			// –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
			log.Printf("    ‚úÖ Temperature %.1f completed: %d tokens, $%.6f, %v, %d chars",
				temperature, result.Tokens, result.Cost, duration, result.ResponseLength)

			// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
			if detailedCost != nil {
				log.Printf("    üí∞ Detailed cost: Prompt $%.6f (%d tok), Completion $%.6f (%d tok), Total $%.6f",
					detailedCost.PromptCost, detailedCost.PromptTokens,
					detailedCost.CompletionCost, detailedCost.CompletionTokens,
					detailedCost.TotalCost)
				log.Printf("    üìä Pricing: $%.6f/1K prompt, $%.6f/1K completion",
					detailedCost.PromptPrice, detailedCost.CompletionPrice)
			}

			resultsChan <- ParallelTestResult{Result: result, Error: nil}

		}(temp, i)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö goroutines
	go func() {
		wg.Wait()
		close(resultsChan)
	}()

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	var results []BenchmarkResult
	var errors []error

	for testResult := range resultsChan {
		if testResult.Error != nil {
			errors = append(errors, testResult.Error)
		} else {
			results = append(results, testResult.Result)
		}
	}

	log.Printf("  ‚úÖ Temperature tests completed: %d successful, %d failed", len(results), len(errors))

	if len(results) == 0 {
		return nil, fmt.Errorf("all temperature tests failed: %v", errors)
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
	for i := 0; i < len(results)-1; i++ {
		for j := i + 1; j < len(results); j++ {
			if results[i].Value.(float32) > results[j].Value.(float32) {
				results[i], results[j] = results[j], results[i]
			}
		}
	}

	return results, nil
}

// benchmarkMaxTokens —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è max_tokens –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
func benchmarkMaxTokens(ctx context.Context, testQuestion string) ([]BenchmarkResult, error) {
	log.Printf("  üöÄ Starting %d parallel max_tokens tests...", len(maxTokensValues))

	// –ö–∞–Ω–∞–ª –¥–ª—è —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	resultsChan := make(chan ParallelTestResult, len(maxTokensValues))
	var wg sync.WaitGroup

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
	for i, maxTokens := range maxTokensValues {
		wg.Add(1)
		go func(maxTokensValue int, index int) {
			defer wg.Done()

			// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å—Ç–∞—Ä—Ç–∞–º–∏
			time.Sleep(time.Duration(index) * 400 * time.Millisecond)

			log.Printf("    üî¢ Starting max_tokens test: %d", maxTokensValue)

			start := time.Now()

			request := OpenRouterRequest{
				Model: TEST_MODEL,
				Messages: []OpenRouterMessage{
					{Role: "user", Content: testQuestion},
				},
				Temperature: float32Ptr(0.7), // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∞ max_tokens
				MaxTokens:   intPtr(maxTokensValue),
			}

			// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
			requestCtx, cancel := context.WithTimeout(ctx, 90*time.Second)
			defer cancel()

			response, err := makeOpenRouterRequest(requestCtx, request)
			duration := time.Since(start)

			if err != nil {
				log.Printf("    ‚ùå Failed max_tokens %d: %v", maxTokensValue, err)
				resultsChan <- ParallelTestResult{Error: fmt.Errorf("max_tokens %d failed: %w", maxTokensValue, err)}
				return
			}

			if len(response.Choices) == 0 {
				log.Printf("    ‚ùå No response for max_tokens %d", maxTokensValue)
				resultsChan <- ParallelTestResult{Error: fmt.Errorf("no response for max_tokens %d", maxTokensValue)}
				return
			}

			// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
			var detailedCost *DetailedCostInfo
			if response.ID != "" {
				if cost, err := getDetailedCostInfo(ctx, response.ID); err != nil {
					log.Printf("    ‚ö†Ô∏è Failed to get detailed cost for max_tokens %d: %v", maxTokensValue, err)
				} else {
					detailedCost = cost
				}
			}

			result := BenchmarkResult{
				Parameter:        "max_tokens",
				Value:            maxTokensValue,
				Response:         response.Choices[0].Message.Content,
				Tokens:           response.Usage.TotalTokens,
				Cost:             detailedCost.TotalCost,
				Duration:         duration,
				ResponseLength:   len(response.Choices[0].Message.Content),
				DetailedCostInfo: detailedCost,
			}

			// –õ–æ–≥–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
			log.Printf("    ‚úÖ max_tokens %d completed: %d tokens, $%.6f, %v, %d chars",
				maxTokensValue, result.Tokens, result.Cost, duration, result.ResponseLength)

			// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
			if detailedCost != nil {
				log.Printf("    üí∞ Detailed cost: Prompt $%.6f (%d tok), Completion $%.6f (%d tok), Total $%.6f",
					detailedCost.PromptCost, detailedCost.PromptTokens,
					detailedCost.CompletionCost, detailedCost.CompletionTokens,
					detailedCost.TotalCost)
				log.Printf("    üìä Pricing: $%.6f/1K prompt, $%.6f/1K completion",
					detailedCost.PromptPrice, detailedCost.CompletionPrice)
			}

			resultsChan <- ParallelTestResult{Result: result, Error: nil}

		}(maxTokens, i)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö goroutines
	go func() {
		wg.Wait()
		close(resultsChan)
	}()

	// –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	var results []BenchmarkResult
	var errors []error

	for testResult := range resultsChan {
		if testResult.Error != nil {
			errors = append(errors, testResult.Error)
		} else {
			results = append(results, testResult.Result)
		}
	}

	log.Printf("  ‚úÖ Max_tokens tests completed: %d successful, %d failed", len(results), len(errors))

	if len(results) == 0 {
		return nil, fmt.Errorf("all max_tokens tests failed: %v", errors)
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é max_tokens –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
	for i := 0; i < len(results)-1; i++ {
		for j := i + 1; j < len(results); j++ {
			if results[i].Value.(int) > results[j].Value.(int) {
				results[i], results[j] = results[j], results[i]
			}
		}
	}

	return results, nil
}

// analyzeResults –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é LLM
func analyzeResults(ctx context.Context, parameter string, results []BenchmarkResult, originalQuestion string) (*AnalysisResult, error) {
	if len(results) == 0 {
		return nil, fmt.Errorf("no results to analyze")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	var analysisPrompt strings.Builder
	analysisPrompt.WriteString(fmt.Sprintf("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±–µ–Ω—á–º–∞—Ä–∫–∞ LLM –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ %s.\n\n", parameter))
	analysisPrompt.WriteString(fmt.Sprintf("–ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: %s\n\n", originalQuestion))
	analysisPrompt.WriteString("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤:\n\n")

	for i, result := range results {
		analysisPrompt.WriteString(fmt.Sprintf("=== –¢–µ—Å—Ç %d ===\n", i+1))
		analysisPrompt.WriteString(fmt.Sprintf("–ü–∞—Ä–∞–º–µ—Ç—Ä: %v\n", result.Value))
		analysisPrompt.WriteString(fmt.Sprintf("–¢–æ–∫–µ–Ω—ã: %d\n", result.Tokens))
		analysisPrompt.WriteString(fmt.Sprintf("–°—Ç–æ–∏–º–æ—Å—Ç—å: $%.6f\n", result.Cost))
		analysisPrompt.WriteString(fmt.Sprintf("–í—Ä–µ–º—è: %v\n", result.Duration))
		analysisPrompt.WriteString(fmt.Sprintf("–î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: %d —Å–∏–º–≤–æ–ª–æ–≤\n", result.ResponseLength))

		// –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
		if result.DetailedCostInfo != nil {
			analysisPrompt.WriteString(fmt.Sprintf("–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:\n"))
			analysisPrompt.WriteString(fmt.Sprintf("  - –ü—Ä–æ–º–ø—Ç: $%.6f (%d —Ç–æ–∫–µ–Ω–æ–≤)\n",
				result.DetailedCostInfo.PromptCost, result.DetailedCostInfo.PromptTokens))
			analysisPrompt.WriteString(fmt.Sprintf("  - –û—Ç–≤–µ—Ç: $%.6f (%d —Ç–æ–∫–µ–Ω–æ–≤)\n",
				result.DetailedCostInfo.CompletionCost, result.DetailedCostInfo.CompletionTokens))
			analysisPrompt.WriteString(fmt.Sprintf("  - –¶–µ–Ω–∞ –∑–∞ 1K: –ø—Ä–æ–º–ø—Ç $%.6f, –æ—Ç–≤–µ—Ç $%.6f\n",
				result.DetailedCostInfo.PromptPrice, result.DetailedCostInfo.CompletionPrice))
		}

		analysisPrompt.WriteString(fmt.Sprintf("–û—Ç–≤–µ—Ç: %s\n\n", truncateString(result.Response, 300)))
	}

	analysisPrompt.WriteString(`–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
1. –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤ (–ø–æ–ª–Ω–æ—Ç–∞, —Ç–æ—á–Ω–æ—Å—Ç—å, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å) - –æ—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 10
2. –≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (—Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∫ —Å—Ç–æ–∏–º–æ—Å—Ç–∏) - –æ—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 10
3. –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ - –æ—Ü–µ–Ω–∫–∞ –æ—Ç 1 –¥–æ 10
4. –û–±—â–∏–π –∞–Ω–∞–ª–∏–∑ –≤–ª–∏—è–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–∞

–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "quality_score": [1-10],
  "cost_efficiency": [1-10], 
  "response_time": [1-10],
  "analysis": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
  "recommendation": "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é",
  "best_value": "–æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ_–∑–Ω–∞—á–µ–Ω–∏–µ_–ø–∞—Ä–∞–º–µ—Ç—Ä–∞"
}`)

	request := OpenRouterRequest{
		Model: TEST_MODEL,
		Messages: []OpenRouterMessage{
			{Role: "user", Content: analysisPrompt.String()},
		},
		Temperature: float32Ptr(0.3), // –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
		MaxTokens:   intPtr(1500),
	}

	response, err := makeOpenRouterRequest(ctx, request)
	if err != nil {
		return nil, fmt.Errorf("failed to analyze results: %w", err)
	}

	if len(response.Choices) == 0 {
		return nil, fmt.Errorf("no analysis response received")
	}

	// –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
	analysisContent := response.Choices[0].Message.Content
	log.Printf("üîç Raw analysis response: %s", truncateString(analysisContent, 200))

	// –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
	jsonStart := strings.Index(analysisContent, "{")
	jsonEnd := strings.LastIndex(analysisContent, "}")

	if jsonStart == -1 || jsonEnd == -1 {
		return nil, fmt.Errorf("no JSON found in analysis response")
	}

	jsonContent := analysisContent[jsonStart : jsonEnd+1]
	log.Printf("üîç Extracted JSON: %s", truncateString(jsonContent, 300))

	// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
	var analysis AnalysisResult
	if err := json.Unmarshal([]byte(jsonContent), &analysis); err != nil {
		// –ü—Ä–æ–±—É–µ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å JSON
		// LLM –∏–Ω–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤—ã –≤–º–µ—Å—Ç–æ —á–∏—Å–µ–ª, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		fixedContent := jsonContent

		// –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º –º–∞—Å—Å–∏–≤—ã –æ—Ü–µ–Ω–æ–∫ –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		fixedContent = fixArrayValue(fixedContent, "quality_score")
		fixedContent = fixArrayValue(fixedContent, "cost_efficiency")
		fixedContent = fixArrayValue(fixedContent, "response_time")

		if err2 := json.Unmarshal([]byte(fixedContent), &analysis); err2 != nil {
			return nil, fmt.Errorf("failed to parse analysis JSON: %w (original: %v)", err2, err)
		}
		log.Printf("‚úÖ Fixed JSON parsing issue")
	}

	return &analysis, nil
}

// makeOpenRouterRequest –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ OpenRouter API
func makeOpenRouterRequest(ctx context.Context, request OpenRouterRequest) (*OpenRouterResponse, error) {
	// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
	if request.Metadata == nil {
		request.Metadata = make(map[string]interface{})
	}
	request.Metadata["title"] = "ai-chatter-benchmark"

	jsonData, err := json.Marshal(request)
	if err != nil {
		return nil, fmt.Errorf("failed to marshal request: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", OPENROUTER_BASE_URL, bytes.NewBuffer(jsonData))
	if err != nil {
		return nil, fmt.Errorf("failed to create request: %w", err)
	}

	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+apiKey)
	req.Header.Set("HTTP-Referer", "https://github.com/AndVl1/ai-chatter")
	req.Header.Set("X-Title", "ai-chatter-benchmark")

	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("request failed: %w", err)
	}
	defer resp.Body.Close()

	var openRouterResponse OpenRouterResponse
	if err := json.NewDecoder(resp.Body).Decode(&openRouterResponse); err != nil {
		return nil, fmt.Errorf("failed to decode response: %w", err)
	}

	if openRouterResponse.Error != nil {
		return nil, fmt.Errorf("OpenRouter API error: %s", openRouterResponse.Error.Message)
	}

	return &openRouterResponse, nil
}

// getDetailedCostInfo –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
func getDetailedCostInfo(ctx context.Context, requestID string) (*DetailedCostInfo, error) {
	if requestID == "" {
		return nil, fmt.Errorf("request ID is empty")
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
	time.Sleep(2 * time.Second)

	generationURL := fmt.Sprintf("%s?id=%s", OPENROUTER_GENERATION_URL, requestID)

	req, err := http.NewRequestWithContext(ctx, "GET", generationURL, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to create generation request: %w", err)
	}

	req.Header.Set("Authorization", "Bearer "+apiKey)
	req.Header.Set("HTTP-Referer", "https://github.com/AndVl1/ai-chatter")
	req.Header.Set("X-Title", "ai-chatter-benchmark")

	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("generation request failed: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		bodyBytes, _ := io.ReadAll(resp.Body)
		// –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Generation API –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
		if resp.StatusCode == 404 {
			return nil, fmt.Errorf("generation data not available (possibly free model)")
		}
		return nil, fmt.Errorf("generation API returned status %d: %s", resp.StatusCode, string(bodyBytes))
	}

	var generationResponse OpenRouterGenerationResponse
	if err := json.NewDecoder(resp.Body).Decode(&generationResponse); err != nil {
		return nil, fmt.Errorf("failed to decode generation response: %w", err)
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—ã –∑–∞ 1K —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
	var promptPrice, completionPrice float64
	if generationResponse.Data.TokensPrompt > 0 && generationResponse.Data.TotalCost > 0 {
		// –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–¥–µ–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–µ–∂–¥—É prompt –∏ completion
		totalTokens := generationResponse.Data.TokensPrompt + generationResponse.Data.TokensCompletion
		if totalTokens > 0 {
			promptRatio := float64(generationResponse.Data.TokensPrompt) / float64(totalTokens)
			completionRatio := float64(generationResponse.Data.TokensCompletion) / float64(totalTokens)

			promptCost := generationResponse.Data.TotalCost * promptRatio
			completionCost := generationResponse.Data.TotalCost * completionRatio

			promptPrice = (promptCost / float64(generationResponse.Data.TokensPrompt)) * 1000
			completionPrice = (completionCost / float64(generationResponse.Data.TokensCompletion)) * 1000
		}
	}

	return &DetailedCostInfo{
		RequestID:        requestID,
		Model:            generationResponse.Data.Model,
		PromptTokens:     generationResponse.Data.TokensPrompt,
		CompletionTokens: generationResponse.Data.TokensCompletion,
		TotalTokens:      generationResponse.Data.TokensPrompt + generationResponse.Data.TokensCompletion,
		PromptCost:       generationResponse.Data.TotalCost * (float64(generationResponse.Data.TokensPrompt) / float64(generationResponse.Data.TokensPrompt+generationResponse.Data.TokensCompletion)),
		CompletionCost:   generationResponse.Data.TotalCost * (float64(generationResponse.Data.TokensCompletion) / float64(generationResponse.Data.TokensPrompt+generationResponse.Data.TokensCompletion)),
		TotalCost:        generationResponse.Data.TotalCost,
		PromptPrice:      promptPrice,
		CompletionPrice:  completionPrice,
		NativeCost:       generationResponse.Data.Usage, // usage –∫–∞–∂–µ—Ç—Å—è –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–º –¥–ª—è native cost
	}, nil
}

// printAnalysis –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
func printAnalysis(parameterName string, analysis *AnalysisResult) {
	fmt.Printf("\n" + strings.Repeat("=", 60) + "\n")
	fmt.Printf("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í: %s\n", strings.ToUpper(parameterName))
	fmt.Printf(strings.Repeat("=", 60) + "\n\n")

	fmt.Printf("üéØ –û–¶–ï–ù–ö–ò:\n")
	fmt.Printf("  –ö–∞—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤:    %.1f/10\n", analysis.QualityScore)
	fmt.Printf("  –≠–∫–æ–Ω–æ–º–∏—á–Ω–æ—Å—Ç—å:       %.1f/10\n", analysis.CostEfficiency)
	fmt.Printf("  –°–∫–æ—Ä–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞:     %.1f/10\n", analysis.ResponseTime)

	fmt.Printf("\nüîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:\n")
	fmt.Printf("%s\n", wrapText(analysis.Analysis, 60))

	fmt.Printf("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø:\n")
	fmt.Printf("%s\n", wrapText(analysis.Recommendation, 60))

	fmt.Printf("\n‚≠ê –û–ü–¢–ò–ú–ê–õ–¨–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï: %v\n", analysis.BestValue)
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func float32Ptr(v float32) *float32 { return &v }
func intPtr(v int) *int             { return &v }

func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}

// fixArrayValue –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç JSON, –∑–∞–º–µ–Ω—è—è –º–∞—Å—Å–∏–≤—ã –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func fixArrayValue(jsonStr, fieldName string) string {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ç—Ä–æ–∫–æ–≤—É—é –∑–∞–º–µ–Ω—É –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	start := strings.Index(jsonStr, fmt.Sprintf(`"%s": [`, fieldName))
	if start == -1 {
		return jsonStr
	}

	// –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–∞—Å—Å–∏–≤–∞
	openBracket := strings.Index(jsonStr[start:], "[")
	if openBracket == -1 {
		return jsonStr
	}

	closeBracket := strings.Index(jsonStr[start+openBracket:], "]")
	if closeBracket == -1 {
		return jsonStr
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∞—Å—Å–∏–≤–∞
	arrayContent := jsonStr[start+openBracket+1 : start+openBracket+closeBracket]

	// –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	firstValue := strings.Split(strings.TrimSpace(arrayContent), ",")[0]
	firstValue = strings.TrimSpace(firstValue)

	// –ó–∞–º–µ–Ω—è–µ–º –≤–µ—Å—å –º–∞—Å—Å–∏–≤ –Ω–∞ –ø–µ—Ä–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	before := jsonStr[:start]
	after := jsonStr[start+openBracket+closeBracket+1:]
	fieldDeclaration := fmt.Sprintf(`"%s": %s`, fieldName, firstValue)

	return before + fieldDeclaration + after
}

func wrapText(text string, width int) string {
	words := strings.Fields(text)
	if len(words) == 0 {
		return text
	}

	var lines []string
	var currentLine strings.Builder

	for _, word := range words {
		if currentLine.Len() > 0 && currentLine.Len()+len(word)+1 > width {
			lines = append(lines, currentLine.String())
			currentLine.Reset()
		}

		if currentLine.Len() > 0 {
			currentLine.WriteString(" ")
		}
		currentLine.WriteString(word)
	}

	if currentLine.Len() > 0 {
		lines = append(lines, currentLine.String())
	}

	return strings.Join(lines, "\n")
}

// printSummaryStats –≤—ã–≤–æ–¥–∏—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
func printSummaryStats(parameterName string, results []BenchmarkResult) {
	if len(results) == 0 {
		log.Printf("  %s: No results", parameterName)
		return
	}

	// –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	var totalCost float64
	var totalDuration time.Duration
	var avgTokens, avgLength int
	var minCost, maxCost float64
	var minDuration, maxDuration time.Duration

	minCost = results[0].Cost
	maxCost = results[0].Cost
	minDuration = results[0].Duration
	maxDuration = results[0].Duration

	for _, result := range results {
		totalCost += result.Cost
		totalDuration += result.Duration
		avgTokens += result.Tokens
		avgLength += result.ResponseLength

		if result.Cost < minCost {
			minCost = result.Cost
		}
		if result.Cost > maxCost {
			maxCost = result.Cost
		}
		if result.Duration < minDuration {
			minDuration = result.Duration
		}
		if result.Duration > maxDuration {
			maxDuration = result.Duration
		}
	}

	avgTokens /= len(results)
	avgLength /= len(results)
	avgCost := totalCost / float64(len(results))
	avgDuration := totalDuration / time.Duration(len(results))

	log.Printf("\nüìä %s Results:", parameterName)
	log.Printf("  Tests: %d", len(results))
	log.Printf("  Avg Tokens: %d", avgTokens)
	log.Printf("  Avg Cost: $%.6f", avgCost)
	log.Printf("  Avg Duration: %v", avgDuration)
	log.Printf("  Avg Length: %d chars", avgLength)
	log.Printf("  Cost Range: $%.6f - $%.6f", minCost, maxCost)
	log.Printf("  Duration Range: %v - %v", minDuration, maxDuration)

	// –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –ø–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—é —Ü–µ–Ω–∞/–∫–∞—á–µ—Å—Ç–≤–æ
	bestValue := results[0].Value
	bestRatio := float64(results[0].ResponseLength) / math.Max(results[0].Cost*1000000, 0.1) // –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ 0

	for _, result := range results {
		ratio := float64(result.ResponseLength) / math.Max(result.Cost*1000000, 0.1)
		if ratio > bestRatio {
			bestRatio = ratio
			bestValue = result.Value
		}
	}

	log.Printf("  Best Value (chars/cost): %v", bestValue)

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
	for _, result := range results {
		if result.DetailedCostInfo != nil {
			log.Printf("\nüí∞ Model Pricing Information (%s):", result.DetailedCostInfo.Model)
			log.Printf("  Prompt Price: $%.6f per 1K tokens", result.DetailedCostInfo.PromptPrice)
			log.Printf("  Completion Price: $%.6f per 1K tokens", result.DetailedCostInfo.CompletionPrice)
			log.Printf("  Example: 1000 prompt + 1000 completion tokens = $%.6f",
				result.DetailedCostInfo.PromptPrice+result.DetailedCostInfo.CompletionPrice)
			break // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –º–æ–¥–µ–ª–∏
		}
	}
}
