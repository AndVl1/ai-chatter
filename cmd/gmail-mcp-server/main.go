package main

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"time"

	"github.com/joho/godotenv"
	"github.com/modelcontextprotocol/go-sdk/mcp"
	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
	"google.golang.org/api/gmail/v1"
	"google.golang.org/api/option"
)

// GmailSearchParams –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Gmail
type GmailSearchParams struct {
	Query     string `json:"query" mcp:"Gmail search query (e.g., 'from:example@gmail.com subject:important')"`
	MaxEmails int    `json:"max_emails,omitempty" mcp:"maximum number of emails to return (default: 10, max: 50)"`
	TimeRange string `json:"time_range,omitempty" mcp:"time range filter: 'today', 'week', 'month' (default: 'today')"`
}

// GmailEmailResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ email
type GmailEmailResult struct {
	ID          string    `json:"id"`
	Subject     string    `json:"subject"`
	From        string    `json:"from"`
	Date        time.Time `json:"date"`
	Snippet     string    `json:"snippet"`
	IsImportant bool      `json:"is_important"`
	IsUnread    bool      `json:"is_unread"`
	Body        string    `json:"body,omitempty"`
}

// OAuth2Credentials —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è OAuth2 credentials
type OAuth2Credentials struct {
	ClientID     string   `json:"client_id"`
	ClientSecret string   `json:"client_secret"`
	RedirectURIs []string `json:"redirect_uris"`
	AuthURI      string   `json:"auth_uri"`
	TokenURI     string   `json:"token_uri"`
}

// GoogleCredentialsFile —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ñ–∞–π–ª–∞ credentials.json –∏–∑ Google Cloud Console
type GoogleCredentialsFile struct {
	Installed *OAuth2Credentials `json:"installed,omitempty"`
	Web       *OAuth2Credentials `json:"web,omitempty"`
}

// GmailMCPServer –∫–∞—Å—Ç–æ–º–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Gmail
type GmailMCPServer struct {
	gmailService *gmail.Service
	config       *oauth2.Config
}

// NewGmailMCPServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è Gmail
func NewGmailMCPServer(credentialsJSON string) (*GmailMCPServer, error) {
	log.Printf("üîë Initializing Gmail MCP Server with OAuth2 credentials")

	// –ü–∞—Ä—Å–∏–º OAuth2 credentials —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞ Google Cloud Console
	credentials, err := parseGoogleCredentials(credentialsJSON)
	if err != nil {
		return nil, fmt.Errorf("failed to parse OAuth2 credentials: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º OAuth2 config
	config := &oauth2.Config{
		ClientID:     credentials.ClientID,
		ClientSecret: credentials.ClientSecret,
		RedirectURL:  "urn:ietf:wg:oauth:2.0:oob", // –¥–ª—è desktop –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
		Scopes:       []string{gmail.GmailReadonlyScope},
		Endpoint:     google.Endpoint,
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
	token, err := getToken(config)
	if err != nil {
		return nil, fmt.Errorf("failed to get OAuth2 token: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º
	httpClient := config.Client(context.Background(), token)

	// –°–æ–∑–¥–∞–µ–º Gmail service
	gmailService, err := gmail.NewService(
		context.Background(),
		option.WithHTTPClient(httpClient),
	)
	if err != nil {
		return nil, fmt.Errorf("failed to create Gmail service: %w", err)
	}

	return &GmailMCPServer{
		gmailService: gmailService,
		config:       config,
	}, nil
}

// getToken –ø–æ–ª—É—á–∞–µ—Ç OAuth2 —Ç–æ–∫–µ–Ω (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
func getToken(config *oauth2.Config) (*oauth2.Token, error) {
	// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–æ–∫–µ–Ω–æ–º
	tokenFile := getTokenFilePath()

	// –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω
	token, err := loadTokenFromFile(tokenFile)
	if err == nil {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω –Ω–µ –∏—Å—Ç–µ–∫
		if token.Valid() {
			log.Printf("‚úÖ Using cached OAuth2 token")
			return token, nil
		}
		log.Printf("‚ö†Ô∏è Cached token expired, refreshing...")
	}

	// –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç –∏–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫, –∑–∞–ø—É—Å–∫–∞–µ–º OAuth flow
	log.Printf("üîÑ Starting OAuth2 flow for Gmail authentication")

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	authURL := config.AuthCodeURL("state-token", oauth2.AccessTypeOffline)
	log.Printf("üîó Open this URL in your browser and authorize the application:")
	log.Printf("   %s", authURL)
	log.Printf("üìù Enter the authorization code: ")

	// –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –º—ã –Ω–µ –º–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å refresh token
	if refreshToken := os.Getenv("GMAIL_REFRESH_TOKEN"); refreshToken != "" {
		log.Printf("üìÑ Using refresh token from environment variable")
		token = &oauth2.Token{
			RefreshToken: refreshToken,
		}

		// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
		tokenSource := config.TokenSource(context.Background(), token)
		newToken, err := tokenSource.Token()
		if err != nil {
			return nil, fmt.Errorf("failed to refresh token: %w", err)
		}

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
		if err := saveTokenToFile(tokenFile, newToken); err != nil {
			log.Printf("‚ö†Ô∏è Warning: failed to save refreshed token: %v", err)
		}

		return newToken, nil
	}

	// –ï—Å–ª–∏ –Ω–µ—Ç refresh token, –ø—ã—Ç–∞–µ–º—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	var authCode string
	if _, err := fmt.Scan(&authCode); err != nil {
		return nil, fmt.Errorf("failed to read authorization code (you can also set GMAIL_REFRESH_TOKEN env var): %w", err)
	}

	// –û–±–º–µ–Ω–∏–≤–∞–µ–º –∫–æ–¥ –Ω–∞ —Ç–æ–∫–µ–Ω
	token, err = config.Exchange(context.Background(), authCode)
	if err != nil {
		return nil, fmt.Errorf("failed to exchange code for token: %w", err)
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
	if err := saveTokenToFile(tokenFile, token); err != nil {
		log.Printf("‚ö†Ô∏è Warning: failed to save token to cache: %v", err)
	}

	log.Printf("‚úÖ Successfully obtained OAuth2 token")
	return token, nil
}

// getTokenFilePath –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–æ–∫–µ–Ω–æ–º
func getTokenFilePath() string {
	homeDir, err := os.UserHomeDir()
	if err != nil {
		return "gmail-token.json"
	}
	return filepath.Join(homeDir, ".ai-chatter", "gmail-token.json")
}

// loadTokenFromFile –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞
func loadTokenFromFile(filename string) (*oauth2.Token, error) {
	file, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer file.Close()

	token := &oauth2.Token{}
	err = json.NewDecoder(file).Decode(token)
	return token, err
}

// saveTokenToFile —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ —Ñ–∞–π–ª
func saveTokenToFile(filename string, token *oauth2.Token) error {
	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	dir := filepath.Dir(filename)
	if err := os.MkdirAll(dir, 0700); err != nil {
		return err
	}

	file, err := os.OpenFile(filename, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0600)
	if err != nil {
		return err
	}
	defer file.Close()

	return json.NewEncoder(file).Encode(token)
}

// parseGoogleCredentials –ø–∞—Ä—Å–∏—Ç credentials JSON —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
func parseGoogleCredentials(credentialsJSON string) (*OAuth2Credentials, error) {
	// –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –ø—Ä—è–º—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É OAuth2Credentials
	var directCredentials OAuth2Credentials
	if err := json.Unmarshal([]byte(credentialsJSON), &directCredentials); err == nil {
		if directCredentials.ClientID != "" && directCredentials.ClientSecret != "" {
			log.Printf("‚úÖ Parsed direct OAuth2 credentials format")
			return &directCredentials, nil
		}
	}

	// –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç Google Cloud Console
	var googleFile GoogleCredentialsFile
	if err := json.Unmarshal([]byte(credentialsJSON), &googleFile); err != nil {
		return nil, fmt.Errorf("failed to parse credentials as Google format: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º installed credentials (Desktop application)
	if googleFile.Installed != nil {
		log.Printf("‚úÖ Parsed Google Cloud Console credentials (installed/desktop format)")
		return googleFile.Installed, nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º web credentials (Web application)
	if googleFile.Web != nil {
		log.Printf("‚úÖ Parsed Google Cloud Console credentials (web format)")
		return googleFile.Web, nil
	}

	return nil, fmt.Errorf("no valid credentials found in JSON - expected 'installed' or 'web' section")
}

// SearchEmails –∏—â–µ—Ç email –≤ Gmail –ø–æ –∑–∞–ø—Ä–æ—Å—É
func (s *GmailMCPServer) SearchEmails(ctx context.Context, session *mcp.ServerSession, params *mcp.CallToolParamsFor[GmailSearchParams]) (*mcp.CallToolResultFor[any], error) {
	args := params.Arguments

	log.Printf("üìß MCP Server: Searching Gmail for query '%s'", args.Query)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	maxResults := int64(args.MaxEmails)
	if maxResults <= 0 {
		maxResults = 10
	}
	if maxResults > 50 {
		maxResults = 50
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –∫ –∑–∞–ø—Ä–æ—Å—É
	query := args.Query
	if args.TimeRange != "" {
		switch args.TimeRange {
		case "today":
			query += " newer_than:1d"
		case "week":
			query += " newer_than:7d"
		case "month":
			query += " newer_than:30d"
		}
	} else {
		// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∏—Å—å–º–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å
		query += " newer_than:1d"
	}

	// –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
	listCall := s.gmailService.Users.Messages.List("me").Q(query).MaxResults(maxResults)
	messages, err := listCall.Do()
	if err != nil {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå Gmail search failed: %v", err)},
			},
		}, nil
	}

	var results []GmailEmailResult

	// –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	for _, msg := range messages.Messages {
		if int64(len(results)) >= maxResults {
			break
		}

		// –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏
		fullMsg, err := s.gmailService.Users.Messages.Get("me", msg.Id).Do()
		if err != nil {
			log.Printf("‚ö†Ô∏è Failed to get message details for %s: %v", msg.Id, err)
			continue
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
		email := s.parseGmailMessage(fullMsg)
		results = append(results, email)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var resultMessage string
	if len(results) == 0 {
		resultMessage = fmt.Sprintf("üìß No emails found for query '%s' in the specified time range", args.Query)
	} else {
		resultMessage = fmt.Sprintf("üìß Found %d emails for query '%s':\n\n", len(results), args.Query)
		for i, email := range results {
			importance := ""
			if email.IsImportant {
				importance = " ‚≠ê"
			}
			unread := ""
			if email.IsUnread {
				unread = " üîµ"
			}

			resultMessage += fmt.Sprintf("%d. **From:** %s%s%s\n", i+1, email.From, importance, unread)
			resultMessage += fmt.Sprintf("   **Subject:** %s\n", email.Subject)
			resultMessage += fmt.Sprintf("   **Date:** %s\n", email.Date.Format("2006-01-02 15:04"))
			resultMessage += fmt.Sprintf("   **Snippet:** %s\n\n", email.Snippet)
		}
	}

	return &mcp.CallToolResultFor[any]{
		Content: []mcp.Content{
			&mcp.TextContent{Text: resultMessage},
		},
		Meta: map[string]interface{}{
			"query":       args.Query,
			"time_range":  args.TimeRange,
			"emails":      results,
			"total_found": len(results),
			"success":     true,
		},
	}, nil
}

// parseGmailMessage –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ Gmail —Å–æ–æ–±—â–µ–Ω–∏—è
func (s *GmailMCPServer) parseGmailMessage(msg *gmail.Message) GmailEmailResult {
	result := GmailEmailResult{
		ID:      msg.Id,
		Snippet: msg.Snippet,
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É
	if msg.InternalDate > 0 {
		result.Date = time.Unix(msg.InternalDate/1000, 0)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∫–∏ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞–∂–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è
	for _, labelID := range msg.LabelIds {
		switch labelID {
		case "IMPORTANT":
			result.IsImportant = true
		case "UNREAD":
			result.IsUnread = true
		}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	for _, header := range msg.Payload.Headers {
		switch header.Name {
		case "Subject":
			result.Subject = header.Value
		case "From":
			result.From = header.Value
		}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–ª–æ –ø–∏—Å—å–º–∞
	result.Body = s.extractMessageBody(msg.Payload)

	return result
}

// extractMessageBody –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
func (s *GmailMCPServer) extractMessageBody(payload *gmail.MessagePart) string {
	if payload.Body.Data != "" {
		decoded, err := base64.URLEncoding.DecodeString(payload.Body.Data)
		if err == nil {
			return string(decoded)
		}
	}

	// –ò—â–µ–º –≤ —á–∞—Å—Ç—è—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
	for _, part := range payload.Parts {
		if part.MimeType == "text/plain" && part.Body.Data != "" {
			decoded, err := base64.URLEncoding.DecodeString(part.Body.Data)
			if err == nil {
				return string(decoded)
			}
		}
	}

	return ""
}

func main() {
	if err := godotenv.Load(".env" /*, "../.env", "cmd/bot/.env"*/); err != nil {
		log.Printf("Warning: .env file not found: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Gmail –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	gmailCredentials := os.Getenv("GMAIL_CREDENTIALS_JSON")

	// –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ –ø—Ä—è–º–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –ø—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞
	if gmailCredentials == "" {
		if credentialsPath := os.Getenv("GMAIL_CREDENTIALS_JSON_PATH"); credentialsPath != "" {
			if credentialsData, err := os.ReadFile(credentialsPath); err == nil {
				gmailCredentials = string(credentialsData)
			}
		}
	}

	if gmailCredentials == "" {
		log.Fatal("‚ùå Either GMAIL_CREDENTIALS_JSON or GMAIL_CREDENTIALS_JSON_PATH environment variable is required")
	}

	log.Printf("üöÄ Starting Gmail MCP Server")
	log.Printf("üîë Using Gmail credentials (length: %d chars)", len(gmailCredentials))

	// –°–æ–∑–¥–∞–µ–º Gmail —Å–µ—Ä–≤–µ—Ä
	gmailServer, err := NewGmailMCPServer(gmailCredentials)
	if err != nil {
		log.Fatalf("‚ùå Failed to create Gmail server: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
	server := mcp.NewServer(&mcp.Implementation{
		Name:    "ai-chatter-gmail-mcp",
		Version: "1.0.0",
	}, nil)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
	mcp.AddTool(server, &mcp.Tool{
		Name:        "search_gmail",
		Description: "Searches for emails in Gmail using specified query and filters",
	}, gmailServer.SearchEmails)

	log.Printf("üìã Registered Gmail MCP tools: search_gmail")
	log.Printf("üîó Starting Gmail MCP server on stdin/stdout...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ stdin/stdout
	transport := mcp.NewStdioTransport()
	if err := server.Run(context.Background(), transport); err != nil {
		log.Fatalf("‚ùå Gmail MCP Server failed: %v", err)
	}
}
