package main

import (
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"strings"
	"time"

	"github.com/joho/godotenv"
	"github.com/modelcontextprotocol/go-sdk/mcp"
)

// GitHubReleaseParams –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–ª–∏–∑–æ–≤ GitHub
type GitHubReleaseParams struct {
	Owner          string `json:"owner" mcp:"GitHub repository owner (e.g., 'AndVl1')"`
	Repo           string `json:"repo" mcp:"GitHub repository name (e.g., 'SnakeGame')"`
	MaxReleases    int    `json:"max_releases,omitempty" mcp:"maximum number of releases to return (default: 10, max: 50)"`
	IncludeDrafts  bool   `json:"include_drafts,omitempty" mcp:"include draft releases (default: false)"`
	PreReleaseOnly bool   `json:"prerelease_only,omitempty" mcp:"only pre-releases (default: false)"`
}

// GitHubDownloadAssetParams –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—Å—Å–µ—Ç–∞
type GitHubDownloadAssetParams struct {
	Owner      string `json:"owner" mcp:"GitHub repository owner"`
	Repo       string `json:"repo" mcp:"GitHub repository name"`
	ReleaseID  int64  `json:"release_id" mcp:"GitHub release ID"`
	AssetName  string `json:"asset_name" mcp:"name of the asset to download (e.g., 'app-release.aab')"`
	TargetPath string `json:"target_path,omitempty" mcp:"local path to save the file (optional)"`
}

// GitHubRelease –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ª–∏–∑–µ GitHub
type GitHubRelease struct {
	ID           int64                `json:"id"`
	TagName      string               `json:"tag_name"`
	Name         string               `json:"name"`
	Body         string               `json:"body"`
	IsDraft      bool                 `json:"draft"`
	IsPrerelease bool                 `json:"prerelease"`
	CreatedAt    time.Time            `json:"created_at"`
	PublishedAt  time.Time            `json:"published_at"`
	Assets       []GitHubReleaseAsset `json:"assets"`
	Author       GitHubUser           `json:"author"`
	HTMLURL      string               `json:"html_url"`
}

// GitHubReleaseAsset –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å—Å–µ—Ç–µ —Ä–µ–ª–∏–∑–∞
type GitHubReleaseAsset struct {
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	Label       string    `json:"label"`
	Size        int64     `json:"size"`
	DownloadURL string    `json:"browser_download_url"`
	ContentType string    `json:"content_type"`
	State       string    `json:"state"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// GitHubUser –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub
type GitHubUser struct {
	ID        int64  `json:"id"`
	Login     string `json:"login"`
	AvatarURL string `json:"avatar_url"`
	HTMLURL   string `json:"html_url"`
}

// GitHubMCPServer –∫–∞—Å—Ç–æ–º–Ω—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è GitHub
type GitHubMCPServer struct {
	client *http.Client
	token  string
}

// NewGitHubMCPServer —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π MCP —Å–µ—Ä–≤–µ—Ä –¥–ª—è GitHub
func NewGitHubMCPServer(token string) (*GitHubMCPServer, error) {
	log.Printf("üîë Initializing GitHub MCP Server")

	if token == "" {
		log.Printf("‚ö†Ô∏è Warning: No GitHub token provided, using public API (rate limited)")
	}

	return &GitHubMCPServer{
		client: &http.Client{Timeout: 30 * time.Second},
		token:  token,
	}, nil
}

// makeGitHubRequest –≤—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ GitHub API
func (g *GitHubMCPServer) makeGitHubRequest(ctx context.Context, url string) (*http.Response, error) {
	log.Printf("üîó GitHub API: Making request to %s", url)
	log.Printf("üîë GitHub API: Using authentication: %v", g.token != "")

	req, err := http.NewRequestWithContext(ctx, "GET", url, nil)
	if err != nil {
		log.Printf("‚ùå GitHub API: Failed to create request: %v", err)
		return nil, err
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	req.Header.Set("Accept", "application/vnd.github.v3+json")
	req.Header.Set("User-Agent", "ai-chatter-github-mcp/1.0.0")

	if g.token != "" {
		req.Header.Set("Authorization", "token "+g.token)
		log.Printf("üîë GitHub API: Authorization header set with token")
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
		if len(g.token) > 8 {
			maskedToken := g.token[:4] + "..." + g.token[len(g.token)-4:]
			log.Printf("üîë GitHub API: Token: %s", maskedToken)
		}
	} else {
		log.Printf("‚ö†Ô∏è GitHub API: No token provided, using public API (rate limited)")
	}

	resp, err := g.client.Do(req)
	if err != nil {
		log.Printf("‚ùå GitHub API: Request failed: %v", err)
		return nil, err
	}

	log.Printf("üìä GitHub API: Response status: %d", resp.StatusCode)
	return resp, nil
}

// GetReleases –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–∏–∑–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func (g *GitHubMCPServer) GetReleases(ctx context.Context, session *mcp.ServerSession, params *mcp.CallToolParamsFor[GitHubReleaseParams]) (*mcp.CallToolResultFor[any], error) {
	args := params.Arguments

	log.Printf("üì¶ MCP Server: Getting GitHub releases for %s/%s", args.Owner, args.Repo)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	maxResults := args.MaxReleases
	if maxResults <= 0 {
		maxResults = 10
	}
	if maxResults > 50 {
		maxResults = 50
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º URL
	url := fmt.Sprintf("https://api.github.com/repos/%s/%s/releases?per_page=%d", args.Owner, args.Repo, maxResults)

	resp, err := g.makeGitHubRequest(ctx, url)
	if err != nil {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå GitHub API request failed: %v", err)},
			},
		}, nil
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå GitHub API error %d: %s", resp.StatusCode, string(body))},
			},
		}, nil
	}

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
	var releases []GitHubRelease
	if err := json.NewDecoder(resp.Body).Decode(&releases); err != nil {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå Failed to parse GitHub response: %v", err)},
			},
		}, nil
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–ª–∏–∑—ã
	var filteredReleases []GitHubRelease
	for _, release := range releases {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—Ä–∞—Ñ—Ç—ã –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω—ã
		if release.IsDraft && !args.IncludeDrafts {
			continue
		}

		// –ï—Å–ª–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –ø—Ä–µ-—Ä–µ–ª–∏–∑—ã
		if args.PreReleaseOnly && !release.IsPrerelease {
			continue
		}

		filteredReleases = append(filteredReleases, release)
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	var resultMessage string
	if len(filteredReleases) == 0 {
		resultMessage = fmt.Sprintf("üì¶ No releases found for %s/%s with specified filters", args.Owner, args.Repo)
	} else {
		resultMessage = fmt.Sprintf("üì¶ Found %d releases for %s/%s:\n\n", len(filteredReleases), args.Owner, args.Repo)
		for i, release := range filteredReleases {
			releaseType := ""
			if release.IsDraft {
				releaseType = " üìù (Draft)"
			} else if release.IsPrerelease {
				releaseType = " üß™ (Pre-release)"
			}

			resultMessage += fmt.Sprintf("%d. **%s** (%s)%s\n", i+1, release.Name, release.TagName, releaseType)
			resultMessage += fmt.Sprintf("   **ID:** %d\n", release.ID)
			resultMessage += fmt.Sprintf("   **Published:** %s\n", release.PublishedAt.Format("2006-01-02 15:04"))
			resultMessage += fmt.Sprintf("   **Author:** @%s\n", release.Author.Login)

			if len(release.Assets) > 0 {
				resultMessage += fmt.Sprintf("   **Assets (%d):**\n", len(release.Assets))
				for _, asset := range release.Assets {
					sizeKB := asset.Size / 1024
					resultMessage += fmt.Sprintf("     - %s (%d KB)\n", asset.Name, sizeKB)
				}
			}

			if release.Body != "" {
				// –û–±—Ä–µ–∑–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
				body := release.Body
				if len(body) > 200 {
					body = body[:200] + "..."
				}
				resultMessage += fmt.Sprintf("   **Description:** %s\n", body)
			}

			resultMessage += fmt.Sprintf("   **URL:** %s\n\n", release.HTMLURL)
		}
	}

	return &mcp.CallToolResultFor[any]{
		Content: []mcp.Content{
			&mcp.TextContent{Text: resultMessage},
		},
		Meta: map[string]interface{}{
			"owner":       args.Owner,
			"repo":        args.Repo,
			"releases":    filteredReleases,
			"total_found": len(filteredReleases),
			"success":     true,
		},
	}, nil
}

// DownloadAsset —Å–∫–∞—á–∏–≤–∞–µ—Ç –∞—Å—Å–µ—Ç —Ä–µ–ª–∏–∑–∞
func (g *GitHubMCPServer) DownloadAsset(ctx context.Context, session *mcp.ServerSession, params *mcp.CallToolParamsFor[GitHubDownloadAssetParams]) (*mcp.CallToolResultFor[any], error) {
	args := params.Arguments

	log.Printf("‚¨áÔ∏è MCP Server: Downloading asset %s for release %d from %s/%s", args.AssetName, args.ReleaseID, args.Owner, args.Repo)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ª–∏–∑–µ
	releaseURL := fmt.Sprintf("https://api.github.com/repos/%s/%s/releases/%d", args.Owner, args.Repo, args.ReleaseID)

	resp, err := g.makeGitHubRequest(ctx, releaseURL)
	if err != nil {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå Failed to get release info: %v", err)},
			},
		}, nil
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå GitHub API error %d: %s", resp.StatusCode, string(body))},
			},
		}, nil
	}

	var release GitHubRelease
	if err := json.NewDecoder(resp.Body).Decode(&release); err != nil {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå Failed to parse release info: %v", err)},
			},
		}, nil
	}

	// –ò—â–µ–º –Ω—É–∂–Ω—ã–π –∞—Å—Å–µ—Ç
	var targetAsset *GitHubReleaseAsset
	for _, asset := range release.Assets {
		if asset.Name == args.AssetName || strings.Contains(asset.Name, args.AssetName) {
			targetAsset = &asset
			break
		}
	}

	if targetAsset == nil {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå Asset '%s' not found in release %s", args.AssetName, release.TagName)},
			},
		}, nil
	}

	// –°–∫–∞—á–∏–≤–∞–µ–º –∞—Å—Å–µ—Ç
	downloadResp, err := g.makeGitHubRequest(ctx, targetAsset.DownloadURL)
	if err != nil {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå Failed to download asset: %v", err)},
			},
		}, nil
	}
	defer downloadResp.Body.Close()

	if downloadResp.StatusCode != http.StatusOK {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå Download failed with status %d", downloadResp.StatusCode)},
			},
		}, nil
	}

	// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
	fileData, err := io.ReadAll(downloadResp.Body)
	if err != nil {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå Failed to read downloaded file: %v", err)},
			},
		}, nil
	}

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	targetPath := args.TargetPath
	if targetPath == "" {
		targetPath = fmt.Sprintf("./downloads/%s", targetAsset.Name)
	}

	// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if dir := strings.TrimSuffix(targetPath, targetAsset.Name); dir != "" && dir != "./" {
		if err := os.MkdirAll(dir, 0755); err != nil {
			log.Printf("‚ö†Ô∏è Warning: failed to create directory %s: %v", dir, err)
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
	if err := os.WriteFile(targetPath, fileData, 0644); err != nil {
		return &mcp.CallToolResultFor[any]{
			IsError: true,
			Content: []mcp.Content{
				&mcp.TextContent{Text: fmt.Sprintf("‚ùå Failed to save file: %v", err)},
			},
		}, nil
	}

	// –ö–æ–¥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
	base64Content := base64.StdEncoding.EncodeToString(fileData)

	resultMessage := fmt.Sprintf("‚úÖ Successfully downloaded asset '%s' from release %s\n", targetAsset.Name, release.TagName)
	resultMessage += fmt.Sprintf("**File size:** %d bytes (%.2f KB)\n", len(fileData), float64(len(fileData))/1024)
	resultMessage += fmt.Sprintf("**Saved to:** %s\n", targetPath)
	resultMessage += fmt.Sprintf("**Content type:** %s\n", targetAsset.ContentType)

	return &mcp.CallToolResultFor[any]{
		Content: []mcp.Content{
			&mcp.TextContent{Text: resultMessage},
		},
		Meta: map[string]interface{}{
			"success":        true,
			"asset_name":     targetAsset.Name,
			"asset_size":     len(fileData),
			"target_path":    targetPath,
			"content_type":   targetAsset.ContentType,
			"base64_content": base64Content,
			"release":        release,
		},
	}, nil
}

func main() {
	if err := godotenv.Load(".env"); err != nil {
		log.Printf("Warning: .env file not found: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º GitHub —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	githubToken := os.Getenv("GITHUB_TOKEN")

	log.Printf("üöÄ Starting GitHub MCP Server")
	log.Printf("üì¶ GitHub token available: %v", githubToken != "")

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–∞
	if githubToken == "" {
		log.Printf("‚ö†Ô∏è GITHUB_TOKEN environment variable is empty!")
		log.Printf("üí° Please set GITHUB_TOKEN before starting the server")
		log.Printf("üîó GitHub will use public API (highly rate limited)")
	} else {
		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		tokenLen := len(githubToken)
		if tokenLen > 8 {
			maskedToken := githubToken[:4] + "..." + githubToken[tokenLen-4:]
			log.Printf("üîë GitHub token: %s (length: %d)", maskedToken, tokenLen)
		} else {
			log.Printf("üîë GitHub token length: %d", tokenLen)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
		if strings.HasPrefix(githubToken, "ghp_") {
			log.Printf("‚úÖ Personal Access Token format detected")
		} else if strings.HasPrefix(githubToken, "github_pat_") {
			log.Printf("‚úÖ Fine-grained Personal Access Token format detected")
		} else if strings.HasPrefix(githubToken, "gho_") {
			log.Printf("‚úÖ OAuth token format detected")
		} else {
			log.Printf("‚ö†Ô∏è Unexpected token format - should start with ghp_, github_pat_, or gho_")
		}
	}

	// –°–æ–∑–¥–∞–µ–º GitHub —Å–µ—Ä–≤–µ—Ä
	githubServer, err := NewGitHubMCPServer(githubToken)
	if err != nil {
		log.Fatalf("‚ùå Failed to create GitHub server: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º MCP —Å–µ—Ä–≤–µ—Ä
	server := mcp.NewServer(&mcp.Implementation{
		Name:    "ai-chatter-github-mcp",
		Version: "1.0.0",
	}, nil)

	// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
	mcp.AddTool(server, &mcp.Tool{
		Name:        "get_github_releases",
		Description: "Gets list of releases from a GitHub repository with filtering options",
	}, githubServer.GetReleases)

	mcp.AddTool(server, &mcp.Tool{
		Name:        "download_github_asset",
		Description: "Downloads an asset (file) from a GitHub release",
	}, githubServer.DownloadAsset)

	log.Printf("üìã Registered GitHub MCP tools: get_github_releases, download_github_asset")
	log.Printf("üîó Starting GitHub MCP server on stdin/stdout...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ stdin/stdout
	transport := mcp.NewStdioTransport()
	if err := server.Run(context.Background(), transport); err != nil {
		log.Fatalf("‚ùå GitHub MCP Server failed: %v", err)
	}
}
