package vibecoding

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"strings"
	"sync"
	"time"

	"ai-chatter/internal/codevalidation"
	"ai-chatter/internal/llm"
)

// VibeCodingSession –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –≤–∞–π–±–∫–æ–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
type VibeCodingSession struct {
	UserID         int64                              // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
	ChatID         int64                              // ID —á–∞—Ç–∞
	ProjectName    string                             // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
	StartTime      time.Time                          // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–µ—Å—Å–∏–∏
	Files          map[string]string                  // –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞: –∏–º—è -> —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	GeneratedFiles map[string]string                  // –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	ContainerID    string                             // ID Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
	Analysis       *codevalidation.CodeAnalysisResult // –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞ (unified from validator)
	TestCommand    string                             // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤
	Docker         *DockerAdapter                     // Docker –∞–¥–∞–ø—Ç–µ—Ä
	LLMClient      llm.Client                         // LLM –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
	mutex          sync.RWMutex                       // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤
}

// SessionManager —É–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏ –≤–∞–π–±–∫–æ–¥–∏–Ω–≥–∞
type SessionManager struct {
	sessions  map[int64]*VibeCodingSession // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ UserID
	mutex     sync.RWMutex                 // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ—Ç–æ–∫–æ–≤
	webServer *WebServer                   // –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–µ—Å—Å–∏–π
}

// NewSessionManager —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
func NewSessionManager() *SessionManager {
	sm := &SessionManager{
		sessions: make(map[int64]*VibeCodingSession),
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 8080
	sm.webServer = NewWebServer(sm, 8080)
	go func() {
		if err := sm.webServer.Start(); err != nil && err != http.ErrServerClosed {
			log.Printf("‚ùå Failed to start VibeCoding web server: %v", err)
		}
	}()

	return sm
}

// CreateSession —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤–∞–π–±–∫–æ–¥–∏–Ω–≥–∞
func (sm *SessionManager) CreateSession(userID, chatID int64, projectName string, files map[string]string, llmClient llm.Client) (*VibeCodingSession, error) {
	sm.mutex.Lock()
	defer sm.mutex.Unlock()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if existingSession, exists := sm.sessions[userID]; exists {
		return nil, fmt.Errorf("—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: %s", userID, existingSession.ProjectName)
	}

	// –°–æ–∑–¥–∞–µ–º Docker –∫–ª–∏–µ–Ω—Ç –∏ –∞–¥–∞–ø—Ç–µ—Ä
	var dockerManager codevalidation.DockerManager
	realDockerClient, err := codevalidation.NewDockerClient()
	if err != nil {
		log.Printf("‚ö†Ô∏è Docker not available, using mock client for vibecoding session")
		dockerManager = codevalidation.NewMockDockerClient()
	} else {
		dockerManager = realDockerClient
	}

	dockerAdapter := NewDockerAdapter(dockerManager)

	session := &VibeCodingSession{
		UserID:         userID,
		ChatID:         chatID,
		ProjectName:    projectName,
		StartTime:      time.Now(),
		Files:          make(map[string]string),
		GeneratedFiles: make(map[string]string),
		Docker:         dockerAdapter,
		LLMClient:      llmClient,
	}

	// –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
	for filename, content := range files {
		session.Files[filename] = content
	}

	sm.sessions[userID] = session
	log.Printf("üî• Created vibecoding session for user %d: %s", userID, projectName)

	return session, nil
}

// GetSession –ø–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (sm *SessionManager) GetSession(userID int64) (*VibeCodingSession, bool) {
	sm.mutex.RLock()
	defer sm.mutex.RUnlock()

	session, exists := sm.sessions[userID]
	return session, exists
}

// EndSession –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (sm *SessionManager) EndSession(userID int64) error {
	sm.mutex.Lock()
	defer sm.mutex.Unlock()

	session, exists := sm.sessions[userID]
	if !exists {
		return fmt.Errorf("—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %d –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏", userID)
	}

	// –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Å—Å–∏–∏
	if err := session.Cleanup(); err != nil {
		log.Printf("‚ö†Ô∏è Error cleaning up session for user %d: %v", userID, err)
	}

	delete(sm.sessions, userID)
	log.Printf("üî• Ended vibecoding session for user %d: %s", userID, session.ProjectName)

	return nil
}

// HasActiveSession –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è
func (sm *SessionManager) HasActiveSession(userID int64) bool {
	sm.mutex.RLock()
	defer sm.mutex.RUnlock()

	_, exists := sm.sessions[userID]
	return exists
}

// GetActiveSessions –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
func (sm *SessionManager) GetActiveSessions() int {
	sm.mutex.RLock()
	defer sm.mutex.RUnlock()

	return len(sm.sessions)
}

// SetupEnvironment –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ (–¥–æ 3 –ø–æ–ø—ã—Ç–æ–∫)
func (s *VibeCodingSession) SetupEnvironment(ctx context.Context) error {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	log.Printf("üî• Setting up environment for vibecoding session: %s", s.ProjectName)

	maxAttempts := 3
	var lastError error

	for attempt := 1; attempt <= maxAttempts; attempt++ {
		log.Printf("üî• Environment setup attempt %d/%d", attempt, maxAttempts)

		// 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–µ–∫—Ç
		if err := s.analyzeProject(ctx); err != nil {
			lastError = fmt.Errorf("project analysis failed: %w", err)
			log.Printf("‚ùå Attempt %d failed: %v", attempt, lastError)
			continue
		}

		// 2. –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
		containerID, err := s.Docker.CreateContainer(ctx, s.Analysis)
		if err != nil {
			lastError = fmt.Errorf("container creation failed: %w", err)
			log.Printf("‚ùå Attempt %d failed: %v", attempt, lastError)
			continue
		}
		s.ContainerID = containerID

		// 3. –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
		if err := s.Docker.CopyFilesToContainer(ctx, s.ContainerID, s.Files); err != nil {
			lastError = fmt.Errorf("file copying failed: %w", err)
			log.Printf("‚ùå Attempt %d failed: %v", attempt, lastError)
			// –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
			s.Docker.RemoveContainer(ctx, s.ContainerID)
			s.ContainerID = ""
			continue
		}

		// 4. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
		if err := s.Docker.InstallDependencies(ctx, s.ContainerID, s.Analysis); err != nil {
			lastError = fmt.Errorf("dependency installation failed: %w", err)
			log.Printf("‚ùå Attempt %d failed: %v", attempt, lastError)

			// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
			if attempt < maxAttempts {
				log.Printf("üîß Analyzing error and trying to fix configuration...")
				if fixedAnalysis, fixErr := s.analyzeAndFixError(ctx, err, s.Analysis, attempt); fixErr == nil {
					s.Analysis = fixedAnalysis
					log.Printf("‚úÖ Configuration updated, retrying with new settings")
				} else {
					log.Printf("‚ö†Ô∏è Could not fix configuration: %v", fixErr)
				}
			}

			// –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø—Ä–∏ –æ—à–∏–±–∫–µ
			s.Docker.RemoveContainer(ctx, s.ContainerID)
			s.ContainerID = ""
			continue
		}

		// 5. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
		s.TestCommand = s.generateTestCommand()

		log.Printf("‚úÖ Environment setup successful on attempt %d", attempt)
		return nil
	}

	return fmt.Errorf("environment setup failed after %d attempts: %w", maxAttempts, lastError)
}

// analyzeProject –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É—è LLM (unified approach from validator.go)
func (s *VibeCodingSession) analyzeProject(ctx context.Context) error {
	log.Printf("üìä Analyzing VibeCoding project with %d files using LLM", len(s.Files))

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏–∑ CodeValidationWorkflow
	workflow := codevalidation.NewCodeValidationWorkflow(s.LLMClient, nil)

	analysis, err := workflow.AnalyzeProjectForVibeCoding(ctx, s.Files)
	if err != nil {
		return fmt.Errorf("failed to analyze project: %w", err)
	}

	s.Analysis = analysis
	log.Printf("üî• VibeCoding project analysis complete: %s (%s)", s.Analysis.Language, s.Analysis.DockerImage)
	log.Printf("üì¶ Install commands: %v", s.Analysis.InstallCommands)
	log.Printf("‚ö° Validation commands: %v", s.Analysis.Commands)

	return nil
}

// Note: Hardcoded language detection methods removed - now using unified LLM-based approach from validator.go

// generateTestCommand –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ LLM
func (s *VibeCodingSession) generateTestCommand() string {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ LLM –∞–Ω–∞–ª–∏–∑–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
	if len(s.Analysis.TestCommands) > 0 {
		log.Printf("üß™ Using test command from LLM analysis: %s", s.Analysis.TestCommands[0])
		return s.Analysis.TestCommands[0]
	}

	// Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –µ—Å–ª–∏ TestCommands –ø—É—Å—Ç—ã–µ
	for _, cmd := range s.Analysis.Commands {
		// –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ "test" –≤ –∫–æ–º–∞–Ω–¥–µ
		if strings.Contains(strings.ToLower(cmd), "test") {
			log.Printf("üß™ Found test-like command from validation commands: %s", cmd)
			return cmd
		}
	}

	// –ü–æ—Å–ª–µ–¥–Ω–∏–π fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é –∫–æ–º–∞–Ω–¥—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–∞–∫ —Ç–µ—Å—Ç
	if len(s.Analysis.Commands) > 0 {
		log.Printf("‚ö†Ô∏è No test command found, using first validation command as test: %s", s.Analysis.Commands[0])
		return s.Analysis.Commands[0]
	}

	log.Printf("‚ö†Ô∏è No commands available from LLM analysis, using fallback")
	return "echo 'No test command available from LLM analysis'"
}

// AddGeneratedFile –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–µ—Å—Å–∏—é
func (s *VibeCodingSession) AddGeneratedFile(filename, content string) {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	s.GeneratedFiles[filename] = content
	log.Printf("üî• Added generated file to session: %s (%d bytes)", filename, len(content))
}

// GetAllFiles –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã (–∏—Å—Ö–æ–¥–Ω—ã–µ + —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ)
func (s *VibeCodingSession) GetAllFiles() map[string]string {
	s.mutex.RLock()
	defer s.mutex.RUnlock()

	allFiles := make(map[string]string)

	// –ö–æ–ø–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã
	for filename, content := range s.Files {
		allFiles[filename] = content
	}

	// –ö–æ–ø–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
	for filename, content := range s.GeneratedFiles {
		allFiles[filename] = content
	}

	return allFiles
}

// Cleanup –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã —Å–µ—Å—Å–∏–∏
func (s *VibeCodingSession) Cleanup() error {
	s.mutex.Lock()
	defer s.mutex.Unlock()

	if s.ContainerID != "" {
		ctx := context.Background()
		if err := s.Docker.RemoveContainer(ctx, s.ContainerID); err != nil {
			return fmt.Errorf("failed to remove container %s: %w", s.ContainerID, err)
		}
		s.ContainerID = ""
	}

	log.Printf("üî• Session cleanup completed")
	return nil
}

// ExecuteCommand –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å–µ—Å—Å–∏–∏
func (s *VibeCodingSession) ExecuteCommand(ctx context.Context, command string) (*codevalidation.ValidationResult, error) {
	s.mutex.RLock()
	defer s.mutex.RUnlock()

	if s.ContainerID == "" {
		return nil, fmt.Errorf("session environment not set up")
	}

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
	tempAnalysis := &codevalidation.CodeAnalysisResult{
		Language:    s.Analysis.Language,
		DockerImage: s.Analysis.DockerImage,
		Commands:    []string{command},
		WorkingDir:  s.Analysis.WorkingDir,
	}

	return s.Docker.ExecuteValidation(ctx, s.ContainerID, tempAnalysis)
}

// GetSessionInfo –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
func (s *VibeCodingSession) GetSessionInfo() map[string]interface{} {
	s.mutex.RLock()
	defer s.mutex.RUnlock()

	return map[string]interface{}{
		"project_name":    s.ProjectName,
		"language":        s.Analysis.Language,
		"start_time":      s.StartTime,
		"files_count":     len(s.Files),
		"generated_count": len(s.GeneratedFiles),
		"test_command":    s.TestCommand,
		"container_id":    s.ContainerID,
	}
}

// analyzeAndFixError –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func (s *VibeCodingSession) analyzeAndFixError(ctx context.Context, setupError error, currentAnalysis *codevalidation.CodeAnalysisResult, attempt int) (*codevalidation.CodeAnalysisResult, error) {
	if s.LLMClient == nil {
		return nil, fmt.Errorf("LLM client not available for error analysis")
	}

	log.Printf("üîç Analyzing setup error on attempt %d: %v", attempt, setupError)

	// –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
	systemPrompt := `You are an expert DevOps engineer specializing in fixing environment setup issues. 
Analyze the error and current project configuration, then suggest concrete fixes.

Your task:
1. Identify the root cause of the error
2. Suggest specific changes to docker image, install commands, or project configuration
3. For Go projects: Pay special attention to Go version requirements in go.mod files
4. For version conflicts: Suggest appropriate Docker images with correct tool versions
5. Always provide SPECIFIC alternative docker images and commands

Common issues and solutions:
- Go version conflicts: Use golang:1.21 or golang:1.22 images
- Python version issues: Use python:3.9-slim or python:3.11-slim
- Node.js version issues: Use node:18-alpine or node:20-alpine
- Missing system packages: Add apt-get install commands

Return your response as a JSON object with this exact schema:
{
  "analysis": "brief explanation of what went wrong and why",
  "root_cause": "specific root cause (e.g., 'go_version_mismatch', 'missing_dependency', 'wrong_docker_image')",
  "suggested_fixes": {
    "docker_image": "alternative docker image if needed (provide specific image:tag, not null)",
    "install_commands": ["updated install commands array with specific commands"],
    "working_dir": "updated working directory (or null to keep current)",
    "additional_setup": ["any additional setup commands if needed"],
    "pre_install_commands": ["commands to run before main install commands"]
  },
  "confidence": "high|medium|low",
  "retry_recommended": true
}`

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	errorContext := fmt.Sprintf(`ERROR DETAILS:
Error: %s

CURRENT CONFIGURATION:
Language: %s
Docker Image: %s
Install Commands: %s
Working Directory: %s
Project Type: %s

PROJECT FILES:
%s

PROJECT SPECIFIC DETAILS:
%s

ATTEMPT NUMBER: %d (max 3 attempts)

Please analyze this error and suggest fixes to make the environment setup succeed. 
Be very specific about Docker image versions and install commands.`,
		setupError.Error(),
		currentAnalysis.Language,
		currentAnalysis.DockerImage,
		strings.Join(currentAnalysis.InstallCommands, ", "),
		currentAnalysis.WorkingDir,
		currentAnalysis.ProjectType,
		s.getProjectFilesSummary(),
		s.getProjectSpecificDetails(currentAnalysis.Language),
		attempt)

	messages := []llm.Message{
		{Role: "system", Content: systemPrompt},
		{Role: "user", Content: errorContext},
	}

	log.Printf("üß† Requesting error analysis from LLM")

	response, err := s.LLMClient.Generate(ctx, messages)
	if err != nil {
		return nil, fmt.Errorf("failed to get error analysis: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
	var analysisResult struct {
		Analysis       string `json:"analysis"`
		RootCause      string `json:"root_cause"`
		SuggestedFixes struct {
			DockerImage        string   `json:"docker_image"`
			InstallCommands    []string `json:"install_commands"`
			WorkingDir         *string  `json:"working_dir"`
			AdditionalSetup    []string `json:"additional_setup"`
			PreInstallCommands []string `json:"pre_install_commands"`
		} `json:"suggested_fixes"`
		Confidence       string `json:"confidence"`
		RetryRecommended bool   `json:"retry_recommended"`
	}

	if err := json.Unmarshal([]byte(response.Content), &analysisResult); err != nil {
		log.Printf("‚ö†Ô∏è Failed to parse LLM error analysis response: %v", err)
		log.Printf("Raw response: %s", response.Content)
		return nil, fmt.Errorf("failed to parse error analysis response: %w", err)
	}

	log.Printf("üîß Error analysis: %s", analysisResult.Analysis)
	log.Printf("üéØ Root cause: %s (confidence: %s, retry: %v)", analysisResult.RootCause, analysisResult.Confidence, analysisResult.RetryRecommended)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ª–∏ –ø–æ–≤—Ç–æ—Ä
	if !analysisResult.RetryRecommended {
		log.Printf("‚ùå LLM does not recommend retry for this error type")
		return nil, fmt.Errorf("error analysis suggests this issue cannot be fixed automatically: %s", analysisResult.Analysis)
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	fixedAnalysis := &codevalidation.CodeAnalysisResult{
		Language:        currentAnalysis.Language,
		Framework:       currentAnalysis.Framework,
		Dependencies:    currentAnalysis.Dependencies,
		InstallCommands: make([]string, 0), // –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
		Commands:        currentAnalysis.Commands,
		DockerImage:     currentAnalysis.DockerImage,
		ProjectType:     currentAnalysis.ProjectType,
		WorkingDir:      currentAnalysis.WorkingDir,
		Reasoning:       currentAnalysis.Reasoning + fmt.Sprintf(" | Fix attempt %d [%s]: %s", attempt, analysisResult.RootCause, analysisResult.Analysis),
	}

	// –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–π Docker –æ–±—Ä–∞–∑
	if analysisResult.SuggestedFixes.DockerImage != "" {
		fixedAnalysis.DockerImage = analysisResult.SuggestedFixes.DockerImage
		log.Printf("üì¶ Updated Docker image: %s (was: %s)", fixedAnalysis.DockerImage, currentAnalysis.DockerImage)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º pre-install –∫–æ–º–∞–Ω–¥—ã —Å–Ω–∞—á–∞–ª–∞
	if len(analysisResult.SuggestedFixes.PreInstallCommands) > 0 {
		fixedAnalysis.InstallCommands = append(fixedAnalysis.InstallCommands, analysisResult.SuggestedFixes.PreInstallCommands...)
		log.Printf("üîß Added pre-install commands: %v", analysisResult.SuggestedFixes.PreInstallCommands)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
	if len(analysisResult.SuggestedFixes.InstallCommands) > 0 {
		fixedAnalysis.InstallCommands = append(fixedAnalysis.InstallCommands, analysisResult.SuggestedFixes.InstallCommands...)
		log.Printf("‚öôÔ∏è Updated install commands: %v", analysisResult.SuggestedFixes.InstallCommands)
	} else {
		// –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–µ
		fixedAnalysis.InstallCommands = append(fixedAnalysis.InstallCommands, currentAnalysis.InstallCommands...)
		log.Printf("‚ôªÔ∏è Keeping original install commands: %v", currentAnalysis.InstallCommands)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏
	if len(analysisResult.SuggestedFixes.AdditionalSetup) > 0 {
		fixedAnalysis.InstallCommands = append(fixedAnalysis.InstallCommands, analysisResult.SuggestedFixes.AdditionalSetup...)
		log.Printf("‚ûï Added additional setup commands: %v", analysisResult.SuggestedFixes.AdditionalSetup)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if analysisResult.SuggestedFixes.WorkingDir != nil {
		fixedAnalysis.WorkingDir = *analysisResult.SuggestedFixes.WorkingDir
		log.Printf("üìÅ Updated working directory: %s", fixedAnalysis.WorkingDir)
	}

	return fixedAnalysis, nil
}

// getProjectFilesSummary –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
func (s *VibeCodingSession) getProjectFilesSummary() string {
	var summary strings.Builder
	fileCount := 0
	maxFiles := 10 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

	for filename := range s.Files {
		if fileCount >= maxFiles {
			summary.WriteString("... and more files")
			break
		}
		summary.WriteString(fmt.Sprintf("- %s\n", filename))
		fileCount++
	}

	return summary.String()
}

// getProjectSpecificDetails –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–æ–∫
func (s *VibeCodingSession) getProjectSpecificDetails(language string) string {
	var details strings.Builder

	switch language {
	case "Go":
		// –ò—â–µ–º go.mod —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–µ—Ä—Å–∏–∏ Go
		if goMod, exists := s.Files["go.mod"]; exists {
			details.WriteString("go.mod content (first 500 chars):\n")
			if len(goMod) > 500 {
				details.WriteString(goMod[:500])
				details.WriteString("\n... (truncated)")
			} else {
				details.WriteString(goMod)
			}
			details.WriteString("\n\n")

			// –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é Go –∏–∑ go.mod
			if strings.Contains(goMod, "go 1.") {
				lines := strings.Split(goMod, "\n")
				for _, line := range lines {
					if strings.Contains(line, "go 1.") && !strings.HasPrefix(strings.TrimSpace(line), "//") {
						details.WriteString(fmt.Sprintf("DETECTED GO VERSION REQUIREMENT: %s\n", strings.TrimSpace(line)))
						break
					}
				}
			}
		} else {
			details.WriteString("No go.mod file found in project\n")
		}

	case "Python":
		// –ò—â–µ–º requirements.txt –∏–ª–∏ pyproject.toml
		if req, exists := s.Files["requirements.txt"]; exists {
			details.WriteString("requirements.txt content (first 300 chars):\n")
			if len(req) > 300 {
				details.WriteString(req[:300])
				details.WriteString("\n... (truncated)")
			} else {
				details.WriteString(req)
			}
			details.WriteString("\n\n")
		}

		if pyproject, exists := s.Files["pyproject.toml"]; exists {
			details.WriteString("pyproject.toml content (first 300 chars):\n")
			if len(pyproject) > 300 {
				details.WriteString(pyproject[:300])
				details.WriteString("\n... (truncated)")
			} else {
				details.WriteString(pyproject)
			}
			details.WriteString("\n\n")
		}

	case "JavaScript":
		// –ò—â–µ–º package.json
		if pkg, exists := s.Files["package.json"]; exists {
			details.WriteString("package.json content (first 500 chars):\n")
			if len(pkg) > 500 {
				details.WriteString(pkg[:500])
				details.WriteString("\n... (truncated)")
			} else {
				details.WriteString(pkg)
			}
			details.WriteString("\n\n")
		}
	}

	if details.Len() == 0 {
		details.WriteString(fmt.Sprintf("No specific configuration files found for %s project\n", language))
	}

	return details.String()
}
