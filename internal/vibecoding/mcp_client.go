package vibecoding

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"os/exec"

	"github.com/modelcontextprotocol/go-sdk/mcp"
)

// VibeCodingMCPClient –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VibeCoding MCP —Å–µ—Ä–≤–µ—Ä–æ–º
type VibeCodingMCPClient struct {
	client  *mcp.Client
	session *mcp.ClientSession
}

// NewVibeCodingMCPClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π VibeCoding MCP –∫–ª–∏–µ–Ω—Ç
func NewVibeCodingMCPClient() *VibeCodingMCPClient {
	return &VibeCodingMCPClient{}
}

// Connect –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ VibeCoding MCP —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ stdio
func (m *VibeCodingMCPClient) Connect(ctx context.Context, sessionManager *SessionManager) error {
	log.Printf("üîó Connecting to VibeCoding MCP server via stdio")

	// –°–æ–∑–¥–∞–µ–º MCP –∫–ª–∏–µ–Ω—Ç
	m.client = mcp.NewClient(&mcp.Implementation{
		Name:    "ai-chatter-bot-vibecoding",
		Version: "1.0.0",
	}, nil)

	// –ó–∞–ø—É—Å–∫–∞–µ–º VibeCoding MCP —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å
	serverPath := "./vibecoding-mcp-server"
	if customPath := os.Getenv("VIBECODING_MCP_SERVER_PATH"); customPath != "" {
		serverPath = customPath
	}

	cmd := exec.CommandContext(ctx, serverPath)
	cmd.Env = append(os.Environ())

	transport := mcp.NewCommandTransport(cmd)

	session, err := m.client.Connect(ctx, transport)
	if err != nil {
		return fmt.Errorf("failed to connect to VibeCoding MCP server: %w", err)
	}

	m.session = session
	log.Printf("‚úÖ Connected to VibeCoding MCP server")
	return nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å VibeCoding MCP —Å–µ—Ä–≤–µ—Ä–æ–º
func (m *VibeCodingMCPClient) Close() error {
	if m.session != nil {
		return m.session.Close()
	}
	return nil
}

// ListFiles –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ VibeCoding —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ MCP
func (m *VibeCodingMCPClient) ListFiles(ctx context.Context, userID int64) VibeCodingMCPResult {
	if m.session == nil {
		return VibeCodingMCPResult{Success: false, Message: "VibeCoding MCP session not connected"}
	}

	log.Printf("üìÅ Listing files via MCP for user: %d", userID)

	result, err := m.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "vibe_list_files",
		Arguments: map[string]any{
			"user_id": userID,
		},
	})

	if err != nil {
		log.Printf("‚ùå VibeCoding MCP list files error: %v", err)
		return VibeCodingMCPResult{Success: false, Message: fmt.Sprintf("MCP error: %v", err)}
	}

	if result.IsError {
		return VibeCodingMCPResult{Success: false, Message: "List files tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
	var totalFiles int
	if result.Meta != nil {
		if count, ok := result.Meta["total_files"].(float64); ok {
			totalFiles = int(count)
		}
	}

	return VibeCodingMCPResult{
		Success:    true,
		Message:    responseText,
		TotalFiles: totalFiles,
		Data:       formatResultMeta(result.Meta),
	}
}

// ReadFile —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª –≤ VibeCoding —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ MCP
func (m *VibeCodingMCPClient) ReadFile(ctx context.Context, userID int64, filename string) VibeCodingMCPResult {
	if m.session == nil {
		return VibeCodingMCPResult{Success: false, Message: "VibeCoding MCP session not connected"}
	}

	log.Printf("üìÑ Reading file via MCP: %s for user %d", filename, userID)

	result, err := m.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "vibe_read_file",
		Arguments: map[string]any{
			"user_id":  userID,
			"filename": filename,
		},
	})

	if err != nil {
		log.Printf("‚ùå VibeCoding MCP read file error: %v", err)
		return VibeCodingMCPResult{Success: false, Message: fmt.Sprintf("MCP error: %v", err)}
	}

	if result.IsError {
		return VibeCodingMCPResult{Success: false, Message: "Read file tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return VibeCodingMCPResult{
		Success: true,
		Message: responseText,
		Data:    formatResultMeta(result.Meta),
	}
}

// WriteFile –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ VibeCoding —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ MCP
func (m *VibeCodingMCPClient) WriteFile(ctx context.Context, userID int64, filename, content string, generated bool) VibeCodingMCPResult {
	if m.session == nil {
		return VibeCodingMCPResult{Success: false, Message: "VibeCoding MCP session not connected"}
	}

	log.Printf("‚úèÔ∏è Writing file via MCP: %s for user %d", filename, userID)

	result, err := m.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "vibe_write_file",
		Arguments: map[string]any{
			"user_id":   userID,
			"filename":  filename,
			"content":   content,
			"generated": generated,
		},
	})

	if err != nil {
		log.Printf("‚ùå VibeCoding MCP write file error: %v", err)
		return VibeCodingMCPResult{Success: false, Message: fmt.Sprintf("MCP error: %v", err)}
	}

	if result.IsError {
		return VibeCodingMCPResult{Success: false, Message: "Write file tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return VibeCodingMCPResult{
		Success: true,
		Message: responseText,
		Data:    formatResultMeta(result.Meta),
	}
}

// ExecuteCommand –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –≤ VibeCoding —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ MCP
func (m *VibeCodingMCPClient) ExecuteCommand(ctx context.Context, userID int64, command string) VibeCodingMCPResult {
	if m.session == nil {
		return VibeCodingMCPResult{Success: false, Message: "VibeCoding MCP session not connected"}
	}

	log.Printf("‚ö° Executing command via MCP: %s for user %d", command, userID)

	result, err := m.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "vibe_execute_command",
		Arguments: map[string]any{
			"user_id": userID,
			"command": command,
		},
	})

	if err != nil {
		log.Printf("‚ùå VibeCoding MCP execute command error: %v", err)
		return VibeCodingMCPResult{Success: false, Message: fmt.Sprintf("MCP error: %v", err)}
	}

	if result.IsError {
		return VibeCodingMCPResult{Success: false, Message: "Execute command tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return VibeCodingMCPResult{
		Success: true,
		Message: responseText,
		Data:    formatResultMeta(result.Meta),
	}
}

// RunTests –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –≤ VibeCoding —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ MCP
func (m *VibeCodingMCPClient) RunTests(ctx context.Context, userID int64, testFile string) VibeCodingMCPResult {
	if m.session == nil {
		return VibeCodingMCPResult{Success: false, Message: "VibeCoding MCP session not connected"}
	}

	log.Printf("üß™ Running tests via MCP for user %d", userID)

	result, err := m.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "vibe_run_tests",
		Arguments: map[string]any{
			"user_id":   userID,
			"test_file": testFile,
		},
	})

	if err != nil {
		log.Printf("‚ùå VibeCoding MCP run tests error: %v", err)
		return VibeCodingMCPResult{Success: false, Message: fmt.Sprintf("MCP error: %v", err)}
	}

	if result.IsError {
		return VibeCodingMCPResult{Success: false, Message: "Run tests tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return VibeCodingMCPResult{
		Success: true,
		Message: responseText,
		Data:    formatResultMeta(result.Meta),
	}
}

// ValidateCode –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ VibeCoding —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ MCP
func (m *VibeCodingMCPClient) ValidateCode(ctx context.Context, userID int64, filename string) VibeCodingMCPResult {
	if m.session == nil {
		return VibeCodingMCPResult{Success: false, Message: "VibeCoding MCP session not connected"}
	}

	log.Printf("üîç Validating code via MCP for user %d", userID)

	result, err := m.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "vibe_validate_code",
		Arguments: map[string]any{
			"user_id":  userID,
			"filename": filename,
		},
	})

	if err != nil {
		log.Printf("‚ùå VibeCoding MCP validate code error: %v", err)
		return VibeCodingMCPResult{Success: false, Message: fmt.Sprintf("MCP error: %v", err)}
	}

	if result.IsError {
		return VibeCodingMCPResult{Success: false, Message: "Validate code tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return VibeCodingMCPResult{
		Success: true,
		Message: responseText,
		Data:    formatResultMeta(result.Meta),
	}
}

// GetSessionInfo –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ VibeCoding —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ MCP
func (m *VibeCodingMCPClient) GetSessionInfo(ctx context.Context, userID int64) VibeCodingMCPResult {
	if m.session == nil {
		return VibeCodingMCPResult{Success: false, Message: "VibeCoding MCP session not connected"}
	}

	log.Printf("‚ÑπÔ∏è Getting session info via MCP for user %d", userID)

	result, err := m.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "vibe_get_session_info",
		Arguments: map[string]any{
			"user_id": userID,
		},
	})

	if err != nil {
		log.Printf("‚ùå VibeCoding MCP get session info error: %v", err)
		return VibeCodingMCPResult{Success: false, Message: fmt.Sprintf("MCP error: %v", err)}
	}

	if result.IsError {
		return VibeCodingMCPResult{Success: false, Message: "Get session info tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return VibeCodingMCPResult{
		Success: true,
		Message: responseText,
		Data:    formatResultMeta(result.Meta),
	}
}

// VibeCodingMCPResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç VibeCoding MCP –æ–ø–µ—Ä–∞—Ü–∏–∏
type VibeCodingMCPResult struct {
	Success    bool   `json:"success"`
	Message    string `json:"message"`
	Data       string `json:"data,omitempty"`
	TotalFiles int    `json:"total_files,omitempty"`
}

// formatResultMeta —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ JSON —Å—Ç—Ä–æ–∫—É
func formatResultMeta(meta any) string {
	if meta == nil {
		return ""
	}
	data, err := json.Marshal(meta)
	if err != nil {
		return ""
	}
	return string(data)
}
