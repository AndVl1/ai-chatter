package rustore

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/exec"

	"github.com/modelcontextprotocol/go-sdk/mcp"
)

// RuStoreMCPClient –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RuStore MCP —Å–µ—Ä–≤–µ—Ä–æ–º
type RuStoreMCPClient struct {
	client  *mcp.Client
	session *mcp.ClientSession
}

// NewRuStoreMCPClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π RuStore MCP –∫–ª–∏–µ–Ω—Ç
func NewRuStoreMCPClient() *RuStoreMCPClient {
	return &RuStoreMCPClient{}
}

// Connect –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ RuStore MCP —Å–µ—Ä–≤–µ—Ä—É —á–µ—Ä–µ–∑ stdio
func (r *RuStoreMCPClient) Connect(ctx context.Context) error {
	log.Printf("üîó Connecting to RuStore MCP server via stdio")

	// –°–æ–∑–¥–∞–µ–º MCP –∫–ª–∏–µ–Ω—Ç
	r.client = mcp.NewClient(&mcp.Implementation{
		Name:    "ai-chatter-bot-rustore",
		Version: "1.0.0",
	}, nil)

	// –ó–∞–ø—É—Å–∫–∞–µ–º RuStore MCP —Å–µ—Ä–≤–µ—Ä –∫–∞–∫ –ø–æ–¥–ø—Ä–æ—Ü–µ—Å—Å
	serverPath := "./bin/rustore-mcp-server"
	if customPath := os.Getenv("RUSTORE_MCP_SERVER_PATH"); customPath != "" {
		serverPath = customPath
	}

	log.Printf("üîç RuStore MCP: Trying to start server at path: %s", serverPath)

	// –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–±–æ—á–∏–π –∫–∞—Ç–∞–ª–æ–≥
	if pwd, err := os.Getwd(); err == nil {
		log.Printf("üîç RuStore MCP: Current working directory: %s", pwd)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
	if _, err := os.Stat(serverPath); os.IsNotExist(err) {
		log.Printf("‚ùå RuStore MCP: Server binary not found at %s", serverPath)
		// –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
		if _, err := os.Stat("./rustore-mcp-server"); err == nil {
			log.Printf("üí° RuStore MCP: Found server at ./rustore-mcp-server")
		} else if _, err := os.Stat("/app/rustore-mcp-server"); err == nil {
			log.Printf("üí° RuStore MCP: Found server at /app/rustore-mcp-server")
		}
		return fmt.Errorf("rustore MCP server binary not found at %s", serverPath)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
	if info, err := os.Stat(serverPath); err == nil {
		log.Printf("üîç RuStore MCP: Server file exists, mode: %v, size: %d bytes", info.Mode(), info.Size())
	}

	cmd := exec.CommandContext(ctx, serverPath)
	cmd.Env = os.Environ()

	transport := mcp.NewCommandTransport(cmd)

	session, err := r.client.Connect(ctx, transport)
	if err != nil {
		return fmt.Errorf("failed to connect to RuStore MCP server: %w", err)
	}

	r.session = session
	log.Printf("‚úÖ Connected to RuStore MCP server")
	return nil
}

// Close –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å RuStore MCP —Å–µ—Ä–≤–µ—Ä–æ–º
func (r *RuStoreMCPClient) Close() error {
	if r.session != nil {
		return r.session.Close()
	}
	return nil
}

// Authenticate –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –≤ RuStore API
func (r *RuStoreMCPClient) Authenticate(ctx context.Context, companyID, keyID, keySecret string) RuStoreMCPResult {
	if r.session == nil {
		return RuStoreMCPResult{Success: false, Message: "RuStore MCP session not connected"}
	}

	log.Printf("üîê Authenticating with RuStore via MCP: company=%s", companyID)

	// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç rustore_auth
	result, err := r.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "rustore_auth",
		Arguments: map[string]any{
			"company_id": companyID,
			"key_id":     keyID,
			"key_secret": keySecret,
		},
	})

	if err != nil {
		log.Printf("‚ùå RuStore MCP auth error: %v", err)
		return RuStoreMCPResult{Success: false, Message: fmt.Sprintf("RuStore MCP auth error: %v", err)}
	}

	if result.IsError {
		return RuStoreMCPResult{Success: false, Message: "RuStore authentication tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return RuStoreMCPResult{
		Success: true,
		Message: responseText,
	}
}

// CreateDraft —Å–æ–∑–¥–∞–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func (r *RuStoreMCPClient) CreateDraft(ctx context.Context, params CreateDraftParams) RuStoreDraftResult {
	if r.session == nil {
		return RuStoreDraftResult{RuStoreMCPResult: RuStoreMCPResult{Success: false, Message: "RuStore MCP session not connected"}}
	}

	log.Printf("üìù Creating RuStore draft via MCP: package=%s", params.PackageName)

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É API
	arguments := map[string]any{
		"package_name": params.PackageName,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ –ø–æ–ª—è
	if params.AppName != "" {
		arguments["app_name"] = params.AppName
	}
	if params.AppType != "" {
		arguments["app_type"] = params.AppType
	}
	if len(params.Categories) > 0 {
		arguments["categories"] = params.Categories
	}
	if params.AgeLegal != "" {
		arguments["age_legal"] = params.AgeLegal
	}
	if params.ShortDescription != "" {
		arguments["short_description"] = params.ShortDescription
	}
	if params.FullDescription != "" {
		arguments["full_description"] = params.FullDescription
	}
	if params.WhatsNew != "" {
		arguments["whats_new"] = params.WhatsNew
	}
	if params.ModerInfo != "" {
		arguments["moder_info"] = params.ModerInfo
	}
	if params.PriceValue > 0 {
		arguments["price_value"] = params.PriceValue
	}
	if len(params.SeoTagIds) > 0 {
		arguments["seo_tag_ids"] = params.SeoTagIds
	}
	if params.PublishType != "" {
		arguments["publish_type"] = params.PublishType
	}
	if params.PublishDateTime != "" {
		arguments["publish_date_time"] = params.PublishDateTime
	}
	if params.PartialValue > 0 {
		arguments["partial_value"] = params.PartialValue
	}

	// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç rustore_create_draft
	result, err := r.session.CallTool(ctx, &mcp.CallToolParams{
		Name:      "rustore_create_draft",
		Arguments: arguments,
	})

	if err != nil {
		log.Printf("‚ùå RuStore MCP create draft error: %v", err)
		return RuStoreDraftResult{RuStoreMCPResult: RuStoreMCPResult{Success: false, Message: fmt.Sprintf("RuStore MCP create draft error: %v", err)}}
	}

	if result.IsError {
		return RuStoreDraftResult{RuStoreMCPResult: RuStoreMCPResult{Success: false, Message: "RuStore create draft tool returned error"}}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–º—É API
	draftResult := RuStoreDraftResult{
		RuStoreMCPResult: RuStoreMCPResult{
			Success: true,
			Message: responseText,
		},
	}

	if result.Meta != nil {
		if packageName, ok := result.Meta["package_name"].(string); ok {
			draftResult.AppID = packageName // –ò—Å–ø–æ–ª—å–∑—É–µ–º package_name –∫–∞–∫ AppID –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
		}
		if versionID, ok := result.Meta["version_id"].(float64); ok {
			draftResult.VersionID = fmt.Sprintf("%.0f", versionID) // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É
		}
		if code, ok := result.Meta["code"].(string); ok {
			draftResult.Status = code
		}
		// –î–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
		draftResult.VersionName = "Draft"
		draftResult.VersionCode = 0
	}

	return draftResult
}

// UploadAAB –∑–∞–≥—Ä—É–∂–∞–µ—Ç AAB —Ñ–∞–π–ª –¥–ª—è –≤–µ—Ä—Å–∏–∏
func (r *RuStoreMCPClient) UploadAAB(ctx context.Context, appID, versionID, aabData, aabName string) RuStoreMCPResult {
	if r.session == nil {
		return RuStoreMCPResult{Success: false, Message: "RuStore MCP session not connected"}
	}

	log.Printf("‚¨ÜÔ∏è Uploading AAB to RuStore via MCP: app=%s, version=%s, file=%s", appID, versionID, aabName)

	// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç rustore_upload_aab
	result, err := r.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "rustore_upload_aab",
		Arguments: map[string]any{
			"app_id":     appID,
			"version_id": versionID,
			"aab_data":   aabData,
			"aab_name":   aabName,
		},
	})

	if err != nil {
		log.Printf("‚ùå RuStore MCP upload AAB error: %v", err)
		return RuStoreMCPResult{Success: false, Message: fmt.Sprintf("RuStore MCP upload AAB error: %v", err)}
	}

	if result.IsError {
		return RuStoreMCPResult{Success: false, Message: "RuStore upload AAB tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return RuStoreMCPResult{
		Success: true,
		Message: responseText,
	}
}

// UploadAPK –∑–∞–≥—Ä—É–∂–∞–µ—Ç APK —Ñ–∞–π–ª –¥–ª—è –≤–µ—Ä—Å–∏–∏
func (r *RuStoreMCPClient) UploadAPK(ctx context.Context, appID, versionID, apkData, apkName string) RuStoreMCPResult {
	if r.session == nil {
		return RuStoreMCPResult{Success: false, Message: "RuStore MCP session not connected"}
	}

	log.Printf("‚¨ÜÔ∏è Uploading APK to RuStore via MCP: app=%s, version=%s, file=%s", appID, versionID, apkName)

	// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç rustore_upload_apk
	result, err := r.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "rustore_upload_apk",
		Arguments: map[string]any{
			"app_id":     appID,
			"version_id": versionID,
			"apk_data":   apkData,
			"apk_name":   apkName,
		},
	})

	if err != nil {
		log.Printf("‚ùå RuStore MCP upload APK error: %v", err)
		return RuStoreMCPResult{Success: false, Message: fmt.Sprintf("RuStore MCP upload APK error: %v", err)}
	}

	if result.IsError {
		return RuStoreMCPResult{Success: false, Message: "RuStore upload APK tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return RuStoreMCPResult{
		Success: true,
		Message: responseText,
	}
}

// UploadAndroidFile –∑–∞–≥—Ä—É–∂–∞–µ—Ç Android —Ñ–∞–π–ª (AAB –∏–ª–∏ APK) –¥–ª—è –≤–µ—Ä—Å–∏–∏
func (r *RuStoreMCPClient) UploadAndroidFile(ctx context.Context, appID, versionID, fileData, fileName string) RuStoreMCPResult {
	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
	if len(fileName) > 4 && fileName[len(fileName)-4:] == ".aab" {
		return r.UploadAAB(ctx, appID, versionID, fileData, fileName)
	} else if len(fileName) > 4 && fileName[len(fileName)-4:] == ".apk" {
		return r.UploadAPK(ctx, appID, versionID, fileData, fileName)
	} else {
		return RuStoreMCPResult{Success: false, Message: fmt.Sprintf("Unsupported file type: %s. Only .aab and .apk files are supported", fileName)}
	}
}

// SubmitForReview –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
func (r *RuStoreMCPClient) SubmitForReview(ctx context.Context, appID, versionID string) RuStoreMCPResult {
	if r.session == nil {
		return RuStoreMCPResult{Success: false, Message: "RuStore MCP session not connected"}
	}

	log.Printf("üîç Submitting RuStore version for review via MCP: app=%s, version=%s", appID, versionID)

	// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç rustore_submit_review
	result, err := r.session.CallTool(ctx, &mcp.CallToolParams{
		Name: "rustore_submit_review",
		Arguments: map[string]any{
			"app_id":     appID,
			"version_id": versionID,
		},
	})

	if err != nil {
		log.Printf("‚ùå RuStore MCP submit error: %v", err)
		return RuStoreMCPResult{Success: false, Message: fmt.Sprintf("RuStore MCP submit error: %v", err)}
	}

	if result.IsError {
		return RuStoreMCPResult{Success: false, Message: "RuStore submit tool returned error"}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	return RuStoreMCPResult{
		Success: true,
		Message: responseText,
	}
}

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö

// RuStoreMCPResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç RuStore MCP –æ–ø–µ—Ä–∞—Ü–∏–∏
type RuStoreMCPResult struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
}

// RuStoreDraftResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞
type RuStoreDraftResult struct {
	RuStoreMCPResult
	AppID       string `json:"app_id"`
	VersionID   string `json:"version_id"`
	VersionName string `json:"version_name"`
	VersionCode int    `json:"version_code"`
	Status      string `json:"status"`
}

// CreateDraftParams –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–≥–ª–∞—Å–Ω–æ RuStore API v1)
type CreateDraftParams struct {
	PackageName      string   `json:"package_name"`                // –ò–º—è –ø–∞–∫–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
	AppName          string   `json:"app_name,omitempty"`          // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å 5 —Å–∏–º–≤–æ–ª–æ–≤!)
	AppType          string   `json:"app_type,omitempty"`          // –¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: GAMES –∏–ª–∏ MAIN
	Categories       []string `json:"categories,omitempty"`        // –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å 2)
	AgeLegal         string   `json:"age_legal,omitempty"`         // –í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: 0+, 6+, 12+, 16+, 18+
	ShortDescription string   `json:"short_description,omitempty"` // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å 80 —Å–∏–º–≤–æ–ª–æ–≤)
	FullDescription  string   `json:"full_description,omitempty"`  // –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å 4000 —Å–∏–º–≤–æ–ª–æ–≤)
	WhatsNew         string   `json:"whats_new,omitempty"`         // –ß—Ç–æ –Ω–æ–≤–æ–≥–æ (–º–∞–∫—Å 5000 —Å–∏–º–≤–æ–ª–æ–≤)
	ModerInfo        string   `json:"moder_info,omitempty"`        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (–º–∞–∫—Å 180 —Å–∏–º–≤–æ–ª–æ–≤)
	PriceValue       int      `json:"price_value,omitempty"`       // –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
	SeoTagIds        []int    `json:"seo_tag_ids,omitempty"`       // ID SEO —Ç–µ–≥–æ–≤ (–º–∞–∫—Å 5)
	PublishType      string   `json:"publish_type,omitempty"`      // –¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: MANUAL, INSTANTLY, DELAYED
	PublishDateTime  string   `json:"publish_date_time,omitempty"` // –î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è DELAYED
	PartialValue     int      `json:"partial_value,omitempty"`     // –ü—Ä–æ—Ü–µ–Ω—Ç —á–∞—Å—Ç–∏—á–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
}

// RuStoreCredentials —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ RuStore
type RuStoreCredentials struct {
	CompanyID string `json:"company_id"`
	KeyID     string `json:"key_id"`
	KeySecret string `json:"key_secret"`
}

// GetAppList –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∏–∑ RuStore –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
func (r *RuStoreMCPClient) GetAppList(ctx context.Context, params GetAppListParams) RuStoreAppListResult {
	if r.session == nil {
		return RuStoreAppListResult{RuStoreMCPResult: RuStoreMCPResult{Success: false, Message: "RuStore MCP session not connected"}}
	}

	log.Printf("üì± Getting RuStore app list via MCP")

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
	arguments := map[string]any{}

	if params.AppName != "" {
		arguments["app_name"] = params.AppName
	}
	if params.AppPackage != "" {
		arguments["app_package"] = params.AppPackage
	}
	if params.PageSize > 0 {
		arguments["page_size"] = params.PageSize
	}

	// –í—ã–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç rustore_get_apps
	result, err := r.session.CallTool(ctx, &mcp.CallToolParams{
		Name:      "rustore_get_apps",
		Arguments: arguments,
	})

	if err != nil {
		log.Printf("‚ùå RuStore MCP get apps error: %v", err)
		return RuStoreAppListResult{RuStoreMCPResult: RuStoreMCPResult{Success: false, Message: fmt.Sprintf("RuStore MCP get apps error: %v", err)}}
	}

	if result.IsError {
		return RuStoreAppListResult{RuStoreMCPResult: RuStoreMCPResult{Success: false, Message: "RuStore get apps tool returned error"}}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
	var responseText string
	for _, content := range result.Content {
		if textContent, ok := content.(*mcp.TextContent); ok {
			responseText += textContent.Text
		}
	}

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	appListResult := RuStoreAppListResult{
		RuStoreMCPResult: RuStoreMCPResult{
			Success: true,
			Message: responseText,
		},
	}

	if result.Meta != nil {
		if applications, ok := result.Meta["applications"].([]interface{}); ok {
			for _, app := range applications {
				if appMap, ok := app.(map[string]interface{}); ok {
					appInfo := RuStoreAppInfo{}

					if appId, ok := appMap["appId"].(string); ok {
						appInfo.AppID = appId
					}
					if packageName, ok := appMap["packageName"].(string); ok {
						appInfo.PackageName = packageName
					}
					if appName, ok := appMap["appName"].(string); ok {
						appInfo.Name = appName
					}
					if appStatus, ok := appMap["appStatus"].(string); ok {
						appInfo.Status = appStatus
					}
					if appType, ok := appMap["appType"].(string); ok {
						appInfo.AppType = appType
					}
					if categories, ok := appMap["categories"].([]interface{}); ok {
						for _, cat := range categories {
							if catStr, ok := cat.(string); ok {
								appInfo.Categories = append(appInfo.Categories, catStr)
							}
						}
					}
					if ageLegal, ok := appMap["ageLegal"].(string); ok {
						appInfo.AgeLegal = ageLegal
					}

					appListResult.Applications = append(appListResult.Applications, appInfo)
				}
			}
		}

		if appsCount, ok := result.Meta["apps_count"].(float64); ok {
			appListResult.Count = int(appsCount)
		}
		if totalApps, ok := result.Meta["total_apps"].(float64); ok {
			appListResult.TotalElements = int(totalApps)
		}
		if continuation, ok := result.Meta["continuation"].(string); ok {
			appListResult.ContinuationToken = continuation
		}
	}

	return appListResult
}

// GetAppListParams –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
type GetAppListParams struct {
	AppName    string `json:"app_name,omitempty"`    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	AppPackage string `json:"app_package,omitempty"` // –ü–æ–∏—Å–∫ –ø–æ package name
	PageSize   int    `json:"page_size,omitempty"`   // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-1000)
}

// RuStoreAppListResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
type RuStoreAppListResult struct {
	RuStoreMCPResult
	Applications      []RuStoreAppInfo `json:"applications"`
	Count             int              `json:"count"`
	TotalElements     int              `json:"total_elements"`
	ContinuationToken string           `json:"continuation_token,omitempty"`
}

// RuStoreAppInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ RuStore
type RuStoreAppInfo struct {
	AppID            string   `json:"app_id"`
	Name             string   `json:"name"`
	PackageName      string   `json:"package_name"`
	Status           string   `json:"status,omitempty"`
	AppType          string   `json:"app_type,omitempty"`
	Categories       []string `json:"categories,omitempty"`
	AgeLegal         string   `json:"age_legal,omitempty"`
	PrivacyPolicyURL string   `json:"privacy_policy_url,omitempty"`
}
