package release

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"strings"
	"time"

	"ai-chatter/internal/llm"
)

// AIFieldAnalysis —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ò–ò –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
type AIFieldAnalysis struct {
	Analysis       string            `json:"analysis"`
	RequiredFields []AIRequiredField `json:"required_fields"`
}

// AIRequiredField –ø–æ–ª–µ –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –º–Ω–µ–Ω–∏—é –ò–ò
type AIRequiredField struct {
	Field       string   `json:"field"`
	Reason      string   `json:"reason"`
	Priority    string   `json:"priority"` // "high", "medium", "low"
	Suggestions []string `json:"suggestions"`
}

// analyzeAndGenerateRequests –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
func (r *ReleaseAgent) analyzeAndGenerateRequests(ctx context.Context, session *ReleaseSession) ([]*DataCollectionRequest, error) {
	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	analysisContext := r.buildAnalysisContext(session)

	// –°–æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM –∞–Ω–∞–ª–∏–∑–∞
	systemPrompt := `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ RuStore. 
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–ª–∏–∑–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø–æ–ª—è –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–ö–†–ò–¢–ï–†–ò–ò –ê–ù–ê–õ–ò–ó–ê:
1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è (package_name, app_name, app_type, categories, age_legal) - –ø—ã—Ç–∞–π—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è (–æ–ø–∏—Å–∞–Ω–∏—è, changelog) - –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
3. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è - –∑–∞–ø—Ä–∞—à–∏–≤–∞–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å

–í–û–ó–ú–û–ñ–ù–´–ï –ü–û–õ–Ø RUSTORE API v1:
- package_name (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, —Ñ–æ—Ä–º–∞—Ç: com.company.app)
- app_name (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–∞–∫—Å 5 —Å–∏–º–≤–æ–ª–æ–≤)
- app_type (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: GAMES –∏–ª–∏ MAIN)  
- categories (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–∞–∫—Å 2)
- age_legal (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ: 0+, 6+, 12+, 16+, 18+)
- short_description (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞–∫—Å 80)
- full_description (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞–∫—Å 4000)
- whats_new (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞–∫—Å 5000) 
- moder_info (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞–∫—Å 180)
- price_value (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∫–æ–ø–µ–π–∫–∏)
- publish_type (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: MANUAL, INSTANTLY, DELAYED)

–û–¢–í–ï–ß–ê–ô –í JSON –§–û–†–ú–ê–¢–ï:
{
  "analysis": "–∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏",
  "required_fields": [
    {
      "field": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–ª—è",
      "reason": "–ø–æ—á–µ–º—É –Ω—É–∂–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å",
      "priority": "high/medium/low",
      "suggestions": ["–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ1", "–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ2"]
    }
  ]
}`

	userPrompt := fmt.Sprintf("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è:\n\n%s", analysisContext)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
	messages := []llm.Message{
		{Role: "system", Content: systemPrompt},
		{Role: "user", Content: userPrompt},
	}

	response, err := r.llmClient.Generate(ctx, messages)
	if err != nil {
		return nil, fmt.Errorf("LLM analysis failed: %w", err)
	}

	log.Printf("ü§ñ LLM Analysis Response: %s", response.Content)

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç LLM
	analysisResult, err := r.parseLLMAnalysis(response.Content)
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to parse LLM analysis: %v", err)
		log.Printf("üîç Raw LLM response: %s", response.Content)
		return nil, fmt.Errorf("failed to parse LLM analysis: %w", err)
	}

	log.Printf("üìä AI Analysis: %s", analysisResult.Analysis)
	log.Printf("üìù AI found %d fields to request", len(analysisResult.RequiredFields))

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–ø—Ä–æ—Å—ã
	return r.convertAnalysisToRequests(session, analysisResult)
}

// buildAnalysisContext —Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ò–ò
func (r *ReleaseAgent) buildAnalysisContext(session *ReleaseSession) string {
	var context strings.Builder

	context.WriteString("=== –°–û–ë–†–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï ===\n\n")

	// GitHub –¥–∞–Ω–Ω—ã–µ
	if session.ReleaseData != nil && session.ReleaseData.GitHubData != nil {
		github := session.ReleaseData.GitHubData
		context.WriteString(fmt.Sprintf("GitHub Repository: %s\n", github.RepoName))
		context.WriteString(fmt.Sprintf("Description: %s\n", github.Description))
		context.WriteString(fmt.Sprintf("Primary Language: %s\n", github.PrimaryLanguage))
		context.WriteString(fmt.Sprintf("Topics: %s\n", strings.Join(github.Topics, ", ")))
		if github.ReadmeContent != "" {
			context.WriteString(fmt.Sprintf("README (fragment): %s\n", truncateString(github.ReadmeContent, 300)))
		}
		context.WriteString("\n")
	}

	// –†–µ–ª–∏–∑ –¥–∞–Ω–Ω—ã–µ
	if session.ReleaseData != nil && session.ReleaseData.GitHubRelease != nil {
		release := session.ReleaseData.GitHubRelease
		context.WriteString(fmt.Sprintf("Release Tag: %s\n", release.TagName))
		context.WriteString(fmt.Sprintf("Release Name: %s\n", release.Name))
		if release.Body != "" {
			context.WriteString(fmt.Sprintf("Release Notes: %s\n", truncateString(release.Body, 200)))
		}
		context.WriteString("\n")
	}

	// –£–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	if len(session.CollectedResponses) > 0 {
		context.WriteString("–£–ñ–ï –ó–ê–ü–û–õ–ù–ï–ù–ù–´–ï –ü–û–õ–Ø:\n")
		for field, value := range session.CollectedResponses {
			context.WriteString(fmt.Sprintf("- %s: %s\n", field, value))
		}
		context.WriteString("\n")
	}

	// AI –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º
	if session.ReleaseData != nil && len(session.ReleaseData.RuStoreData.SuggestedWhatsNew) > 0 {
		context.WriteString("AI GENERATED CHANGELOG:\n")
		for _, suggestion := range session.ReleaseData.RuStoreData.SuggestedWhatsNew {
			context.WriteString(fmt.Sprintf("- %s\n", suggestion))
		}
		context.WriteString("\n")
	}

	// –ö–æ–º–º–∏—Ç—ã
	if session.ReleaseData != nil && len(session.ReleaseData.CommitsSinceLastRelease) > 0 {
		context.WriteString("RECENT COMMITS:\n")
		for i, commit := range session.ReleaseData.CommitsSinceLastRelease {
			if i >= 3 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–æ–º–º–∏—Ç–∞
				break
			}
			context.WriteString(fmt.Sprintf("- %s: %s\n", commit.ShortSHA(), commit.Message))
		}
		context.WriteString("\n")
	}

	context.WriteString("=== –ó–ê–î–ê–ß–ê ===\n")
	context.WriteString("–û–ø—Ä–µ–¥–µ–ª–∏ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –ø–æ–ª–µ–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ RuStore.\n")
	context.WriteString("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è > –∫–∞—á–µ—Å—Ç–≤–æ > –ø–æ–ª–Ω–æ—Ç–∞.")

	return context.String()
}

// parseLLMAnalysis –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç LLM –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
func (r *ReleaseAgent) parseLLMAnalysis(content string) (*AIFieldAnalysis, error) {
	// –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ë—Ä–Ω—É—Ç –≤ markdown –±–ª–æ–∫)
	jsonStart := strings.Index(content, "{")
	jsonEnd := strings.LastIndex(content, "}")

	if jsonStart == -1 || jsonEnd == -1 || jsonEnd <= jsonStart {
		return nil, fmt.Errorf("no JSON found in LLM response")
	}

	jsonContent := content[jsonStart : jsonEnd+1]

	var analysis AIFieldAnalysis
	if err := json.Unmarshal([]byte(jsonContent), &analysis); err != nil {
		return nil, fmt.Errorf("failed to parse JSON: %w", err)
	}

	return &analysis, nil
}

// convertAnalysisToRequests –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç AI –∞–Ω–∞–ª–∏–∑–∞ –≤ –∑–∞–ø—Ä–æ—Å—ã
func (r *ReleaseAgent) convertAnalysisToRequests(session *ReleaseSession, analysis *AIFieldAnalysis) ([]*DataCollectionRequest, error) {
	requests := []*DataCollectionRequest{}

	for _, aiField := range analysis.RequiredFields {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
		if _, exists := session.CollectedResponses[aiField.Field]; exists {
			log.Printf("‚è≠Ô∏è Skipping already filled field: %s", aiField.Field)
			continue
		}

		request := &DataCollectionRequest{
			Field:       aiField.Field,
			DisplayName: r.getFieldDisplayName(aiField.Field),
			Description: r.getFieldDescription(aiField.Field) + " (" + aiField.Reason + ")",
			Required:    aiField.Priority == "high",
			Suggestions: aiField.Suggestions,
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∏–ø –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
		r.setFieldValidation(request, aiField.Field)

		// –î–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã AI
		if len(request.Suggestions) == 0 {
			request.Suggestions = r.generateFieldSuggestions(session, aiField.Field)
		}

		requests = append(requests, request)
		log.Printf("üìù Added AI-determined field request: %s (priority: %s)", aiField.Field, aiField.Priority)
	}

	return requests, nil
}

// generateFallbackRequests —Å–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è AI –∞–Ω–∞–ª–∏–∑–∞
func (r *ReleaseAgent) generateFallbackRequests(session *ReleaseSession) []*DataCollectionRequest {
	requests := []*DataCollectionRequest{}

	// –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è RuStore API v1
	criticalFields := []string{"package_name", "app_name", "app_type", "categories", "age_legal"}

	for _, field := range criticalFields {
		if _, exists := session.CollectedResponses[field]; !exists {
			request := &DataCollectionRequest{
				Field:       field,
				DisplayName: r.getFieldDisplayName(field),
				Description: r.getFieldDescription(field),
				Required:    true,
				Suggestions: r.generateFieldSuggestions(session, field),
			}
			r.setFieldValidation(request, field)
			requests = append(requests, request)
		}
	}

	// –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–æ–ª—è
	userFields := []string{"whats_new"}
	for _, field := range userFields {
		request := &DataCollectionRequest{
			Field:       field,
			DisplayName: r.getFieldDisplayName(field),
			Description: r.getFieldDescription(field),
			Required:    false,
			Suggestions: r.generateFieldSuggestions(session, field),
		}
		r.setFieldValidation(request, field)
		requests = append(requests, request)
	}

	log.Printf("üîÑ Generated %d fallback requests", len(requests))
	return requests
}

// getFieldDisplayName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
func (r *ReleaseAgent) getFieldDisplayName(field string) string {
	displayNames := map[string]string{
		"package_name":      "Package Name",
		"app_name":          "–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
		"app_type":          "–¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
		"categories":        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏",
		"age_legal":         "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
		"short_description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
		"full_description":  "–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
		"whats_new":         "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ",
		"moder_info":        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞",
		"price_value":       "–¶–µ–Ω–∞",
		"publish_type":      "–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
	}

	if name, exists := displayNames[field]; exists {
		return name
	}
	return field
}

// getFieldDescription –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª—è
func (r *ReleaseAgent) getFieldDescription(field string) string {
	descriptions := map[string]string{
		"package_name":      "–ò–º—è –ø–∞–∫–µ—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: com.company.app)",
		"app_name":          "–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å 5 —Å–∏–º–≤–æ–ª–æ–≤)",
		"app_type":          "–¢–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: GAMES –∏–ª–∏ MAIN",
		"categories":        "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å 2, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
		"age_legal":         "–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: 0+, 6+, 12+, 16+, 18+",
		"short_description": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å 80 —Å–∏–º–≤–æ–ª–æ–≤)",
		"full_description":  "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å 4000 —Å–∏–º–≤–æ–ª–æ–≤)",
		"whats_new":         "–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ (–º–∞–∫—Å 5000 —Å–∏–º–≤–æ–ª–æ–≤)",
		"moder_info":        "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (–º–∞–∫—Å 180 —Å–∏–º–≤–æ–ª–æ–≤)",
		"price_value":       "–¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (0 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)",
		"publish_type":      "–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: MANUAL, INSTANTLY, DELAYED",
	}

	if desc, exists := descriptions[field]; exists {
		return desc
	}
	return field
}

// setFieldValidation —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—è
func (r *ReleaseAgent) setFieldValidation(request *DataCollectionRequest, field string) {
	switch field {
	case "package_name":
		request.ValidationType = "text"
		request.Pattern = `^[a-z][a-z0-9_]*(\.[a-z][a-z0-9_]*)*$`
	case "app_name":
		request.ValidationType = "text"
		request.MaxLength = 5
	case "app_type":
		request.ValidationType = "enum"
		request.ValidValues = []string{"GAMES", "MAIN"}
	case "categories":
		request.ValidationType = "categories"
		request.MaxCategories = 2
	case "age_legal":
		request.ValidationType = "enum"
		request.ValidValues = []string{"0+", "6+", "12+", "16+", "18+"}
	case "short_description":
		request.ValidationType = "text"
		request.MaxLength = 80
	case "full_description":
		request.ValidationType = "text"
		request.MaxLength = 4000
	case "whats_new":
		request.ValidationType = "text"
		request.MaxLength = 5000
	case "moder_info":
		request.ValidationType = "text"
		request.MaxLength = 180
	case "price_value":
		request.ValidationType = "numeric"
		request.Pattern = `^\d+$`
	case "publish_type":
		request.ValidationType = "enum"
		request.ValidValues = []string{"MANUAL", "INSTANTLY", "DELAYED"}
	default:
		request.ValidationType = "text"
	}
}

// validateCompleteness –∏—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Ç—ã —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func (r *ReleaseAgent) validateCompleteness(ctx context.Context, session *ReleaseSession) (*ValidationResult, error) {
	log.Printf("üîç LLM validating data completeness for RuStore publication...")

	// –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –≤—Å–µ–º–∏ —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	validationContext := r.buildValidationContext(session)

	systemPrompt := `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ RuStore API v1.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –≥–æ—Ç–æ–≤—ã –ª–∏ –æ–Ω–∏ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ RuStore.

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –ü–û–õ–Ø RuStore API v1:
- package_name (—Ñ–æ—Ä–º–∞—Ç: com.company.app) 
- app_name (–º–∞–∫—Å 5 —Å–∏–º–≤–æ–ª–æ–≤)
- app_type (GAMES –∏–ª–∏ MAIN)
- categories (–º–∞–∫—Å 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
- age_legal (0+, 6+, 12+, 16+, 18+)

–ö–†–ò–¢–ï–†–ò–ò –ì–û–¢–û–í–ù–û–°–¢–ò:
1. –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
2. –î–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º API
3. –ö–∞—á–µ—Å—Ç–≤–æ –æ–ø–∏—Å–∞–Ω–∏–π –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
4. –ù–µ—Ç –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–π –≤ –¥–∞–Ω–Ω—ã—Ö

–û–¢–í–ï–ß–ê–ô –í JSON –§–û–†–ú–ê–¢–ï:
{
  "ready_for_publication": true/false,
  "analysis": "–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏",
  "missing_critical": ["—Å–ø–∏—Å–æ–∫_–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏_–≤–∞–∂–Ω—ã—Ö_–ø–æ–ª–µ–π"],
  "quality_issues": ["–ø—Ä–æ–±–ª–µ–º—ã_–∫–∞—á–µ—Å—Ç–≤–∞_–¥–∞–Ω–Ω—ã—Ö"],
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏_–ø–æ_—É–ª—É—á—à–µ–Ω–∏—é"]
}`

	userPrompt := fmt.Sprintf("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ RuStore:\n\n%s", validationContext)

	messages := []llm.Message{
		{Role: "system", Content: systemPrompt},
		{Role: "user", Content: userPrompt},
	}

	response, err := r.llmClient.Generate(ctx, messages)
	if err != nil {
		return nil, fmt.Errorf("LLM validation failed: %w", err)
	}

	log.Printf("ü§ñ LLM Validation Response: %s", response.Content)

	// –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	validation, err := r.parseValidationResult(response.Content)
	if err != nil {
		return nil, fmt.Errorf("failed to parse validation result: %w", err)
	}

	return validation, nil
}

// buildValidationContext —Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ LLM
func (r *ReleaseAgent) buildValidationContext(session *ReleaseSession) string {
	var context strings.Builder

	context.WriteString("=== –°–û–ë–†–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ===\n\n")

	// –í—Å–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	context.WriteString("–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –î–ê–ù–ù–´–ï:\n")
	for field, value := range session.CollectedResponses {
		context.WriteString(fmt.Sprintf("- %s: %s\n", field, value))
	}
	context.WriteString("\n")

	// GitHub –∫–æ–Ω—Ç–µ–∫—Å—Ç
	if session.ReleaseData != nil && session.ReleaseData.GitHubData != nil {
		github := session.ReleaseData.GitHubData
		context.WriteString("GITHUB –ö–û–ù–¢–ï–ö–°–¢:\n")
		context.WriteString(fmt.Sprintf("- Repository: %s\n", github.RepoName))
		context.WriteString(fmt.Sprintf("- Description: %s\n", github.Description))
		context.WriteString(fmt.Sprintf("- Language: %s\n", github.PrimaryLanguage))
		context.WriteString("\n")
	}

	// –†–µ–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
	if session.ReleaseData != nil && session.ReleaseData.GitHubRelease != nil {
		release := session.ReleaseData.GitHubRelease
		context.WriteString("–†–ï–õ–ò–ó –ò–ù–§–û–†–ú–ê–¶–ò–Ø:\n")
		context.WriteString(fmt.Sprintf("- Tag: %s\n", release.TagName))
		context.WriteString(fmt.Sprintf("- Asset Type: %s\n", session.ReleaseData.AssetType))
		context.WriteString("\n")
	}

	context.WriteString("–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ RuStore")

	return context.String()
}

// parseValidationResult –ø–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç LLM –≤–∞–ª–∏–¥–∞—Ü–∏–∏
func (r *ReleaseAgent) parseValidationResult(content string) (*ValidationResult, error) {
	// –ò—â–µ–º JSON –≤ –æ—Ç–≤–µ—Ç–µ
	jsonStart := strings.Index(content, "{")
	jsonEnd := strings.LastIndex(content, "}")

	if jsonStart == -1 || jsonEnd == -1 {
		return nil, fmt.Errorf("no JSON found in validation response")
	}

	jsonContent := content[jsonStart : jsonEnd+1]

	var result struct {
		ReadyForPublication bool     `json:"ready_for_publication"`
		Analysis            string   `json:"analysis"`
		MissingCritical     []string `json:"missing_critical"`
		QualityIssues       []string `json:"quality_issues"`
		Recommendations     []string `json:"recommendations"`
	}

	if err := json.Unmarshal([]byte(jsonContent), &result); err != nil {
		return nil, fmt.Errorf("failed to parse validation JSON: %w", err)
	}

	return &ValidationResult{
		Valid:        result.ReadyForPublication,
		ErrorMessage: result.Analysis,
		Suggestions:  result.Recommendations,
	}, nil
}

// autoPublishToRuStore –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ RuStore
func (r *ReleaseAgent) autoPublishToRuStore(ctx context.Context, session *ReleaseSession) error {
	log.Printf("üöÄ Starting automatic RuStore publication for session %s", session.ID)

	// –°—Ç—Ä–æ–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–ª–∏–∑–∞
	releaseData, err := r.BuildFinalReleaseData(session.ID)
	if err != nil {
		return fmt.Errorf("failed to build final release data: %w", err)
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Å—Å–∏–∏
	session.Status = "publishing"
	session.UpdatedAt = time.Now()

	// –°–∏–º—É–ª—è—Ü–∏—è RuStore –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–≤—Ä–µ–º–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è AI Release –∞–≥–µ–Ω—Ç–∞)
	log.Printf("üß™ SIMULATION: Creating RuStore draft for package: %s", releaseData.RuStoreData.PackageName)
	log.Printf("üìù Draft data:")
	log.Printf("   - App Name: %s", releaseData.RuStoreData.AppName)
	log.Printf("   - App Type: %s", releaseData.RuStoreData.AppType)
	log.Printf("   - Categories: %v", releaseData.RuStoreData.Categories)
	log.Printf("   - Age Legal: %s", releaseData.RuStoreData.AgeLegal)
	log.Printf("   - Short Description: %s", releaseData.RuStoreData.ShortDescription)
	log.Printf("   - Full Description: %s", releaseData.RuStoreData.FullDescription)
	log.Printf("   - What's New: %s", releaseData.RuStoreData.WhatsNew)
	log.Printf("   - Moder Info: %s", releaseData.RuStoreData.ModerInfo)
	log.Printf("   - Price Value: %d", releaseData.RuStoreData.PriceValue)
	log.Printf("   - Publish Type: %s", releaseData.RuStoreData.PublishType)

	log.Printf("‚úÖ SIMULATION: Draft created successfully with ID: draft-123456")
	log.Printf("‚ö†Ô∏è SIMULATION: File upload skipped - would upload %s: %s", releaseData.AssetType, releaseData.AndroidAsset.Name)
	log.Printf("‚úÖ SIMULATION: Successfully submitted to RuStore moderation")

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π
	session.Status = "completed"
	session.UpdatedAt = time.Now()

	return nil
}

// processCompletedSession –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
func (r *ReleaseAgent) processCompletedSession(ctx context.Context, session *ReleaseSession) error {
	log.Printf("üîÑ Processing completed data collection for session %s", session.ID)

	// –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ (–±–µ–∑ LLM –≤–∞–ª–∏–¥–∞—Ü–∏–∏)
	if !r.IsReadyForPublishing(session.ID) {
		return fmt.Errorf("data not ready for publishing")
	}

	log.Printf("‚úÖ Basic validation passed: ready for publication")

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ RuStore
	if err := r.autoPublishToRuStore(ctx, session); err != nil {
		log.Printf("‚ùå Auto-publication failed: %v", err)
		return r.handlePublicationError(ctx, session, err)
	}

	log.Printf("üéâ Session %s completed successfully - published to RuStore!", session.ID)
	return nil
}

// handlePublicationError –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç recovery –ø—Ä–æ—Ü–µ—Å—Å
func (r *ReleaseAgent) handlePublicationError(ctx context.Context, session *ReleaseSession, publishError error) error {
	log.Printf("üîß Handling publication error for session %s: %v", session.ID, publishError)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
	session.Status = "retry_needed"
	session.LastError = publishError.Error()
	session.RetryCount++
	session.UpdatedAt = time.Now()

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–∏ retry
	if session.PreviousResponses == nil {
		session.PreviousResponses = make(map[string]string)
	}
	for k, v := range session.CollectedResponses {
		session.PreviousResponses[k] = v
	}

	// –ü—Ä–æ—Å—Ç–∞—è retry –ª–æ–≥–∏–∫–∞ –±–µ–∑ LLM –∞–Ω–∞–ª–∏–∑–∞
	retryRequests := r.generateFallbackRetryRequests(session, publishError)

	if len(retryRequests) == 0 {
		log.Printf("üîÑ No additional fields needed, retrying publication with same data...")
		// –ü—ã—Ç–∞–µ–º—Å—è –µ—â–µ —Ä–∞–∑ —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞)
		session.Status = "publishing"
		return r.autoPublishToRuStore(ctx, session)
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	session.PendingRequests = retryRequests
	session.Status = "waiting_user"

	log.Printf("üîÑ Generated %d retry requests for session %s", len(retryRequests), session.ID)
	return fmt.Errorf("publication failed, requesting additional fields: %s", publishError.Error())
}

// analyzeErrorAndGenerateRetryRequests –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
func (r *ReleaseAgent) analyzeErrorAndGenerateRetryRequests(ctx context.Context, session *ReleaseSession, publishError error) ([]*DataCollectionRequest, error) {
	log.Printf("ü§ñ Analyzing publication error with LLM...")

	errorContext := r.buildErrorAnalysisContext(session, publishError)

	systemPrompt := `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ Android –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ RuStore API v1.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å.

–í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´ –û–®–ò–ë–û–ö:
1. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö (package_name, app_name)
2. –ù–∞—Ä—É—à–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–¥–ª–∏–Ω–∞ –ø–æ–ª–µ–π, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π)
3. –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
4. –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è enum –ø–æ–ª–µ–π
5. –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–∏—Å–∞–Ω–∏—è–º–∏ (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ/–¥–ª–∏–Ω–Ω—ã–µ)

–ü–û–õ–Ø RuStore API v1:
- package_name (—Ñ–æ—Ä–º–∞—Ç: com.company.app)
- app_name (–º–∞–∫—Å 5 —Å–∏–º–≤–æ–ª–æ–≤)
- app_type (GAMES –∏–ª–∏ MAIN)  
- categories (–º–∞–∫—Å 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)
- age_legal (0+, 6+, 12+, 16+, 18+)
- short_description (–º–∞–∫—Å 80 —Å–∏–º–≤–æ–ª–æ–≤)
- full_description (–º–∞–∫—Å 4000 —Å–∏–º–≤–æ–ª–æ–≤)
- whats_new (–º–∞–∫—Å 5000 —Å–∏–º–≤–æ–ª–æ–≤)
- moder_info (–º–∞–∫—Å 180 —Å–∏–º–≤–æ–ª–æ–≤)

–û–¢–í–ï–ß–ê–ô –í JSON –§–û–†–ú–ê–¢–ï:
{
  "error_analysis": "–∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏",
  "retry_strategy": "—Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è",
  "required_fields": [
    {
      "field": "–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–æ–ª—è",
      "reason": "–ø–æ—á–µ–º—É –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ –ø–æ–ª–µ",
      "current_issue": "–ø—Ä–æ–±–ª–µ–º–∞ —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º", 
      "suggestions": ["–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ_–≤–∞—Ä–∏–∞–Ω—Ç—ã"]
    }
  ]
}`

	userPrompt := fmt.Sprintf("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—à–∏–±–∫—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–ª—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n%s", errorContext)

	messages := []llm.Message{
		{Role: "system", Content: systemPrompt},
		{Role: "user", Content: userPrompt},
	}

	response, err := r.llmClient.Generate(ctx, messages)
	if err != nil {
		return nil, fmt.Errorf("LLM error analysis failed: %w", err)
	}

	log.Printf("ü§ñ LLM Error Analysis: %s", response.Content)

	// –ü–∞—Ä—Å–∏–º –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
	errorAnalysis, err := r.parseErrorAnalysis(response.Content)
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to parse error analysis, using fallback: %v", err)
		return r.generateFallbackRetryRequests(session, publishError), nil
	}

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∞–Ω–∞–ª–∏–∑ –≤ –∑–∞–ø—Ä–æ—Å—ã
	return r.convertErrorAnalysisToRequests(session, errorAnalysis), nil
}

// buildErrorAnalysisContext —Å—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏
func (r *ReleaseAgent) buildErrorAnalysisContext(session *ReleaseSession, publishError error) string {
	var context strings.Builder

	context.WriteString("=== –û–®–ò–ë–ö–ê –ü–£–ë–õ–ò–ö–ê–¶–ò–ò ===\n\n")
	context.WriteString(fmt.Sprintf("Error: %s\n", publishError.Error()))
	context.WriteString(fmt.Sprintf("Failed at step: %s\n", session.FailedAtStep))
	context.WriteString(fmt.Sprintf("Retry attempt: %d\n\n", session.RetryCount))

	context.WriteString("–¢–ï–ö–£–©–ò–ï –î–ê–ù–ù–´–ï:\n")
	for field, value := range session.CollectedResponses {
		context.WriteString(fmt.Sprintf("- %s: '%s'\n", field, value))
	}
	context.WriteString("\n")

	// GitHub –∫–æ–Ω—Ç–µ–∫—Å—Ç
	if session.ReleaseData != nil && session.ReleaseData.GitHubData != nil {
		github := session.ReleaseData.GitHubData
		context.WriteString("–ö–û–ù–¢–ï–ö–°–¢ –ü–†–û–ï–ö–¢–ê:\n")
		context.WriteString(fmt.Sprintf("- Repository: %s\n", github.RepoName))
		context.WriteString(fmt.Sprintf("- Description: %s\n", github.Description))
		context.WriteString(fmt.Sprintf("- Language: %s\n", github.PrimaryLanguage))
		context.WriteString("\n")
	}

	context.WriteString("–ó–ê–î–ê–ß–ê: –û–ø—Ä–µ–¥–µ–ª–∏, –∫–∞–∫–∏–µ –ø–æ–ª—è –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

	return context.String()
}

// parseErrorAnalysis –ø–∞—Ä—Å–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏ –æ—Ç LLM
func (r *ReleaseAgent) parseErrorAnalysis(content string) (*ErrorAnalysisResult, error) {
	jsonStart := strings.Index(content, "{")
	jsonEnd := strings.LastIndex(content, "}")

	if jsonStart == -1 || jsonEnd == -1 {
		return nil, fmt.Errorf("no JSON found in error analysis")
	}

	jsonContent := content[jsonStart : jsonEnd+1]

	var result ErrorAnalysisResult
	if err := json.Unmarshal([]byte(jsonContent), &result); err != nil {
		return nil, fmt.Errorf("failed to parse error analysis JSON: %w", err)
	}

	return &result, nil
}

// convertErrorAnalysisToRequests –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –≤ –∑–∞–ø—Ä–æ—Å—ã
func (r *ReleaseAgent) convertErrorAnalysisToRequests(session *ReleaseSession, analysis *ErrorAnalysisResult) []*DataCollectionRequest {
	requests := []*DataCollectionRequest{}

	for _, errorField := range analysis.RequiredFields {
		request := &DataCollectionRequest{
			Field:       errorField.Field,
			DisplayName: r.getFieldDisplayName(errorField.Field),
			Description: fmt.Sprintf("%s. %s", r.getFieldDescription(errorField.Field), errorField.Reason),
			Required:    true,
			Suggestions: errorField.Suggestions,
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ —Å —Ç–µ–∫—É—â–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
		if currentValue, exists := session.CollectedResponses[errorField.Field]; exists {
			request.Description += fmt.Sprintf(" (–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ '%s': %s)", currentValue, errorField.CurrentIssue)
		}

		r.setFieldValidation(request, errorField.Field)
		requests = append(requests, request)

		log.Printf("üìù Added error recovery field: %s (reason: %s)", errorField.Field, errorField.Reason)
	}

	return requests
}

// generateFallbackRetryRequests —Å–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–µ retry –∑–∞–ø—Ä–æ—Å—ã –ø—Ä–∏ —Å–±–æ–µ –∞–Ω–∞–ª–∏–∑–∞ LLM
func (r *ReleaseAgent) generateFallbackRetryRequests(session *ReleaseSession, publishError error) []*DataCollectionRequest {
	requests := []*DataCollectionRequest{}

	errorMsg := strings.ToLower(publishError.Error())

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø—Ä–æ—Å—Ç—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏
	if strings.Contains(errorMsg, "package") || strings.Contains(errorMsg, "packagename") {
		requests = append(requests, &DataCollectionRequest{
			Field:          "package_name",
			DisplayName:    "Package Name (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)",
			Description:    "–ò—Å–ø—Ä–∞–≤—å—Ç–µ package name (—Ñ–æ—Ä–º–∞—Ç: com.company.app). –û—à–∏–±–∫–∞: " + publishError.Error(),
			Required:       true,
			ValidationType: "text",
			Pattern:        `^[a-z][a-z0-9_]*(\.[a-z][a-z0-9_]*)*$`,
			Suggestions:    []string{"com.example.app", "com.mycompany.game"},
		})
	}

	if strings.Contains(errorMsg, "appname") || strings.Contains(errorMsg, "name") {
		requests = append(requests, &DataCollectionRequest{
			Field:          "app_name",
			DisplayName:    "App Name (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)",
			Description:    "–ò—Å–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–º–∞–∫—Å 5 —Å–∏–º–≤–æ–ª–æ–≤). –û—à–∏–±–∫–∞: " + publishError.Error(),
			Required:       true,
			ValidationType: "text",
			MaxLength:      5,
			Suggestions:    []string{"Game", "App", "Tool"},
		})
	}

	return requests
}

// ErrorAnalysisResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –æ—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
type ErrorAnalysisResult struct {
	ErrorAnalysis  string       `json:"error_analysis"`
	RetryStrategy  string       `json:"retry_strategy"`
	RequiredFields []ErrorField `json:"required_fields"`
}

// ErrorField –ø–æ–ª–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
type ErrorField struct {
	Field        string   `json:"field"`
	Reason       string   `json:"reason"`
	CurrentIssue string   `json:"current_issue"`
	Suggestions  []string `json:"suggestions"`
}

// generateFieldSuggestions –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—è
func (r *ReleaseAgent) generateFieldSuggestions(session *ReleaseSession, field string) []string {
	switch field {
	case "package_name":
		return []string{"com.example.app", "com.mycompany.game"}
	case "app_name":
		return r.generateAppNameSuggestions(session)
	case "app_type":
		return r.detectAppType(session)
	case "categories":
		return r.generateCategorySuggestions(session)
	case "age_legal":
		return r.detectAgeRating(session)
	case "short_description":
		return r.generateShortDescriptionSuggestions(session)
	case "full_description":
		return r.generateFullDescriptionSuggestions(session)
	case "whats_new":
		if session.ReleaseData != nil {
			return session.ReleaseData.RuStoreData.SuggestedWhatsNew
		}
		return []string{"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"}
	case "moder_info":
		return r.generateModeratorInfoSuggestions(session)
	case "price_value":
		return []string{"0", "9900", "19900"}
	case "publish_type":
		return []string{"MANUAL"}
	default:
		return []string{}
	}
}
