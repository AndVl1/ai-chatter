package release

import (
	"context"
	"fmt"
	"log"
	"regexp"
	"strconv"
	"strings"
	"time"

	"ai-chatter/internal/github"
	"ai-chatter/internal/llm"
	"ai-chatter/internal/rustore"
)

// ReleaseAgent –≥–ª–∞–≤–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª–∏–∑–∞–º–∏
type ReleaseAgent struct {
	githubClient  *github.GitHubMCPClient
	rustoreClient *rustore.RuStoreMCPClient
	llmClient     llm.Client
	githubAgent   *GitHubDataAgent

	// –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ —Ä–µ–ª–∏–∑–æ–≤
	sessions map[string]*ReleaseSession
}

// NewReleaseAgent —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Release Agent
func NewReleaseAgent(
	githubClient *github.GitHubMCPClient,
	rustoreClient *rustore.RuStoreMCPClient,
	llmClient llm.Client,
) *ReleaseAgent {
	githubAgent := NewGitHubDataAgent(githubClient, llmClient)

	return &ReleaseAgent{
		githubClient:  githubClient,
		rustoreClient: rustoreClient,
		llmClient:     llmClient,
		githubAgent:   githubAgent,
		sessions:      make(map[string]*ReleaseSession),
	}
}

// StartAIRelease –∑–∞–ø—É—Å–∫–∞–µ—Ç AI-powered –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–ª–∏–∑–∞
func (r *ReleaseAgent) StartAIRelease(ctx context.Context, userID, chatID int64, repoOwner, repoName string) (*ReleaseSession, error) {
	sessionID := fmt.Sprintf("ai_release_%d_%d", userID, time.Now().Unix())

	session := &ReleaseSession{
		ID:                 sessionID,
		UserID:             userID,
		ChatID:             chatID,
		AgentStatuses:      make(map[string]*AgentStatus),
		PendingRequests:    []*DataCollectionRequest{},
		CollectedResponses: make(map[string]string),
		CreatedAt:          time.Now(),
		UpdatedAt:          time.Now(),
		Status:             "active",
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å GitHub –∞–≥–µ–Ω—Ç–∞
	githubStatus := &AgentStatus{
		AgentName: "GitHub Data Collector",
		Status:    "running",
		Progress:  0,
		Message:   "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...",
		StartedAt: time.Now(),
		Results:   make(map[string]interface{}),
	}
	session.AgentStatuses["github"] = githubStatus

	r.sessions[sessionID] = session

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go r.collectGitHubData(ctx, session, repoOwner, repoName, githubStatus)

	return session, nil
}

// collectGitHubData —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub
func (r *ReleaseAgent) collectGitHubData(ctx context.Context, session *ReleaseSession, repoOwner, repoName string, status *AgentStatus) {
	releaseData, err := r.githubAgent.CollectReleaseData(ctx, repoOwner, repoName, status)
	if err != nil {
		status.Status = "failed"
		status.ErrorMessage = err.Error()
		log.Printf("‚ùå GitHub data collection failed: %v", err)
		return
	}

	releaseData.UserSessionID = session.UserID
	session.ReleaseData = releaseData
	session.UpdatedAt = time.Now()

	// –ü–æ—Å–ª–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —É–ª—É—á—à–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
	r.enhanceDataCollectionWithAutomation(ctx, session)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º AI-—É–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	r.generateDataCollectionRequests(ctx, session)
}

// generateDataCollectionRequests –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ –ò–ò-–∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
func (r *ReleaseAgent) generateDataCollectionRequests(ctx context.Context, session *ReleaseSession) {
	log.Printf("ü§ñ Starting AI-powered data collection analysis...")

	// –í—ã–∑—ã–≤–∞–µ–º –ò–ò-–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–π
	requests, err := r.analyzeAndGenerateRequests(ctx, session)
	if err != nil {
		log.Printf("‚ùå AI analysis failed, falling back to basic requests: %v", err)
		// Fallback –∫ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –Ω–∞–±–æ—Ä—É –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
		requests = r.generateFallbackRequests(session)
	}

	session.PendingRequests = requests
	session.Status = "waiting_user"
	session.UpdatedAt = time.Now()
	log.Printf("‚úÖ Generated %d AI-determined data collection requests for session %s", len(requests), session.ID)
}

// GetSession –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ—Å—Å–∏—é –ø–æ ID
func (r *ReleaseAgent) GetSession(sessionID string) (*ReleaseSession, bool) {
	session, exists := r.sessions[sessionID]
	return session, exists
}

// GetUserActiveSession –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (r *ReleaseAgent) GetUserActiveSession(userID int64) (*ReleaseSession, bool) {
	for _, session := range r.sessions {
		if session.UserID == userID && (session.Status == "active" || session.Status == "waiting_user") {
			return session, true
		}
	}
	return nil, false
}

// ProcessUserResponse –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (r *ReleaseAgent) ProcessUserResponse(ctx context.Context, sessionID, field, value string) (*ValidationResult, error) {
	session, exists := r.sessions[sessionID]
	if !exists {
		return nil, fmt.Errorf("session not found")
	}

	// –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å
	var request *DataCollectionRequest
	for _, req := range session.PendingRequests {
		if req.Field == field {
			request = req
			break
		}
	}

	if request == nil {
		return nil, fmt.Errorf("field not found in pending requests")
	}

	// –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
	validation := r.validateResponse(value, request)
	if !validation.Valid {
		return validation, nil
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
	session.CollectedResponses[field] = value
	session.UpdatedAt = time.Now()

	// –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ pending
	newPending := []*DataCollectionRequest{}
	for _, req := range session.PendingRequests {
		if req.Field != field {
			newPending = append(newPending, req)
		}
	}
	session.PendingRequests = newPending

	log.Printf("‚úÖ Collected response for field '%s' in session %s", field, sessionID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
	if len(session.PendingRequests) == 0 {
		log.Printf("üéØ All data collected for session %s", sessionID)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ retry —Å —Ç–µ–º–∏ –∂–µ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –Ω–æ–≤—ã–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
		if session.Status == "retry_needed" && session.PreviousResponses != nil {
			// –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã
			sameValues := r.compareResponseValues(session.CollectedResponses, session.PreviousResponses)
			if sameValues {
				log.Printf("üîÑ User confirmed same values, retrying publication for session %s", sessionID)
				session.Status = "publishing"
				go func() {
					if err := r.autoPublishToRuStore(ctx, session); err != nil {
						log.Printf("‚ùå Retry publication still failed for session %s: %v", sessionID, err)
						session.Status = "failed"
						session.UpdatedAt = time.Now()
					}
				}()
				return validation, nil
			}
		}

		// –û–±—ã—á–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑ –∏–ª–∏ —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
		log.Printf("üéØ Starting auto-publication for session %s", sessionID)
		go func() {
			if err := r.processCompletedSession(ctx, session); err != nil {
				log.Printf("‚ùå Auto-publication failed for session %s: %v", sessionID, err)
				// –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "failed" –∑–¥–µ—Å—å, —Ç–∞–∫ –∫–∞–∫ handlePublicationError
				// –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å retry –ø—Ä–æ—Ü–µ—Å—Å
			}
		}()
	}

	return validation, nil
}

// validateResponse –≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è API v1)
func (r *ReleaseAgent) validateResponse(value string, request *DataCollectionRequest) *ValidationResult {
	value = strings.TrimSpace(value)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	if request.Required && value == "" {
		return &ValidationResult{
			Valid:        false,
			ErrorMessage: fmt.Sprintf("–ü–æ–ª–µ '%s' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è", request.DisplayName),
		}
	}

	// –ï—Å–ª–∏ –ø–æ–ª–µ –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –∏ –ø—É—Å—Ç–æ–µ - —ç—Ç–æ –≤–∞–ª–∏–¥–Ω–æ
	if !request.Required && value == "" {
		return &ValidationResult{Valid: true}
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã
	if request.MaxLength > 0 && len(value) > request.MaxLength {
		return &ValidationResult{
			Valid:        false,
			ErrorMessage: fmt.Sprintf("–ü–æ–ª–µ '%s' –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É %d —Å–∏–º–≤–æ–ª–æ–≤ (—Ç–µ–∫—É—â–∞—è: %d)", request.DisplayName, request.MaxLength, len(value)),
			Suggestions:  []string{fmt.Sprintf("–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–æ %d —Å–∏–º–≤–æ–ª–æ–≤", request.MaxLength)},
		}
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Ç–∏–ø—É
	switch request.ValidationType {
	case "numeric":
		if _, err := strconv.Atoi(value); err != nil {
			return &ValidationResult{
				Valid:        false,
				ErrorMessage: fmt.Sprintf("'%s' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º", request.DisplayName),
				Suggestions:  []string{"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 0"},
			}
		}

	case "url":
		if !strings.HasPrefix(value, "http://") && !strings.HasPrefix(value, "https://") {
			return &ValidationResult{
				Valid:        false,
				ErrorMessage: fmt.Sprintf("'%s' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º URL", request.DisplayName),
				Suggestions:  []string{"–ù–∞—á–Ω–∏—Ç–µ —Å http:// –∏–ª–∏ https://", "–ü—Ä–∏–º–µ—Ä: https://example.com/privacy"},
			}
		}

	case "enum":
		// –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å—Ç—å –≤ —Å–ø–∏—Å–∫–µ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö
		validValue := false
		valueUpper := strings.ToUpper(value)
		for _, validVal := range request.ValidValues {
			if strings.ToUpper(validVal) == valueUpper {
				validValue = true
				break
			}
		}
		if !validValue {
			return &ValidationResult{
				Valid:        false,
				ErrorMessage: fmt.Sprintf("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '%s'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: %s", request.DisplayName, strings.Join(request.ValidValues, ", ")),
				Suggestions:  request.ValidValues,
			}
		}

	case "categories":
		// –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		categories := strings.Split(value, ",")
		for i, cat := range categories {
			categories[i] = strings.TrimSpace(cat)
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
		if request.MaxCategories > 0 && len(categories) > request.MaxCategories {
			return &ValidationResult{
				Valid:        false,
				ErrorMessage: fmt.Sprintf("–ú–∞–∫—Å–∏–º—É–º %d –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —É–∫–∞–∑–∞–Ω–æ: %d", request.MaxCategories, len(categories)),
				Suggestions:  []string{"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é"},
			}
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
		for _, cat := range categories {
			if cat == "" {
				return &ValidationResult{
					Valid:        false,
					ErrorMessage: "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏",
					Suggestions:  []string{"–ü—Ä–∏–º–µ—Ä: games,entertainment –∏–ª–∏ utilities,productivity"},
				}
			}
		}
	}

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
	if request.Pattern != "" {
		matched, err := regexp.MatchString(request.Pattern, value)
		if err != nil || !matched {
			return &ValidationResult{
				Valid:        false,
				ErrorMessage: fmt.Sprintf("'%s' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É", request.DisplayName),
				Suggestions:  request.Suggestions,
			}
		}
	}

	return &ValidationResult{Valid: true}
}

// IsReadyForPublishing –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
func (r *ReleaseAgent) IsReadyForPublishing(sessionID string) bool {
	session, exists := r.sessions[sessionID]
	if !exists {
		return false
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Å–æ–±—Ä–∞–Ω—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–æ: –±–µ–∑ RuStore –∫—Ä–µ–¥–µ–Ω—à–∞–ª–æ–≤)
	requiredFields := []string{"package_name", "app_name", "app_type", "categories", "age_legal"}

	for _, field := range requiredFields {
		if _, exists := session.CollectedResponses[field]; !exists {
			return false
		}
	}

	return true
}

// BuildFinalReleaseData —Å—Ç—Ä–æ–∏—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–ª–∏–∑–∞
func (r *ReleaseAgent) BuildFinalReleaseData(sessionID string) (*ReleaseData, error) {
	session, exists := r.sessions[sessionID]
	if !exists {
		return nil, fmt.Errorf("session not found")
	}

	if !r.IsReadyForPublishing(sessionID) {
		return nil, fmt.Errorf("not all required data collected")
	}

	releaseData := session.ReleaseData
	if releaseData == nil {
		return nil, fmt.Errorf("no release data available")
	}

	// –ó–∞–ø–æ–ª–Ω—è–µ–º RuStore –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–µ–∑ –∫—Ä–µ–¥–µ–Ω—à–∞–ª–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º RUSTORE_KEY)
	// –ö—Ä–µ–¥–µ–Ω—à–∞–ª—ã –±–µ—Ä—É—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ .env
	releaseData.RuStoreData.PackageName = session.CollectedResponses["package_name"]
	releaseData.RuStoreData.AppName = session.CollectedResponses["app_name"]
	releaseData.RuStoreData.AppType = session.CollectedResponses["app_type"]
	releaseData.RuStoreData.AgeLegal = session.CollectedResponses["age_legal"]

	// –ü–∞—Ä—Å–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	if categoriesStr, exists := session.CollectedResponses["categories"]; exists && categoriesStr != "" {
		categories := strings.Split(categoriesStr, ",")
		for i, cat := range categories {
			categories[i] = strings.TrimSpace(cat)
		}
		releaseData.RuStoreData.Categories = categories
	}

	// –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
	if shortDesc, exists := session.CollectedResponses["short_description"]; exists && shortDesc != "" {
		releaseData.RuStoreData.ShortDescription = shortDesc
	}
	if fullDesc, exists := session.CollectedResponses["full_description"]; exists && fullDesc != "" {
		releaseData.RuStoreData.FullDescription = fullDesc
	}
	if whatsNew, exists := session.CollectedResponses["whats_new"]; exists && whatsNew != "" {
		releaseData.RuStoreData.WhatsNew = whatsNew
	}
	if moderInfo, exists := session.CollectedResponses["moder_info"]; exists && moderInfo != "" {
		releaseData.RuStoreData.ModerInfo = moderInfo
	}
	if priceStr, exists := session.CollectedResponses["price_value"]; exists && priceStr != "" {
		if price, err := strconv.Atoi(priceStr); err == nil {
			releaseData.RuStoreData.PriceValue = price
		}
	}
	if publishType, exists := session.CollectedResponses["publish_type"]; exists && publishType != "" {
		releaseData.RuStoreData.PublishType = publishType
	}

	releaseData.Status = "ready_for_publishing"

	return releaseData, nil
}

// CompleteSession –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é
func (r *ReleaseAgent) CompleteSession(sessionID string, status string) {
	if session, exists := r.sessions[sessionID]; exists {
		session.Status = status
		session.UpdatedAt = time.Now()

		// –ß–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
		// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
	}
}

// GetSessionSummary –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Å—Å–∏–∏
func (r *ReleaseAgent) GetSessionSummary(sessionID string) string {
	session, exists := r.sessions[sessionID]
	if !exists {
		return "–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
	}

	var summary strings.Builder

	summary.WriteString(fmt.Sprintf("üìã **–°–µ—Å—Å–∏—è AI Release:** %s\n", sessionID))
	summary.WriteString(fmt.Sprintf("‚è∞ **–°–æ–∑–¥–∞–Ω–∞:** %s\n", session.CreatedAt.Format("2006-01-02 15:04")))
	summary.WriteString(fmt.Sprintf("üìä **–°—Ç–∞—Ç—É—Å:** %s\n\n", session.Status))

	// –°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
	for name, status := range session.AgentStatuses {
		icon := "üîÑ"
		if status.Status == "completed" {
			icon = "‚úÖ"
		} else if status.Status == "failed" {
			icon = "‚ùå"
		}
		summary.WriteString(fmt.Sprintf("%s **%s:** %s (%d%%)\n", icon, name, status.Message, status.Progress))
	}

	// –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
	totalRequests := len(session.PendingRequests) + len(session.CollectedResponses)
	collectedCount := len(session.CollectedResponses)

	if totalRequests > 0 {
		summary.WriteString(fmt.Sprintf("\nüìù **–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö:** %d/%d –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ\n", collectedCount, totalRequests))
	}

	return summary.String()
}

// ü§ñ –£–º–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø–æ–ª–µ–π RuStore API v1

// generateAppNameSuggestions –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (max 5 —Å–∏–º–≤–æ–ª–æ–≤)
func (r *ReleaseAgent) generateAppNameSuggestions(session *ReleaseSession) []string {
	suggestions := []string{}

	if session.ReleaseData != nil && session.ReleaseData.GitHubData != nil {
		repoName := session.ReleaseData.GitHubData.RepoName

		// –£–º–Ω–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤
		if len(repoName) <= 5 {
			suggestions = append(suggestions, repoName)
		} else {
			// –£–±–∏—Ä–∞–µ–º –æ–±—â–∏–µ —Å–ª–æ–≤–∞ –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º
			cleaned := strings.ToLower(repoName)
			cleaned = strings.ReplaceAll(cleaned, "snake", "Snk")
			cleaned = strings.ReplaceAll(cleaned, "game", "G")
			cleaned = strings.ReplaceAll(cleaned, "app", "")
			cleaned = strings.ReplaceAll(cleaned, "-", "")

			if len(cleaned) <= 5 {
				suggestions = append(suggestions, strings.Title(cleaned))
			} else {
				// –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
				suggestions = append(suggestions, strings.Title(cleaned[:5]))
			}
		}
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
	suggestions = append(suggestions, "Game", "App", "MyApp")

	return suggestions
}

// detectAppType –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ GitHub –¥–∞–Ω–Ω—ã—Ö
func (r *ReleaseAgent) detectAppType(session *ReleaseSession) []string {
	if session.ReleaseData == nil || session.ReleaseData.GitHubData == nil {
		return []string{"MAIN"}
	}

	repoName := strings.ToLower(session.ReleaseData.GitHubData.RepoName)
	description := strings.ToLower(session.ReleaseData.GitHubData.Description)

	// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∏–≥—Ä
	gameKeywords := []string{"game", "snake", "puzzle", "arcade", "racing", "adventure", "rpg", "strategy"}

	for _, keyword := range gameKeywords {
		if strings.Contains(repoName, keyword) || strings.Contains(description, keyword) {
			return []string{"GAMES"}
		}
	}

	return []string{"MAIN"}
}

// generateCategorySuggestions –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
func (r *ReleaseAgent) generateCategorySuggestions(session *ReleaseSession) []string {
	suggestions := []string{}

	if session.ReleaseData != nil && session.ReleaseData.GitHubData != nil {
		repoName := strings.ToLower(session.ReleaseData.GitHubData.RepoName)
		description := strings.ToLower(session.ReleaseData.GitHubData.Description)

		// –î–µ—Ç–µ–∫—Ü–∏—è –∏–≥—Ä–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
		if strings.Contains(repoName, "snake") {
			suggestions = append(suggestions, "arcade,puzzle")
		} else if strings.Contains(repoName, "game") {
			suggestions = append(suggestions, "games,entertainment")
		}

		// –î–µ—Ç–µ–∫—Ü–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é
		if strings.Contains(description, "productivity") {
			suggestions = append(suggestions, "productivity,utilities")
		} else if strings.Contains(description, "social") {
			suggestions = append(suggestions, "social,communication")
		}
	}

	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
	if len(suggestions) == 0 {
		suggestions = append(suggestions, "utilities,productivity", "entertainment,lifestyle")
	}

	return suggestions
}

// detectAgeRating –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
func (r *ReleaseAgent) detectAgeRating(session *ReleaseSession) []string {
	if session.ReleaseData == nil || session.ReleaseData.GitHubData == nil {
		return []string{"12+"}
	}

	repoName := strings.ToLower(session.ReleaseData.GitHubData.RepoName)

	// –ü—Ä–æ—Å—Ç—ã–µ –∏–≥—Ä—ã –æ–±—ã—á–Ω–æ 0+ –∏–ª–∏ 6+
	if strings.Contains(repoName, "snake") || strings.Contains(repoName, "puzzle") {
		return []string{"6+"}
	}

	// –ò–≥—Ä—ã –æ–±—ã—á–Ω–æ 12+
	if strings.Contains(repoName, "game") {
		return []string{"12+"}
	}

	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
	return []string{"12+"}
}

// generateShortDescriptionSuggestions –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è (max 80)
func (r *ReleaseAgent) generateShortDescriptionSuggestions(session *ReleaseSession) []string {
	suggestions := []string{}

	if session.ReleaseData != nil && session.ReleaseData.GitHubData != nil {
		description := session.ReleaseData.GitHubData.Description

		if description != "" && len(description) <= 80 {
			suggestions = append(suggestions, description)
		} else if description != "" {
			// –û–±—Ä–µ–∑–∞–µ–º –¥–æ 80 —Å–∏–º–≤–æ–ª–æ–≤
			shortDesc := description
			if len(shortDesc) > 77 {
				shortDesc = shortDesc[:77] + "..."
			}
			suggestions = append(suggestions, shortDesc)
		}

		repoName := session.ReleaseData.GitHubData.RepoName
		if strings.Contains(strings.ToLower(repoName), "snake") {
			suggestions = append(suggestions, "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∏–≥—Ä–∞ –ó–º–µ–π–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
		}
	}

	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
	suggestions = append(suggestions, "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")

	return suggestions
}

// generateFullDescriptionSuggestions –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑ README (max 4000)
func (r *ReleaseAgent) generateFullDescriptionSuggestions(session *ReleaseSession) []string {
	suggestions := []string{}

	if session.ReleaseData != nil && session.ReleaseData.GitHubData != nil {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º README –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
		readme := session.ReleaseData.GitHubData.ReadmeContent
		if readme != "" {
			// –û—á–∏—â–∞–µ–º markdown —Ä–∞–∑–º–µ—Ç–∫—É –∏ –æ–±—Ä–µ–∑–∞–µ–º –¥–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
			cleanedReadme := strings.ReplaceAll(readme, "#", "")
			cleanedReadme = strings.ReplaceAll(cleanedReadme, "*", "")
			cleanedReadme = strings.ReplaceAll(cleanedReadme, "`", "")
			cleanedReadme = strings.TrimSpace(cleanedReadme)

			if len(cleanedReadme) <= 4000 {
				suggestions = append(suggestions, cleanedReadme)
			} else {
				suggestions = append(suggestions, cleanedReadme[:3997]+"...")
			}
		}
	}

	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
	suggestions = append(suggestions, "–£–¥–æ–±–Ω–æ–µ –º–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.")

	return suggestions
}

// generateModeratorInfoSuggestions –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (max 180)
func (r *ReleaseAgent) generateModeratorInfoSuggestions(session *ReleaseSession) []string {
	suggestions := []string{}

	if session.ReleaseData != nil && session.ReleaseData.GitHubData != nil {
		repoName := session.ReleaseData.GitHubData.RepoName

		if strings.Contains(strings.ToLower(repoName), "game") {
			suggestions = append(suggestions, "–ò–≥—Ä–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ —Ä–µ–∫–ª–∞–º—ã –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫. –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑—Ä–∞—Å—Ç–æ–≤.")
		}
	}

	// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
	suggestions = append(suggestions,
		"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∫–ª–∞–º—ã –∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫.",
		"–°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è, –≥–æ—Ç–æ–≤–∞—è –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
		"–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.",
	)

	return suggestions
}

// detectPackageName –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç package name –∏–∑ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
func (r *ReleaseAgent) detectPackageName(ctx context.Context, session *ReleaseSession) string {
	if session.ReleaseData == nil || session.ReleaseData.GitHubData == nil {
		return ""
	}

	log.Printf("üîç Analyzing GitHub repository for package name detection...")

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è package name
	context := fmt.Sprintf(`
–ü—Ä–æ–µ–∫—Ç: %s
–û–ø–∏—Å–∞–Ω–∏–µ: %s
–û—Å–Ω–æ–≤–Ω–æ–π —è–∑—ã–∫: %s
–¢–µ–≥–∏: %s

README —Ñ—Ä–∞–≥–º–µ–Ω—Ç: %s

–ó–∞–¥–∞—á–∞: –û–ø—Ä–µ–¥–µ–ª–∏ Android package name –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: com.company.appname
–ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.
`,
		session.ReleaseData.GitHubData.RepoName,
		session.ReleaseData.GitHubData.Description,
		session.ReleaseData.GitHubData.PrimaryLanguage,
		strings.Join(session.ReleaseData.GitHubData.Topics, ", "),
		truncateString(session.ReleaseData.GitHubData.ReadmeContent, 500),
	)

	messages := []llm.Message{
		{Role: "system", Content: context},
		{Role: "user", Content: "–û–ø—Ä–µ–¥–µ–ª–∏ package name –∏–ª–∏ –≤–µ—Ä–Ω–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"},
	}

	response, err := r.llmClient.Generate(ctx, messages)
	if err != nil {
		log.Printf("‚ùå LLM package name detection failed: %v", err)
		return ""
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç package name
	packageName := strings.TrimSpace(response.Content)
	matched, _ := regexp.MatchString(`^[a-z][a-z0-9_]*(\.[a-z][a-z0-9_]*)*$`, packageName)
	if matched {
		log.Printf("‚úÖ Package name detected via LLM: %s", packageName)
		return packageName
	}

	// Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
	repoName := strings.ToLower(session.ReleaseData.GitHubData.RepoName)
	repoName = strings.ReplaceAll(repoName, "-", "")
	repoName = strings.ReplaceAll(repoName, "_", "")

	if repoName != "" {
		packageName = fmt.Sprintf("com.example.%s", repoName)
		log.Printf("üí° Generated fallback package name: %s", packageName)
		return packageName
	}

	return ""
}

// getExistingRuStoreAppData –ø–æ–ª—É—á–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–∑ RuStore API
func (r *ReleaseAgent) getExistingRuStoreAppData(ctx context.Context, session *ReleaseSession, packageName string) *rustore.RuStoreAppInfo {
	if r.rustoreClient == nil {
		log.Printf("‚ö†Ô∏è RuStore client not available")
		return nil
	}

	log.Printf("üîç Searching for existing RuStore app with package: %s", packageName)

	// –ò—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ package name
	params := rustore.GetAppListParams{
		AppPackage: packageName,
		PageSize:   10,
	}

	result := r.rustoreClient.GetAppList(ctx, params)
	if !result.Success {
		log.Printf("‚ùå Failed to get RuStore app list: %s", result.Message)
		return nil
	}

	// –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ package name
	for _, app := range result.Applications {
		if app.PackageName == packageName {
			log.Printf("‚úÖ Found existing RuStore app: %s (%s)", app.Name, app.AppID)
			return &app
		}
	}

	log.Printf("‚ÑπÔ∏è No existing RuStore app found for package: %s", packageName)
	return nil
}

// autoFillFromExistingApp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è RuStore
func (r *ReleaseAgent) autoFillFromExistingApp(session *ReleaseSession, appInfo *rustore.RuStoreAppInfo) {
	if appInfo == nil {
		return
	}

	log.Printf("üìù Auto-filling data from existing RuStore app: %s", appInfo.Name)

	// –ó–∞–ø–æ–ª–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—è –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã
	if _, exists := session.CollectedResponses["app_name"]; !exists && appInfo.Name != "" {
		// –û–±—Ä–µ–∑–∞–µ–º –¥–æ 5 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ API
		appName := appInfo.Name
		if len(appName) > 5 {
			appName = appName[:5]
		}
		session.CollectedResponses["app_name"] = appName
		log.Printf("‚úÖ Auto-filled app_name: %s", appName)
	}

	if _, exists := session.CollectedResponses["app_type"]; !exists && appInfo.AppType != "" {
		session.CollectedResponses["app_type"] = appInfo.AppType
		log.Printf("‚úÖ Auto-filled app_type: %s", appInfo.AppType)
	}

	if _, exists := session.CollectedResponses["categories"]; !exists && len(appInfo.Categories) > 0 {
		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
		categories := appInfo.Categories
		if len(categories) > 2 {
			categories = categories[:2]
		}
		session.CollectedResponses["categories"] = strings.Join(categories, ",")
		log.Printf("‚úÖ Auto-filled categories: %s", strings.Join(categories, ","))
	}

	if _, exists := session.CollectedResponses["age_legal"]; !exists && appInfo.AgeLegal != "" {
		session.CollectedResponses["age_legal"] = appInfo.AgeLegal
		log.Printf("‚úÖ Auto-filled age_legal: %s", appInfo.AgeLegal)
	}
}

// enhanceDataCollectionWithAutomation —É–ª—É—á—à–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π
func (r *ReleaseAgent) enhanceDataCollectionWithAutomation(ctx context.Context, session *ReleaseSession) {
	// –®–∞–≥ 1: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º package name
	packageName := r.detectPackageName(ctx, session)
	if packageName != "" {
		session.CollectedResponses["package_name"] = packageName
		log.Printf("‚úÖ Package name auto-detected: %s", packageName)

		// –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å package_name –∏–∑ pending requests, –µ—Å–ª–∏ –æ–Ω —Ç–∞–º –µ—Å—Ç—å
		filteredRequests := []*DataCollectionRequest{}
		for _, req := range session.PendingRequests {
			if req.Field != "package_name" {
				filteredRequests = append(filteredRequests, req)
			}
		}
		session.PendingRequests = filteredRequests
	} else {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º package_name –∏–∑ —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
		packageName = session.CollectedResponses["package_name"]
		if packageName == "" {
			return
		}
	}

	// –®–∞–≥ 2: –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ RuStore
	existingApp := r.getExistingRuStoreAppData(ctx, session, packageName)

	// –®–∞–≥ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
	if existingApp != nil {
		r.autoFillFromExistingApp(session, existingApp)
		log.Printf("üéØ Enhanced session with existing RuStore app data")
	} else {
		log.Printf("üí° No existing app found, using AI-generated suggestions")
	}

	session.UpdatedAt = time.Now()
}

// compareResponseValues —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –¥–≤–∞ –Ω–∞–±–æ—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (r *ReleaseAgent) compareResponseValues(current, previous map[string]string) bool {
	if len(current) != len(previous) {
		return false
	}

	for key, currentValue := range current {
		previousValue, exists := previous[key]
		if !exists || currentValue != previousValue {
			return false
		}
	}

	return true
}

// truncateString –æ–±—Ä–µ–∑–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "..."
}
