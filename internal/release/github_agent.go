package release

import (
	"context"
	"fmt"
	"log"
	"strings"
	"time"

	"ai-chatter/internal/github"
	"ai-chatter/internal/llm"
)

// GitHubDataAgent –∞–≥–µ–Ω—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ GitHub
type GitHubDataAgent struct {
	githubClient *github.GitHubMCPClient
	llmClient    llm.Client
}

// NewGitHubDataAgent —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π GitHub Data Agent
func NewGitHubDataAgent(githubClient *github.GitHubMCPClient, llmClient llm.Client) *GitHubDataAgent {
	return &GitHubDataAgent{
		githubClient: githubClient,
		llmClient:    llmClient,
	}
}

// CollectReleaseData —Å–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ GitHub –¥–ª—è —Ä–µ–ª–∏–∑–∞
func (g *GitHubDataAgent) CollectReleaseData(ctx context.Context, repoOwner, repoName string, status *AgentStatus) (*ReleaseData, error) {
	g.updateStatus(status, "running", 10, "–ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ pre-release...")

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π pre-release
	latestPreRelease, err := g.githubClient.GetLatestPreRelease(ctx, repoOwner, repoName)
	if err != nil {
		return nil, fmt.Errorf("failed to get latest pre-release: %w", err)
	}

	g.updateStatus(status, "running", 30, "–ü–æ–∏—Å–∫ Android —Ñ–∞–π–ª–∞...")

	// –ò—â–µ–º Android —Ñ–∞–π–ª
	androidAsset := g.githubClient.FindAndroidAsset(*latestPreRelease)
	if androidAsset == nil {
		return nil, fmt.Errorf("no Android file found in release")
	}

	assetType := g.getAssetType(androidAsset.Name)

	g.updateStatus(status, "running", 50, "–ê–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞...")

	// –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞
	commits, err := g.getCommitsSinceLastRelease(ctx, repoOwner, repoName)
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to get commits since last release: %v", err)
		commits = []CommitInfo{} // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–æ–º–º–∏—Ç–æ–≤
	}

	g.updateStatus(status, "running", 70, "AI-–∞–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI
	keyChanges, changedFiles, err := g.analyzeChangesWithAI(ctx, commits, latestPreRelease)
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to analyze changes with AI: %v", err)
		keyChanges = []string{"–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}
		changedFiles = []string{}
	}

	g.updateStatus(status, "running", 90, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è...")

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ"
	whatsNewSuggestions, confidence := g.generateWhatsNewSuggestions(ctx, keyChanges, latestPreRelease)

	g.updateStatus(status, "completed", 100, "–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")
	status.CompletedAt = &time.Time{}
	*status.CompletedAt = time.Now()

	releaseData := &ReleaseData{
		GitHubRelease:           latestPreRelease,
		AndroidAsset:            androidAsset,
		AssetType:               assetType,
		CommitsSinceLastRelease: commits,
		ChangedFiles:            changedFiles,
		KeyChanges:              keyChanges,
		RuStoreData: RuStoreReleaseData{
			SuggestedWhatsNew: whatsNewSuggestions,
			ConfidenceScore:   confidence,
		},
		CreatedAt: time.Now(),
		Status:    "collecting",
	}

	return releaseData, nil
}

// updateStatus –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞
func (g *GitHubDataAgent) updateStatus(status *AgentStatus, state string, progress int, message string) {
	status.Status = state
	status.Progress = progress
	status.Message = message
	log.Printf("üîç GitHub Agent: %s (%d%%) - %s", state, progress, message)
}

// getAssetType –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø —Ñ–∞–π–ª–∞
func (g *GitHubDataAgent) getAssetType(filename string) string {
	if strings.HasSuffix(filename, ".aab") {
		return "AAB"
	}
	if strings.HasSuffix(filename, ".apk") {
		return "APK"
	}
	return "Unknown"
}

// getCommitsSinceLastRelease –ø–æ–ª—É—á–∞–µ—Ç –∫–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞
func (g *GitHubDataAgent) getCommitsSinceLastRelease(ctx context.Context, repoOwner, repoName string) ([]CommitInfo, error) {
	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–ª–∏–∑—ã
	result := g.githubClient.GetReleases(ctx, repoOwner, repoName, 50, false, false)
	if !result.Success {
		return nil, fmt.Errorf("failed to get releases: %s", result.Message)
	}

	// –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–ª–∏–∑ (–Ω–µ pre-release)
	var lastStableRelease *github.GitHubRelease
	for _, release := range result.Releases {
		if !release.IsPrerelease {
			lastStableRelease = &release
			break
		}
	}

	if lastStableRelease == nil {
		// –ï—Å–ª–∏ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
		return []CommitInfo{}, nil
	}

	// –ó–¥–µ—Å—å –±—ã –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É —Ä–µ–ª–∏–∑–∞–º–∏ —á–µ—Ä–µ–∑ GitHub API
	// –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
	// TODO: Implement actual commit comparison via GitHub API

	return []CommitInfo{
		{
			SHA:          "abc123",
			Message:      "–ó–∞–≥–ª—É—à–∫–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–ª–∏–∑–∞",
			Author:       "Developer",
			Date:         time.Now().AddDate(0, 0, -7),
			ChangedFiles: []string{"app/src/main/java/MainActivity.java", "build.gradle"},
		},
	}, nil
}

// analyzeChangesWithAI –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI
func (g *GitHubDataAgent) analyzeChangesWithAI(ctx context.Context, commits []CommitInfo, release *github.GitHubRelease) ([]string, []string, error) {
	if len(commits) == 0 {
		return []string{"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–º–∏—Ç–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}, []string{}, nil
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	prompt := g.buildAnalysisPrompt(commits, release)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
	response, err := g.llmClient.Generate(ctx, []llm.Message{
		{Role: "system", Content: "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–º–º–∏—Ç—ã –∏ –≤—ã–¥–∞–≤–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç."},
		{Role: "user", Content: prompt},
	})

	if err != nil {
		return nil, nil, fmt.Errorf("failed to analyze changes with AI: %w", err)
	}

	// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç AI
	keyChanges, changedFiles := g.parseAIAnalysisResponse(response.Content)

	return keyChanges, changedFiles, nil
}

// buildAnalysisPrompt —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
func (g *GitHubDataAgent) buildAnalysisPrompt(commits []CommitInfo, release *github.GitHubRelease) string {
	var prompt strings.Builder

	prompt.WriteString(fmt.Sprintf("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–±–∏–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–µ–∂–¥—É —Ä–µ–ª–∏–∑–∞–º–∏.\n\n"))
	prompt.WriteString(fmt.Sprintf("**–¢–µ–∫—É—â–∏–π —Ä–µ–ª–∏–∑:** %s (%s)\n", release.Name, release.TagName))
	prompt.WriteString(fmt.Sprintf("**–û–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞:** %s\n\n", release.Body))

	prompt.WriteString("**–ö–æ–º–º–∏—Ç—ã —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ —Ä–µ–ª–∏–∑–∞:**\n")
	for _, commit := range commits {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–≥–æ SHA
		shortSHA := commit.ShortSHA()
		if shortSHA == "" {
			continue
		}

		prompt.WriteString(fmt.Sprintf("- %s: %s\n", shortSHA, commit.Message))
		if len(commit.ChangedFiles) > 0 {
			prompt.WriteString(fmt.Sprintf("  –ò–∑–º–µ–Ω–µ–Ω—ã —Ñ–∞–π–ª—ã: %s\n", strings.Join(commit.ChangedFiles, ", ")))
		}
	}

	prompt.WriteString("\n**–ó–∞–¥–∞–Ω–∏–µ:**\n")
	prompt.WriteString("1. –í—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —É–ª—É—á—à–µ–Ω–∏—è)\n")
	prompt.WriteString("2. –£–∫–∞–∂–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π (UI, performance, bugfixes, features)\n")
	prompt.WriteString("3. –û—Ç–≤–µ—Ç –¥–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n")
	prompt.WriteString("KEY_CHANGES:\n- –∏–∑–º–µ–Ω–µ–Ω–∏–µ 1\n- –∏–∑–º–µ–Ω–µ–Ω–∏–µ 2\n\n")
	prompt.WriteString("CHANGED_FILES:\n- —Ñ–∞–π–ª1\n- —Ñ–∞–π–ª2\n")

	return prompt.String()
}

// parseAIAnalysisResponse –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç AI –∞–Ω–∞–ª–∏–∑–∞
func (g *GitHubDataAgent) parseAIAnalysisResponse(response string) ([]string, []string) {
	keyChanges := []string{}
	changedFiles := []string{}

	lines := strings.Split(response, "\n")
	currentSection := ""

	for _, line := range lines {
		line = strings.TrimSpace(line)

		if strings.HasPrefix(line, "KEY_CHANGES:") {
			currentSection = "key_changes"
			continue
		} else if strings.HasPrefix(line, "CHANGED_FILES:") {
			currentSection = "changed_files"
			continue
		}

		if strings.HasPrefix(line, "- ") {
			item := strings.TrimPrefix(line, "- ")
			if currentSection == "key_changes" {
				keyChanges = append(keyChanges, item)
			} else if currentSection == "changed_files" {
				changedFiles = append(changedFiles, item)
			}
		}
	}

	// Fallback –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
	if len(keyChanges) == 0 {
		keyChanges = []string{"–ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω"}
	}

	return keyChanges, changedFiles
}

// generateWhatsNewSuggestions –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ"
func (g *GitHubDataAgent) generateWhatsNewSuggestions(ctx context.Context, keyChanges []string, release *github.GitHubRelease) ([]string, float64) {
	prompt := g.buildWhatsNewPrompt(keyChanges, release)

	response, err := g.llmClient.Generate(ctx, []llm.Message{
		{Role: "system", Content: "–¢—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π. –ü–∏—à–∏ –∫—Ä–∞—Ç–∫–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."},
		{Role: "user", Content: prompt},
	})

	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to generate what's new suggestions: %v", err)
		return []string{"–û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è"}, 0.1
	}

	suggestions := g.parseWhatsNewSuggestions(response.Content)
	confidence := g.calculateConfidence(keyChanges, suggestions)

	return suggestions, confidence
}

// buildWhatsNewPrompt —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ"
func (g *GitHubDataAgent) buildWhatsNewPrompt(keyChanges []string, release *github.GitHubRelease) string {
	var prompt strings.Builder

	prompt.WriteString("–°–æ–∑–¥–∞–π 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏—è '–ß—Ç–æ –Ω–æ–≤–æ–≥–æ' –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –º–∞–≥–∞–∑–∏–Ω–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n\n")
	prompt.WriteString(fmt.Sprintf("**–í–µ—Ä—Å–∏—è:** %s\n", release.TagName))
	prompt.WriteString("**–ö–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:**\n")

	for _, change := range keyChanges {
		prompt.WriteString(fmt.Sprintf("- %s\n", change))
	}

	prompt.WriteString("\n**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n")
	prompt.WriteString("- –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤\n")
	prompt.WriteString("- –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö\n")
	prompt.WriteString("- –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n")
	prompt.WriteString("- –ò–∑–±–µ–≥–∞–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤\n")
	prompt.WriteString("- –§–æ—Ä–º–∞—Ç: SUGGESTION_1:, SUGGESTION_2:, SUGGESTION_3:\n")

	return prompt.String()
}

// parseWhatsNewSuggestions –ø–∞—Ä—Å–∏—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–∑ –æ—Ç–≤–µ—Ç–∞ AI
func (g *GitHubDataAgent) parseWhatsNewSuggestions(response string) []string {
	suggestions := []string{}
	lines := strings.Split(response, "\n")

	for _, line := range lines {
		line = strings.TrimSpace(line)
		for i := 1; i <= 3; i++ {
			prefix := fmt.Sprintf("SUGGESTION_%d:", i)
			if strings.HasPrefix(line, prefix) {
				suggestion := strings.TrimSpace(strings.TrimPrefix(line, prefix))
				if suggestion != "" {
					suggestions = append(suggestions, suggestion)
				}
				break
			}
		}
	}

	// Fallback –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
	if len(suggestions) == 0 {
		suggestions = []string{
			"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
			"üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å",
			"‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞",
		}
	}

	return suggestions
}

// calculateConfidence —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å AI –≤ –∞–Ω–∞–ª–∏–∑–µ
func (g *GitHubDataAgent) calculateConfidence(keyChanges []string, suggestions []string) float64 {
	// –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
	confidence := 0.5 // –±–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
	if len(keyChanges) > 1 {
		confidence += 0.2
	}

	// –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
	if len(suggestions) >= 3 {
		confidence += 0.2
	}

	// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
	if confidence > 0.9 {
		confidence = 0.9
	}

	return confidence
}
