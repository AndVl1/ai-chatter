package notion

import (
	"context"
	"fmt"
	"log"
	"os"
	"strings"
	"testing"
	"time"
)

// TestMCPIntegration –ø—Ä–æ–≤–æ–¥–∏—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º Notion API
// –¢—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
// - NOTION_TOKEN: —Ç–æ–∫–µ–Ω –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Notion
// - NOTION_TEST_PAGE_ID: ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü
func TestMCPIntegration(t *testing.T) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
	notionToken := os.Getenv("NOTION_TOKEN")
	testPageID := os.Getenv("NOTION_TEST_PAGE_ID")

	if notionToken == "" {
		t.Skip("NOTION_TOKEN not set, skipping integration test")
	}

	if testPageID == "" {
		t.Skip("NOTION_TEST_PAGE_ID not set, skipping integration test")
	}

	// –°–æ–∑–¥–∞–µ–º MCP –∫–ª–∏–µ–Ω—Ç
	mcpClient := NewMCPClient(notionToken)
	ctx := context.Background()

	// –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
	err := mcpClient.Connect(ctx, notionToken)
	if err != nil {
		t.Fatalf("Failed to connect to MCP server: %v", err)
	}
	defer mcpClient.Close()

	// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É—Ñ—Ñ–∏–∫—Å –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
	timestamp := time.Now().Format("2006-01-02_15-04-05")
	testSuffix := fmt.Sprintf("Test_%s", timestamp)

	t.Run("CreateDialogSummary", func(t *testing.T) {
		title := fmt.Sprintf("Integration Test Dialog %s", testSuffix)
		content := `# Test Dialog Summary

**User:** –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?
**Assistant:** –ü—Ä–∏–≤–µ—Ç! –î–µ–ª–∞ –æ—Ç–ª–∏—á–Ω–æ, —Å–ø–∞—Å–∏–±–æ! –ö–∞–∫ —É –≤–∞—Å –¥–µ–ª–∞?
**User:** –¢–æ–∂–µ —Ö–æ—Ä–æ—à–æ! –ú–æ–∂–µ—à—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç –¥–∏–∞–ª–æ–≥?
**Assistant:** –ö–æ–Ω–µ—á–Ω–æ, —Å–æ—Ö—Ä–∞–Ω—è—é –¥–∏–∞–ª–æ–≥ –≤ Notion.

## Test Information
- Test run: ` + timestamp + `
- Purpose: Integration testing of MCP Notion integration
- Expected: Page should be created successfully`

		result := mcpClient.CreateDialogSummary(
			ctx,
			title,
			content,
			"test_user_123",
			"IntegrationTestUser",
			"integration_test",
			testPageID,
		)

		if !result.Success {
			t.Errorf("CreateDialogSummary failed: %s", result.Message)
			return
		}

		t.Logf("‚úÖ Dialog created successfully: %s", result.Message)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è page ID
		if result.PageID == "" {
			t.Error("Expected PageID in result, got empty string")
		} else {
			t.Logf("üìÑ Created page ID: %s", result.PageID)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
		if !strings.Contains(result.Message, "saved") && !strings.Contains(result.Message, "created") {
			t.Errorf("Expected success message, got: %s", result.Message)
		}
	})

	t.Run("CreateFreeFormPage", func(t *testing.T) {
		title := fmt.Sprintf("Integration Test Free Page %s", testSuffix)
		content := fmt.Sprintf(`# Integration Test Page

This page was created during integration testing of the Notion MCP server.

## Test Details
- **Timestamp:** %s
- **Test Type:** Free-form page creation
- **Parent Page ID:** %s
- **Test Framework:** Go testing package

## Features Tested
- [x] MCP server connection
- [x] Notion API authentication  
- [x] Page creation with parent
- [x] Content formatting
- [x] Tags assignment

## Expected Results
- Page should be created under the specified parent
- Content should be properly formatted
- Tags should be assigned correctly
- Page ID should be returned

---
*This is an automated test page and can be safely deleted.*`, timestamp, testPageID)

		result := mcpClient.CreateFreeFormPage(
			ctx,
			title,
			content,
			testPageID,
			[]string{"integration-test", "mcp", "automated", timestamp},
		)

		if !result.Success {
			t.Errorf("CreateFreeFormPage failed: %s", result.Message)
			return
		}

		t.Logf("‚úÖ Free-form page created successfully: %s", result.Message)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Ä–Ω—É–ª—Å—è page ID
		if result.PageID == "" {
			t.Error("Expected PageID in result, got empty string")
		} else {
			t.Logf("üìÑ Created page ID: %s", result.PageID)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
		if !strings.Contains(result.Message, "created") && !strings.Contains(result.Message, "Successfully") {
			t.Errorf("Expected success message, got: %s", result.Message)
		}
	})

	t.Run("SearchWorkspace", func(t *testing.T) {
		// –ò—â–µ–º —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
		searchQuery := fmt.Sprintf("Integration Test %s", testSuffix)

		result := mcpClient.SearchWorkspace(ctx, searchQuery, "", []string{})

		if !result.Success {
			t.Errorf("SearchWorkspace failed: %s", result.Message)
			return
		}

		t.Logf("‚úÖ Search completed: %s", result.Message)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–∏—Å–∫ –Ω–∞—à—ë–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
		// (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –µ—Å–ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å)
		if strings.Contains(result.Message, "found 0") {
			t.Logf("‚ö†Ô∏è  Search returned 0 results (indexing may be in progress)")
		} else {
			t.Logf("üîç Search found results in workspace")
		}
	})

	t.Run("SearchPagesWithID", func(t *testing.T) {
		// –ò—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é "Test" (–º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏)
		searchResult := mcpClient.SearchPagesWithID(ctx, "Test", 5, false)

		if !searchResult.Success {
			t.Errorf("Page search failed: %s", searchResult.Message)
			return
		}

		t.Logf("‚úÖ Page search completed: %s", searchResult.Message)
		t.Logf("üìã Found %d pages", len(searchResult.Pages))

		for i, page := range searchResult.Pages {
			t.Logf("   %d. %s (ID: %s)", i+1, page.Title, page.ID)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π
			if page.ID == "" {
				t.Errorf("Page ID is empty for page: %s", page.Title)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Title –Ω–µ –ø—É—Å—Ç–æ–π
			if page.Title == "" {
				t.Errorf("Page title is empty for ID: %s", page.ID)
			}
		}

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
		exactTitle := fmt.Sprintf("Custom Test Page %s", testSuffix)
		exactSearchResult := mcpClient.SearchPagesWithID(ctx, exactTitle, 1, true)
		if exactSearchResult.Success {
			t.Logf("‚úÖ Exact match search: found %d pages", len(exactSearchResult.Pages))
		} else {
			t.Logf("‚ö†Ô∏è  Exact match search failed (page may not be indexed yet): %s", exactSearchResult.Message)
		}
	})

	t.Run("ListAvailablePages", func(t *testing.T) {
		// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
		listResult := mcpClient.ListAvailablePages(ctx, 10, "", false)

		if !listResult.Success {
			t.Errorf("List available pages failed: %s", listResult.Message)
			return
		}

		t.Logf("‚úÖ List available pages completed: %s", listResult.Message)
		t.Logf("üìã Found %d available pages", len(listResult.Pages))

		for i, page := range listResult.Pages {
			t.Logf("   %d. %s (ID: %s, CanBeParent: %t)", i+1, page.Title, page.ID, page.CanBeParent)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –Ω–µ –ø—É—Å—Ç–æ–π
			if page.ID == "" {
				t.Errorf("Page ID is empty for page: %s", page.Title)
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Title –Ω–µ –ø—É—Å—Ç–æ–π
			if page.Title == "" {
				t.Errorf("Page title is empty for ID: %s", page.ID)
			}
		}

		// –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –º–æ–∂–µ–º –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü—ã
		if len(listResult.Pages) > 0 {
			parentPage := listResult.Pages[0]
			if parentPage.CanBeParent {
				t.Logf("üß™ Testing subpage creation under: %s", parentPage.Title)

				subPageTitle := fmt.Sprintf("Sub Page Test %s", testSuffix)
				subPageContent := "This is a test subpage created under a specific parent."

				createResult := mcpClient.CreateFreeFormPage(ctx, subPageTitle, subPageContent, parentPage.ID, nil)

				if createResult.Success {
					t.Logf("‚úÖ Subpage created successfully under %s", parentPage.Title)
				} else {
					t.Logf("‚ö†Ô∏è  Subpage creation failed: %s", createResult.Message)
				}
			}
		}

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä parent_only
		parentOnlyResult := mcpClient.ListAvailablePages(ctx, 5, "", true)
		if parentOnlyResult.Success {
			t.Logf("‚úÖ Parent-only filter: found %d pages", len(parentOnlyResult.Pages))
			for _, page := range parentOnlyResult.Pages {
				if !page.CanBeParent {
					t.Errorf("Page %s marked as cannot be parent but returned in parent_only filter", page.Title)
				}
			}
		}
	})

	t.Run("ErrorHandling", func(t *testing.T) {
		// –¢–µ—Å—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º parent page ID
		invalidPageID := "invalid-page-id-format"

		result := mcpClient.CreateFreeFormPage(
			ctx,
			"This Should Fail",
			"This page creation should fail due to invalid parent page ID",
			invalidPageID,
			[]string{"error-test"},
		)

		if result.Success {
			t.Error("Expected CreateFreeFormPage to fail with invalid parent page ID, but it succeeded")
		} else {
			t.Logf("‚úÖ Error handling works correctly: %s", result.Message)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—à–∏–±–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
		if !strings.Contains(result.Message, "error") && !strings.Contains(result.Message, "Error") {
			t.Errorf("Expected error message to contain 'error', got: %s", result.Message)
		}
	})

	t.Logf("üéâ Integration test completed successfully! Created test pages with suffix: %s", testSuffix)
}

// TestMCPConnection –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MCP —Å–µ—Ä–≤–µ—Ä—É
func TestMCPConnection(t *testing.T) {
	notionToken := os.Getenv("NOTION_TOKEN")
	if notionToken == "" {
		t.Skip("NOTION_TOKEN not set, skipping connection test")
	}

	mcpClient := NewMCPClient(notionToken)
	ctx := context.Background()

	// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	err := mcpClient.Connect(ctx, notionToken)
	if err != nil {
		t.Fatalf("Failed to connect to MCP server: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ session —Å–æ–∑–¥–∞–ª–∞—Å—å
	if mcpClient.session == nil {
		t.Error("Expected session to be created, but it's nil")
	}

	// –¢–µ—Å—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
	err = mcpClient.Close()
	if err != nil {
		t.Errorf("Failed to close MCP connection: %v", err)
	}

	t.Log("‚úÖ MCP connection test passed")
}

// TestRequiredEnvironmentVariables –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω—ã
func TestRequiredEnvironmentVariables(t *testing.T) {
	requiredVars := []string{
		"NOTION_TOKEN",
		"NOTION_TEST_PAGE_ID",
	}

	missing := make([]string, 0)
	for _, envVar := range requiredVars {
		if os.Getenv(envVar) == "" {
			missing = append(missing, envVar)
		}
	}

	if len(missing) > 0 {
		t.Logf("‚ö†Ô∏è  Missing environment variables for full integration testing: %v", missing)
		t.Logf("üìñ To run full integration tests, set these variables:")
		for _, envVar := range missing {
			switch envVar {
			case "NOTION_TOKEN":
				t.Logf("   %s=secret_your_notion_integration_token", envVar)
			case "NOTION_TEST_PAGE_ID":
				t.Logf("   %s=12345678-90ab-cdef-1234-567890abcdef", envVar)
			}
		}
		t.Skip("Integration test environment not fully configured")
	}

	t.Log("‚úÖ All required environment variables are set")
}

// Helper function to run integration tests with proper logging
func init() {
	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
	log.SetFlags(log.LstdFlags | log.Lshortfile)
}
