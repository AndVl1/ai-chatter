package notion

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strings"
	"time"
)

// MCPClient –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Notion (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
type MCPClient struct {
	token      string
	httpClient *http.Client
}

// NewMCPClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π MCP –∫–ª–∏–µ–Ω—Ç –¥–ª—è Notion
func NewMCPClient(token string) *MCPClient {
	return &MCPClient{
		token: token,
		httpClient: &http.Client{
			Timeout: 30 * time.Second,
		},
	}
}

// Connect - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
func (m *MCPClient) Connect(ctx context.Context, notionToken string) error {
	if notionToken == "" {
		return fmt.Errorf("notion token is empty")
	}
	m.token = notionToken
	log.Printf("‚úÖ Notion client initialized with REST API")
	return nil
}

// Close - –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
func (m *MCPClient) Close() error {
	return nil
}

// CreateDialogSummary —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∏–∞–ª–æ–≥–∞
func (m *MCPClient) CreateDialogSummary(ctx context.Context, title, content, userID, username, dialogType string) MCPResult {
	log.Printf("üìù Creating Notion page: %s", title)

	// –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	parentPageID := m.findParentPageID(ctx, "AI Chatter")

	var parent map[string]interface{}
	if parentPageID != "" {
		parent = map[string]interface{}{"page_id": parentPageID}
		log.Printf("üîó Creating page under parent: %s", parentPageID)
	} else {
		// –°–æ–∑–¥–∞–µ–º –Ω–∞ —É—Ä–æ–≤–Ω–µ workspace, –µ—Å–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
		parent = map[string]interface{}{"workspace": true}
		log.Printf("üìÑ Creating workspace-level page")
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
	formattedContent := fmt.Sprintf(`# %s

**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** %s (%s)  
**–¢–∏–ø:** %s  
**–°–æ–∑–¥–∞–Ω–æ:** %s

---

%s`, title, username, userID, dialogType, time.Now().Format("2006-01-02 15:04:05"), content)

	// –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫–∏ –¥–ª—è Notion API
	reqBody := map[string]interface{}{
		"parent": parent,
		"properties": map[string]interface{}{
			"title": []map[string]interface{}{
				{"type": "text", "text": map[string]interface{}{"content": title}},
			},
		},
		"children": m.createNotionBlocks(formattedContent),
	}

	payload, _ := json.Marshal(reqBody)
	respBody, status, err := m.doNotionRequest(ctx, http.MethodPost, "/pages", payload)
	if err != nil {
		return MCPResult{Success: false, Message: fmt.Sprintf("create page error: %v", err)}
	}
	if status < 200 || status >= 300 {
		return MCPResult{Success: false, Message: fmt.Sprintf("create page bad status: %d, body: %s", status, string(respBody))}
	}

	var created struct {
		ID  string `json:"id"`
		URL string `json:"url"`
	}
	if err := json.Unmarshal(respBody, &created); err != nil {
		return MCPResult{Success: false, Message: fmt.Sprintf("decode response error: %v", err)}
	}

	data := map[string]interface{}{"page_id": created.ID, "title": title, "type": dialogType, "url": created.URL}
	dataJSON, _ := json.Marshal(data)
	return MCPResult{Success: true, Message: fmt.Sprintf("Successfully created page: %s", title), PageID: created.ID, Data: string(dataJSON)}
}

// SearchDialogSummaries –∏—â–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏
func (m *MCPClient) SearchDialogSummaries(ctx context.Context, query, userID, dialogType string) MCPResult {
	log.Printf("üîç Searching Notion: query='%s', user='%s', type='%s'", query, userID, dialogType)

	payload := map[string]interface{}{
		"query": query,
		"filter": map[string]interface{}{
			"value":    "page",
			"property": "object",
		},
		"page_size": 20,
	}
	body, _ := json.Marshal(payload)
	respBody, status, err := m.doNotionRequest(ctx, http.MethodPost, "/search", body)
	if err != nil {
		return MCPResult{Success: false, Message: fmt.Sprintf("search error: %v", err)}
	}
	if status < 200 || status >= 300 {
		return MCPResult{Success: false, Message: fmt.Sprintf("search bad status: %d, body: %s", status, string(respBody))}
	}

	// –ü–∞—Ä—Å–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
	var searchResult struct {
		Results []struct {
			ID         string                 `json:"id"`
			URL        string                 `json:"url"`
			Properties map[string]interface{} `json:"properties"`
		} `json:"results"`
	}

	if err := json.Unmarshal(respBody, &searchResult); err != nil {
		return MCPResult{Success: false, Message: fmt.Sprintf("failed to parse search results: %v", err)}
	}

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	var resultText strings.Builder
	resultText.WriteString(fmt.Sprintf("–ù–∞–π–¥–µ–Ω–æ %d —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '%s':\n\n", len(searchResult.Results), query))

	for i, result := range searchResult.Results {
		title := extractTitleFromProperties(result.Properties)
		if title == "" {
			title = "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
		}
		resultText.WriteString(fmt.Sprintf("%d. %s\n   URL: %s\n\n", i+1, title, result.URL))
	}

	return MCPResult{Success: true, Message: resultText.String(), Data: string(respBody)}
}

// CreateFreeFormPage —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
func (m *MCPClient) CreateFreeFormPage(ctx context.Context, title, content, parentPageName string, tags []string) MCPResult {
	log.Printf("üìÑ Creating free-form Notion page: %s", title)

	var parent map[string]interface{}
	if parentPageName != "" {
		if parentID := m.findParentPageID(ctx, parentPageName); parentID != "" {
			parent = map[string]interface{}{"page_id": parentID}
			log.Printf("üîó Will create under parent: %s (%s)", parentPageName, parentID)
		} else {
			parent = map[string]interface{}{"workspace": true}
			log.Printf("‚ö†Ô∏è Parent '%s' not found, creating in workspace", parentPageName)
		}
	} else {
		parent = map[string]interface{}{"workspace": true}
		log.Printf("üìÑ Creating workspace-level page")
	}

	reqBody := map[string]interface{}{
		"parent": parent,
		"properties": map[string]interface{}{
			"title": []map[string]interface{}{
				{"type": "text", "text": map[string]interface{}{"content": title}},
			},
		},
		"children": m.createNotionBlocks(content),
	}

	payload, _ := json.Marshal(reqBody)
	respBody, status, err := m.doNotionRequest(ctx, http.MethodPost, "/pages", payload)
	if err != nil {
		return MCPResult{Success: false, Message: fmt.Sprintf("create page error: %v", err)}
	}
	if status < 200 || status >= 300 {
		return MCPResult{Success: false, Message: fmt.Sprintf("create page bad status: %d, body: %s", status, string(respBody))}
	}

	var created struct {
		ID  string `json:"id"`
		URL string `json:"url"`
	}
	if err := json.Unmarshal(respBody, &created); err != nil {
		return MCPResult{Success: false, Message: fmt.Sprintf("decode response error: %v", err)}
	}

	data := map[string]interface{}{"page_id": created.ID, "title": title, "url": created.URL, "type": "free-form", "tags": tags}
	dataJSON, _ := json.Marshal(data)
	return MCPResult{Success: true, Message: fmt.Sprintf("Successfully created free-form page: %s", title), PageID: created.ID, Data: string(dataJSON)}
}

// SearchWorkspace –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –ø–æ workspace
func (m *MCPClient) SearchWorkspace(ctx context.Context, query, pageType string, tags []string) MCPResult {
	return m.SearchDialogSummaries(ctx, query, "", "")
}

// createNotionBlocks —Å–æ–∑–¥–∞–µ—Ç –±–ª–æ–∫–∏ –¥–ª—è Notion API –∏–∑ markdown —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
func (m *MCPClient) createNotionBlocks(content string) []map[string]interface{} {
	// –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–∞ –∞–±–∑–∞—Ü—ã
	paragraphs := strings.Split(content, "\n\n")
	var blocks []map[string]interface{}

	for _, paragraph := range paragraphs {
		paragraph = strings.TrimSpace(paragraph)
		if paragraph == "" {
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
		if strings.HasPrefix(paragraph, "# ") {
			blocks = append(blocks, map[string]interface{}{
				"object": "block",
				"type":   "heading_1",
				"heading_1": map[string]interface{}{
					"rich_text": []map[string]interface{}{
						{"type": "text", "text": map[string]interface{}{"content": strings.TrimPrefix(paragraph, "# ")}},
					},
				},
			})
		} else if strings.HasPrefix(paragraph, "## ") {
			blocks = append(blocks, map[string]interface{}{
				"object": "block",
				"type":   "heading_2",
				"heading_2": map[string]interface{}{
					"rich_text": []map[string]interface{}{
						{"type": "text", "text": map[string]interface{}{"content": strings.TrimPrefix(paragraph, "## ")}},
					},
				},
			})
		} else if strings.HasPrefix(paragraph, "### ") {
			blocks = append(blocks, map[string]interface{}{
				"object": "block",
				"type":   "heading_3",
				"heading_3": map[string]interface{}{
					"rich_text": []map[string]interface{}{
						{"type": "text", "text": map[string]interface{}{"content": strings.TrimPrefix(paragraph, "### ")}},
					},
				},
			})
		} else if strings.Contains(paragraph, "---") {
			// –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
			blocks = append(blocks, map[string]interface{}{
				"object":  "block",
				"type":    "divider",
				"divider": map[string]interface{}{},
			})
		} else {
			// –û–±—ã—á–Ω—ã–π –ø–∞—Ä–∞–≥—Ä–∞—Ñ
			blocks = append(blocks, map[string]interface{}{
				"object": "block",
				"type":   "paragraph",
				"paragraph": map[string]interface{}{
					"rich_text": []map[string]interface{}{
						{"type": "text", "text": map[string]interface{}{"content": paragraph}},
					},
				},
			})
		}
	}

	return blocks
}

// findParentPageID –∏—â–µ—Ç ID —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
func (m *MCPClient) findParentPageID(ctx context.Context, pageName string) string {
	log.Printf("üîç Searching for parent page: %s", pageName)

	payload := map[string]interface{}{
		"query": pageName,
		"filter": map[string]interface{}{
			"value":    "page",
			"property": "object",
		},
		"page_size": 25,
	}
	body, _ := json.Marshal(payload)
	respBody, status, err := m.doNotionRequest(ctx, http.MethodPost, "/search", body)
	if err != nil || status < 200 || status >= 300 {
		log.Printf("‚ùå Parent page search failed: status=%d err=%v", status, err)
		return ""
	}

	var search struct {
		Results []struct {
			ID         string                 `json:"id"`
			URL        string                 `json:"url"`
			Properties map[string]interface{} `json:"properties"`
		} `json:"results"`
	}
	if err := json.Unmarshal(respBody, &search); err != nil {
		log.Printf("‚ùå decode search response error: %v", err)
		return ""
	}

	lower := strings.ToLower(pageName)
	for _, result := range search.Results {
		if result.URL != "" && strings.Contains(strings.ToLower(result.URL), strings.ReplaceAll(lower, " ", "-")) {
			return result.ID
		}
		if title := extractTitleFromProperties(result.Properties); strings.EqualFold(title, pageName) {
			return result.ID
		}
	}
	return ""
}

// doNotionRequest –≤—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Notion API
func (m *MCPClient) doNotionRequest(ctx context.Context, method, path string, body []byte) ([]byte, int, error) {
	if m.token == "" {
		return nil, 0, fmt.Errorf("NOTION_TOKEN is empty")
	}

	const notionAPIBase = "https://api.notion.com/v1"
	const notionAPIVersion = "2022-06-28"

	req, err := http.NewRequestWithContext(ctx, method, notionAPIBase+path, bytes.NewReader(body))
	if err != nil {
		return nil, 0, err
	}

	req.Header.Set("Authorization", "Bearer "+m.token)
	req.Header.Set("Notion-Version", notionAPIVersion)
	req.Header.Set("Content-Type", "application/json")

	resp, err := m.httpClient.Do(req)
	if err != nil {
		return nil, 0, err
	}
	defer resp.Body.Close()

	respBytes, _ := io.ReadAll(resp.Body)
	return respBytes, resp.StatusCode, nil
}

// extractTitleFromProperties –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ properties
func extractTitleFromProperties(props map[string]interface{}) string {
	if props == nil {
		return ""
	}
	if v, ok := props["title"]; ok {
		if arr, ok := v.([]interface{}); ok && len(arr) > 0 {
			if first, ok := arr[0].(map[string]interface{}); ok {
				if text, ok := first["text"].(map[string]interface{}); ok {
					if content, ok := text["content"].(string); ok {
						return content
					}
				}
			}
		}
	}
	return ""
}

// MCPResult –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç MCP –≤—ã–∑–æ–≤–∞
type MCPResult struct {
	Success bool   `json:"success"`
	Message string `json:"message"`
	Data    string `json:"data,omitempty"`
	PageID  string `json:"page_id,omitempty"`
}

// MCPCreatePagesResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ MCP
type MCPCreatePagesResult struct {
	Pages []MCPPageInfo `json:"pages"`
}

// MCPPageInfo –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
type MCPPageInfo struct {
	ID  string `json:"id"`
	URL string `json:"url"`
}

// MCPSearchResult —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ MCP
type MCPSearchResult struct {
	Results []MCPSearchItem `json:"results"`
	Type    string          `json:"type"`
}

// MCPSearchItem —ç–ª–µ–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞
type MCPSearchItem struct {
	Title     string `json:"title"`
	URL       string `json:"url"`
	Type      string `json:"type"`
	Highlight string `json:"highlight"`
	Timestamp string `json:"timestamp"`
	ID        string `json:"id"`
}
