package telegram

import (
	"archive/tar"
	"archive/zip"
	"bytes"
	"compress/gzip"
	"context"
	"fmt"
	"html"
	"io"
	"log"
	"net/http"
	"path/filepath"
	"strconv"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"

	"ai-chatter/internal/auth"
	"ai-chatter/internal/codevalidation"
	"ai-chatter/internal/llm"
	"ai-chatter/internal/storage"
)

// ProgressTracker –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
type ProgressTracker struct {
	bot       *Bot
	chatID    int64
	messageID int
	steps     map[string]*ProgressStep
	mu        sync.RWMutex
	finalURL  string
}

// ProgressStep –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —à–∞–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
type ProgressStep struct {
	Name        string
	Description string
	Status      string // pending, in_progress, completed, error
	StartTime   time.Time
	EndTime     time.Time
}

// NewProgressTracker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func NewProgressTracker(bot *Bot, chatID int64, messageID int) *ProgressTracker {
	steps := map[string]*ProgressStep{
		"gmail_data":         {Name: "üìß –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ Gmail", Description: "–ü–æ–∏—Å–∫ –∏ –∞–Ω–∞–ª–∏–∑ –ø–∏—Å–µ–º —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏", Status: "pending"},
		"validate_data":      {Name: "üîç –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö", Description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫)", Status: "pending"},
		"notion_setup":       {Name: "üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Notion", Description: "–ü–æ–∏—Å–∫/—Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Gmail summaries", Status: "pending"},
		"generate_summary":   {Name: "ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏", Description: "AI –∞–Ω–∞–ª–∏–∑ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫)", Status: "pending"},
		"validate_summary":   {Name: "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–∞–º–º–∞—Ä–∏", Description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å –∞–≤—Ç–æ–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏", Status: "pending"},
		"create_notion_page": {Name: "üìÑ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã", Description: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Notion", Status: "pending"},
	}

	return &ProgressTracker{
		bot:       bot,
		chatID:    chatID,
		messageID: messageID,
		steps:     steps,
	}
}

// UpdateProgress —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ProgressCallback
func (pt *ProgressTracker) UpdateProgress(stepKey string, status string) {
	pt.mu.Lock()
	defer pt.mu.Unlock()

	if step, exists := pt.steps[stepKey]; exists {
		step.Status = status
		if status == "in_progress" {
			step.StartTime = time.Now()
		} else if status == "completed" || status == "error" {
			step.EndTime = time.Now()
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	pt.updateMessage()
}

// SetFinalResult —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
func (pt *ProgressTracker) SetFinalResult(pageURL string) {
	pt.mu.Lock()
	defer pt.mu.Unlock()
	pt.finalURL = pageURL
	pt.updateMessage()
}

// updateMessage –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
func (pt *ProgressTracker) updateMessage() {
	message := pt.buildProgressMessage()

	editMsg := tgbotapi.NewEditMessageText(pt.chatID, pt.messageID, message)
	editMsg.ParseMode = pt.bot.parseModeValue()

	if _, err := pt.bot.s.Send(editMsg); err != nil {
		log.Printf("‚ö†Ô∏è Failed to update progress message: %v", err)
	}
}

// buildProgressMessage —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
func (pt *ProgressTracker) buildProgressMessage() string {
	var message strings.Builder

	if pt.finalURL != "" {
		// –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
		message.WriteString("‚úÖ **Gmail —Å–∞–º–º–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!**\n\n")
		message.WriteString(fmt.Sprintf("üîó **–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ Notion:**\n%s\n\n", pt.finalURL))
		message.WriteString("üìä **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã:**\n")
	} else {
		message.WriteString("üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ Gmail –∑–∞–ø—Ä–æ—Å–∞...**\n\n")
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–∞—Ö
	stepOrder := []string{"gmail_data", "validate_data", "notion_setup", "generate_summary", "validate_summary", "create_notion_page"}

	for _, stepKey := range stepOrder {
		if step, exists := pt.steps[stepKey]; exists {
			var statusIcon string
			switch step.Status {
			case "pending":
				statusIcon = "‚è≥"
			case "in_progress":
				statusIcon = "üîÑ"
			case "completed":
				statusIcon = "‚úÖ"
			case "error":
				statusIcon = "‚ùå"
			default:
				statusIcon = "‚ùì"
			}

			message.WriteString(fmt.Sprintf("%s %s\n", statusIcon, step.Name))

			// –ï—Å–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —à–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è
			if pt.finalURL != "" && (step.Status == "completed" || step.Status == "error") && !step.EndTime.IsZero() && !step.StartTime.IsZero() {
				duration := step.EndTime.Sub(step.StartTime)
				if duration > 0 && duration < 24*time.Hour { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
					if duration < time.Minute {
						message.WriteString(fmt.Sprintf("   ‚è±Ô∏è %.1fs\n", duration.Seconds()))
					} else {
						message.WriteString(fmt.Sprintf("   ‚è±Ô∏è %v\n", duration.Round(time.Second)))
					}
				}
			}
		}
	}

	if pt.finalURL == "" {
		message.WriteString("\nüí≠ *–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 —Å–µ–∫—É–Ω–¥...*")
	}

	return message.String()
}

// handleCommand
func (b *Bot) handleCommand(msg *tgbotapi.Message) {
	if msg.Command() == "provider" || msg.Command() == "model" || msg.Command() == "model2" {
		b.handleAdminConfigCommands(msg)
		return
	}
	// Notion commands
	if msg.Command() == "notion_save" {
		b.handleNotionSave(msg)
		return
	}
	if msg.Command() == "notion_search" {
		b.handleNotionSearch(msg)
		return
	}
	if msg.Command() == "report" {
		b.handleReportCommand(msg)
		return
	}
	if msg.Command() == "gmail_summary" {
		b.handleGmailSummaryCommand(msg)
		return
	}
	if msg.Command() == "tz" {
		if !b.authSvc.IsAllowed(msg.From.ID) {
			return
		}
		// Reset previous context for this user (do not delete logs, just mark not used)
		b.history.DisableAll(msg.From.ID)
		if b.recorder != nil {
			_ = b.recorder.SetAllCanUse(msg.From.ID, false)
		}

		topic := strings.TrimSpace(msg.CommandArguments())
		addition := "Requirements elicitation mode (Technical Specification). Your job is to iteratively clarify and assemble a complete TS in Russian for the topic: '" + topic + "'. " +
			"Ask up to 5 highly targeted questions per turn until you are confident the TS is complete. Focus on: scope/goals, user roles, environment, constraints (budget/time/tech), functional and non-functional requirements, data and integrations, dependencies, acceptance criteria, risks/mitigations, deliverables and plan. " +
			"When asking questions, prefer concrete options (multiple-choice) and short free-form fields; personalize questions to the user‚Äôs previous answers (e.g., preferred and unwanted ingredients, platforms, APIs, performance targets). " +
			"Always respond strictly in JSON {title, answer, compressed_context, status}. Set status='continue' while clarifying. When the TS is fully ready, set status='final'. If your context window is >= 80% full, include 'compressed_context' with a compact string summary of essential facts/decisions to continue without previous messages. You have at most 15 messages to clarify before finalization. " +
			"VERY IMPORTANT: Present your questions as a numbered list (1., 2., 3., ...) with each question on its own new line. Do not merge questions into a single paragraph."
		b.addUserSystemPrompt(msg.From.ID, addition)
		b.setTZMode(msg.From.ID, true)
		b.setTZRemaining(msg.From.ID, tzMaxSteps)
		seed := "–¢–µ–º–∞ –¢–ó: " + topic
		b.history.AppendUser(msg.From.ID, seed)
		if b.recorder != nil {
			tru := true
			_ = b.recorder.AppendInteraction(storage.Event{Timestamp: b.nowUTC(), UserID: msg.From.ID, UserMessage: seed, CanUse: &tru})
		}
		ctx := context.Background()
		contextMsgs := b.buildContextWithOverflow(ctx, msg.From.ID)
		if b.isTZMode(msg.From.ID) {
			left := b.getTZRemaining(msg.From.ID)
			if left > 0 && left <= 2 {
				accel := "–û—Å—Ç–∞–ª–æ—Å—å –æ—á–µ–Ω—å –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π (<=2). –°–æ–∫—Ä–∞—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–ó –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ ‚Äî —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–π —É–∂–µ –≤ —ç—Ç–æ–º –æ—Ç–≤–µ—Ç–µ (status='final')."
				contextMsgs = append([]llm.Message{{Role: "system", Content: accel}}, contextMsgs...)
			}
		}
		b.logLLMRequest(msg.From.ID, "tz_bootstrap", contextMsgs)
		resp, err := b.getLLMClient().Generate(ctx, contextMsgs)
		if err != nil {
			b.sendMessage(msg.Chat.ID, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –¢–ó, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			log.Println(err)
			return
		}
		b.processLLMAndRespond(ctx, msg.Chat.ID, msg.From.ID, resp)
		return
	}
	// admin-only commands
	if msg.From.ID != b.adminUserID {
		b.sendMessage(msg.Chat.ID, "–ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
		return
	}
	switch msg.Command() {
	case "allowlist":
		var bld strings.Builder
		bld.WriteString("Allowlist:\n")
		for _, u := range b.authSvc.List() {
			bld.WriteString(fmt.Sprintf("- id=%d, @%s %s %s\n", u.ID, u.Username, u.FirstName, u.LastName))
		}
		b.sendMessage(msg.Chat.ID, bld.String())
	case "remove":
		args := strings.Fields(msg.CommandArguments())
		if len(args) != 1 {
			b.sendMessage(msg.Chat.ID, "Usage: /remove <user_id>")
			return
		}
		uid, err := strconv.ParseInt(args[0], 10, 64)
		if err != nil {
			b.sendMessage(msg.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
			return
		}
		if err := b.authSvc.Remove(uid); err != nil {
			b.sendMessage(msg.Chat.ID, fmt.Sprintf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %v", err))
			return
		}
		b.sendMessage(msg.Chat.ID, fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d —É–¥–∞–ª–µ–Ω –∏–∑ allowlist", uid))
	case "pending":
		var bld strings.Builder
		bld.WriteString("Pending –∑–∞—è–≤–∫–∏:\n")
		for _, u := range b.pending {
			bld.WriteString(fmt.Sprintf("- id=%d, @%s %s %s\n", u.ID, u.Username, u.FirstName, u.LastName))
		}
		b.sendMessage(msg.Chat.ID, bld.String())
	case "approve":
		args := strings.Fields(msg.CommandArguments())
		if len(args) != 1 {
			b.sendMessage(msg.Chat.ID, "Usage: /approve <user_id>")
			return
		}
		uid, err := strconv.ParseInt(args[0], 10, 64)
		if err != nil {
			b.sendMessage(msg.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
			return
		}
		b.approveUser(uid)
	case "deny":
		args := strings.Fields(msg.CommandArguments())
		if len(args) != 1 {
			b.sendMessage(msg.Chat.ID, "Usage: /deny <user_id>")
			return
		}
		uid, err := strconv.ParseInt(args[0], 10, 64)
		if err != nil {
			b.sendMessage(msg.Chat.ID, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id")
			return
		}
		b.denyUser(uid)
	}
}

// handleIncomingMessage
func (b *Bot) handleIncomingMessage(ctx context.Context, msg *tgbotapi.Message) {
	if !b.authSvc.IsAllowed(msg.From.ID) {
		log.Printf("Unauthorized access attempt by user ID: %d, username: @%s", msg.From.ID, msg.From.UserName)
		if _, ok := b.pending[msg.From.ID]; ok {
			b.sendMessage(msg.Chat.ID, "–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —è —É–≤–µ–¥–æ–º–ª—é –≤–∞—Å.")
			return
		}
		b.pending[msg.From.ID] = auth.User{ID: msg.From.ID, Username: msg.From.UserName, FirstName: msg.From.FirstName, LastName: msg.From.LastName}
		if b.pendingRepo != nil {
			_ = b.pendingRepo.Upsert(b.pending[msg.From.ID])
		}
		b.sendMessage(msg.Chat.ID, "–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
		b.notifyAdminRequest(msg.From.ID, msg.From.UserName)
		return
	}
	log.Printf("Incoming message from %d (@%s): %q", msg.From.ID, msg.From.UserName, msg.Text)
	b.history.AppendUser(msg.From.ID, msg.Text)
	if b.recorder != nil {
		tru := true
		_ = b.recorder.AppendInteraction(storage.Event{Timestamp: b.nowUTC(), UserID: msg.From.ID, UserMessage: msg.Text, CanUse: &tru})
	}

	if b.isTZMode(msg.From.ID) && b.getTZRemaining(msg.From.ID) <= 0 {
		if pFinal, respFinal, okFinal := b.produceFinalTS(ctx, msg.From.ID); okFinal {
			b.sendFinalTS(msg.Chat.ID, msg.From.ID, pFinal, respFinal)
			return
		}
	}

	contextMsgs := b.buildContextWithOverflow(ctx, msg.From.ID)
	if b.isTZMode(msg.From.ID) {
		left := b.getTZRemaining(msg.From.ID)
		if left > 0 && left <= 2 {
			accel := "–û—Å—Ç–∞–ª–æ—Å—å –æ—á–µ–Ω—å –º–∞–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏–π (<=2). –°–æ–∫—Ä–∞—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ—Å—Ç–∞—Ä–∞–π—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¢–ó –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ. –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ ‚Äî —Ñ–∏–Ω–∞–ª–∏–∑–∏—Ä—É–π —É–∂–µ –≤ —ç—Ç–æ–º –æ—Ç–≤–µ—Ç–µ (status='final')."
			contextMsgs = append([]llm.Message{{Role: "system", Content: accel}}, contextMsgs...)
		}
	}
	b.logLLMRequest(msg.From.ID, "chat", contextMsgs)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∞—Ä—Ö–∏–≤–æ–≤
	if b.codeValidationWorkflow != nil && !b.isTZMode(msg.From.ID) && msg.Document != nil {
		log.Printf("üîç Document detected: %s", msg.Document.FileName)
		b.handleDocumentValidation(ctx, msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–¥–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –æ–±—ã—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
	if b.codeValidationWorkflow != nil && !b.isTZMode(msg.From.ID) {
		hasCode, extractedCode, filename, userQuestion, codeErr := codevalidation.DetectCodeInMessage(ctx, b.getLLMClient(), msg.Text)
		if codeErr != nil {
			log.Printf("‚ö†Ô∏è Code detection failed: %v", codeErr)
		} else if hasCode {
			log.Printf("üîç Code detected in message, triggering validation mode")
			if userQuestion != "" {
				log.Printf("‚ùì User question detected: %s", userQuestion)
			}
			// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–¥–∞ –≤–º–µ—Å—Ç–æ –æ–±—ã—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
			b.handleCodeValidation(ctx, msg, extractedCode, filename, userQuestion)
			return
		}
	}

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã Notion —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –¢–ó
	var resp llm.Response
	var err error
	if b.mcpClient != nil && !b.isTZMode(msg.From.ID) {
		tools := llm.GetNotionTools()
		resp, err = b.getLLMClient().GenerateWithTools(ctx, contextMsgs, tools)
	} else {
		resp, err = b.getLLMClient().Generate(ctx, contextMsgs)
	}

	if err != nil {
		b.sendMessage(msg.Chat.ID, "Sorry, something went wrong.")
		log.Printf("Something went wrong. %v", err)
		return
	}
	b.processLLMAndRespond(ctx, msg.Chat.ID, msg.From.ID, resp)
}

// notifyAdminRequest
func (b *Bot) notifyAdminRequest(userID int64, username string) {
	if b.adminUserID == 0 {
		return
	}
	text := fmt.Sprintf("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s —Å id %d —Ö–æ—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º", username, userID)
	kb := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("—Ä–∞–∑—Ä–µ—à–∏—Ç—å", approvePrefix+strconv.FormatInt(userID, 10)),
			tgbotapi.NewInlineKeyboardButtonData("–∑–∞–ø—Ä–µ—Ç–∏—Ç—å", denyPrefix+strconv.FormatInt(userID, 10)),
		),
	)
	msg := tgbotapi.NewMessage(b.adminUserID, b.escapeIfNeeded(text))
	msg.ParseMode = b.parseModeValue()
	msg.ReplyMarkup = kb
	_, _ = b.s.Send(msg)
}

// handleCallback
func (b *Bot) handleCallback(ctx context.Context, cb *tgbotapi.CallbackQuery) {
	switch {
	case cb.Data == resetCmd:
		b.history.DisableAll(cb.From.ID)
		if b.recorder != nil {
			_ = b.recorder.SetAllCanUse(cb.From.ID, false)
		}
		msg := tgbotapi.NewMessage(cb.Message.Chat.ID, b.escapeIfNeeded("–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω"))
		msg.ParseMode = b.parseModeValue()
		msg.ReplyMarkup = b.menuKeyboard()
		if _, err := b.s.Send(msg); err != nil {
			log.Printf("failed to send reset confirmation: %v", err)
		}
	case cb.Data == summaryCmd:
		b.handleSummary(ctx, cb)
	default:
		switch {
		case strings.HasPrefix(cb.Data, approvePrefix):
			idStr := strings.TrimPrefix(cb.Data, approvePrefix)
			id, _ := strconv.ParseInt(idStr, 10, 64)
			b.approveUser(id)
		case strings.HasPrefix(cb.Data, denyPrefix):
			idStr := strings.TrimPrefix(cb.Data, denyPrefix)
			id, _ := strconv.ParseInt(idStr, 10, 64)
			b.denyUser(id)
		}
	}
}

// handleSummary
func (b *Bot) handleSummary(ctx context.Context, cb *tgbotapi.CallbackQuery) {
	h := b.history.Get(cb.From.ID)
	if len(h) == 0 {
		m := tgbotapi.NewMessage(cb.Message.Chat.ID, b.escapeIfNeeded("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"))
		m.ParseMode = b.parseModeValue()
		_, _ = b.s.Send(m)
		return
	}
	msgs := b.buildContextWithOverflow(ctx, cb.From.ID)
	msgs = append([]llm.Message{{Role: "system", Content: "–°—É–º–º–∏—Ä—É–π –ø–µ—Ä–µ–ø–∏—Å–∫—É. –û—Ç–≤–µ—Ç —Å—Ç—Ä–æ–≥–æ –≤ JSON —Å–æ —Å—Ö–µ–º–æ–π {title, answer, compressed_context}."}}, msgs...)
	b.logLLMRequest(cb.From.ID, "summary", msgs)
	resp, err := b.getLLMClient().Generate(ctx, msgs)
	if err != nil {
		m := tgbotapi.NewMessage(cb.Message.Chat.ID, b.escapeIfNeeded("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å–∞–º–º–∞—Ä–∏"))
		m.ParseMode = b.parseModeValue()
		_, _ = b.s.Send(m)
		return
	}
	parsed, ok := parseLLMJSON(resp.Content)
	if !ok {
		if p2, ok2 := b.reformatToSchema(ctx, cb.From.ID, resp.Content); ok2 {
			parsed = p2
			ok = true
		}
	}
	if ok && strings.TrimSpace(parsed.CompressedContext) != "" {
		b.addUserSystemPrompt(cb.From.ID, parsed.CompressedContext)
		b.history.DisableAll(cb.From.ID)
	}
	answerToSend := resp.Content
	if ok && parsed.Answer != "" {
		answerToSend = parsed.Answer
	}
	b.history.AppendAssistantWithUsed(cb.From.ID, answerToSend, true)
	if b.recorder != nil {
		tru := true
		_ = b.recorder.AppendInteraction(storage.Event{Timestamp: b.nowUTC(), UserID: cb.From.ID, AssistantResponse: answerToSend, CanUse: &tru})
	}
	metaLine := fmt.Sprintf("[model=%s, tokens: prompt=%d, completion=%d, total=%d]", resp.Model, resp.PromptTokens, resp.CompletionTokens, resp.TotalTokens)
	metaEsc := b.escapeIfNeeded(metaLine)
	body := answerToSend
	if ok && parsed.Title != "" {
		body = b.formatTitleAnswer(parsed.Title, answerToSend)
	}
	final := metaEsc + "\n\n" + body
	m := tgbotapi.NewMessage(cb.Message.Chat.ID, final)
	m.ParseMode = b.parseModeValue()
	m.ReplyMarkup = b.menuKeyboard()
	_, _ = b.s.Send(m)
}

// handleNotionSave —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∏–∞–ª–æ–≥ –≤ Notion
func (b *Bot) handleNotionSave(msg *tgbotapi.Message) {
	if !b.authSvc.IsAllowed(msg.From.ID) {
		return
	}

	if b.mcpClient == nil {
		b.sendMessage(msg.Chat.ID, "Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NOTION_TOKEN –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
		return
	}

	args := strings.TrimSpace(msg.CommandArguments())
	if args == "" {
		b.sendMessage(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notion_save <–Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã>")
		return
	}

	// –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
	history := b.history.Get(msg.From.ID)
	if len(history) == 0 {
		b.sendMessage(msg.Chat.ID, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø—É—Å—Ç–∞, –Ω–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å.")
		return
	}

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
	var content strings.Builder
	for _, msg := range history {
		if msg.Role == "user" {
			content.WriteString(fmt.Sprintf("**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** %s\n\n", msg.Content))
		} else if msg.Role == "assistant" {
			content.WriteString(fmt.Sprintf("**–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç:** %s\n\n", msg.Content))
		}
	}

	ctx := context.Background()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É parent page
	if b.notionParentPage == "" {
		b.sendMessage(msg.Chat.ID, "‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω NOTION_PARENT_PAGE_ID. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è —Å ID —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Notion.")
		return
	}

	result := b.mcpClient.CreateDialogSummary(
		ctx,
		args, // title
		content.String(),
		fmt.Sprintf("%d", msg.From.ID),
		msg.From.UserName,
		"dialog_summary",
		b.notionParentPage,
	)

	if result.Success {
		b.sendMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –î–∏–∞–ª–æ–≥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Notion!\n\n%s", result.Message))
	} else {
		b.sendMessage(msg.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Notion: %s", result.Message))
	}
}

// handleNotionSearch –∏—â–µ—Ç –≤ Notion
func (b *Bot) handleNotionSearch(msg *tgbotapi.Message) {
	if !b.authSvc.IsAllowed(msg.From.ID) {
		return
	}

	if b.mcpClient == nil {
		b.sendMessage(msg.Chat.ID, "Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ NOTION_TOKEN –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
		return
	}

	args := strings.TrimSpace(msg.CommandArguments())
	if args == "" {
		b.sendMessage(msg.Chat.ID, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /notion_search <–ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å>")
		return
	}

	ctx := context.Background()
	result := b.mcpClient.SearchDialogSummaries(
		ctx,
		args,
		fmt.Sprintf("%d", msg.From.ID),
		"dialog_summary",
	)

	if result.Success {
		b.sendMessage(msg.Chat.ID, fmt.Sprintf("üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ Notion:\n\n%s", result.Message))
	} else {
		b.sendMessage(msg.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Notion: %s", result.Message))
	}
}

// handleReportCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /report (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
func (b *Bot) handleReportCommand(msg *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
	if msg.From.ID != b.adminUserID {
		b.sendMessage(msg.Chat.ID, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		return
	}

	ctx := context.Background()
	if err := b.generateDailyReport(ctx, msg.Chat.ID); err != nil {
		log.Printf("‚ùå Report generation failed: %v", err)
		b.sendMessage(msg.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: %v", err))
	}
}

// handleGmailSummaryCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /gmail_summary (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
func (b *Bot) handleGmailSummaryCommand(msg *tgbotapi.Message) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
	if msg.From.ID != b.adminUserID {
		b.sendMessage(msg.Chat.ID, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Gmail workflow
	if b.gmailWorkflow == nil {
		b.sendMessage(msg.Chat.ID, "‚ùå Gmail –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é GMAIL_CREDENTIALS_JSON –∏–ª–∏ GMAIL_CREDENTIALS_JSON_PATH.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
	userQuery := strings.TrimSpace(msg.CommandArguments())
	if userQuery == "" {
		b.sendMessage(msg.Chat.ID, "‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /gmail_summary <–∑–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞>\n\n–ü—Ä–∏–º–µ—Ä: /gmail_summary —á—Ç–æ –≤–∞–∂–Ω–æ–≥–æ —è –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
	initialMsg := tgbotapi.NewMessage(msg.Chat.ID, "üîÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ Gmail –∑–∞–ø—Ä–æ—Å–∞...**\n\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
	initialMsg.ParseMode = b.parseModeValue()

	sentMsg, err := b.s.Send(initialMsg)
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to send initial progress message: %v", err)
		b.sendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
		return
	}

	// –°–æ–∑–¥–∞–µ–º progress tracker
	progressTracker := NewProgressTracker(b, msg.Chat.ID, sentMsg.MessageID)

	ctx := context.Background()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	go func() {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Gmail workflow —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
		pageURL, err := b.gmailWorkflow.ProcessGmailSummaryRequestWithProgress(ctx, userQuery, progressTracker)
		if err != nil {
			log.Printf("‚ùå Gmail summary workflow failed: %v", err)
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
			errorMsg := fmt.Sprintf("‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Gmail –∑–∞–ø—Ä–æ—Å–∞**\n\n%s\n\nüìß **–ó–∞–ø—Ä–æ—Å:** %s", html.EscapeString(err.Error()), html.EscapeString(userQuery))
			editMsg := tgbotapi.NewEditMessageText(msg.Chat.ID, sentMsg.MessageID, errorMsg)
			editMsg.ParseMode = b.parseModeValue()
			if _, editErr := b.s.Send(editMsg); editErr != nil {
				log.Printf("‚ö†Ô∏è Failed to update error message: %v", editErr)
			}
			return
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		progressTracker.SetFinalResult(pageURL)

		log.Printf("‚úÖ Gmail summary completed successfully: %s", pageURL)
	}()
}

// handleDocumentValidation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∞—Ä—Ö–∏–≤–æ–≤
func (b *Bot) handleDocumentValidation(ctx context.Context, msg *tgbotapi.Message) {
	log.Printf("üîç Starting document validation for user %d, file: %s", msg.From.ID, msg.Document.FileName)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ code validation workflow
	if b.codeValidationWorkflow == nil {
		b.sendMessage(msg.Chat.ID, "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker.")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
	file, err := b.s.GetFile(tgbotapi.FileConfig{FileID: msg.Document.FileID})
	if err != nil {
		b.sendMessage(msg.Chat.ID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞: %v", err))
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
	initialMsg := tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("üîÑ **–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞...**\n\nüìÑ **–§–∞–π–ª:** %s\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...", msg.Document.FileName))
	initialMsg.ParseMode = b.parseModeValue()

	sentMsg, err := b.s.Send(initialMsg)
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to send initial document validation message: %v", err)
		b.sendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
		return
	}

	// –°–æ–∑–¥–∞–µ–º progress tracker
	progressTracker := codevalidation.NewCodeValidationProgressTracker(b, msg.Chat.ID, sentMsg.MessageID, msg.Document.FileName, "")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	go func() {
		// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª
		files, err := b.downloadAndProcessFile(file, msg.Document.FileName)
		if err != nil {
			log.Printf("‚ùå File processing failed: %v", err)
			errorMsg := fmt.Sprintf("‚ùå **–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞**\n\n%s\n\nüìÑ **–§–∞–π–ª:** %s", html.EscapeString(err.Error()), html.EscapeString(msg.Document.FileName))
			editMsg := tgbotapi.NewEditMessageText(msg.Chat.ID, sentMsg.MessageID, errorMsg)
			editMsg.ParseMode = b.parseModeValue()
			if _, editErr := b.s.Send(editMsg); editErr != nil {
				log.Printf("‚ö†Ô∏è Failed to update error message: %v", editErr)
			}
			return
		}

		// –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –∫ —Ñ–∞–π–ª—É
		var userQuestion string
		if msg.Caption != "" {
			log.Printf("üìù Document caption found: %s", msg.Caption)
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é DetectCodeInMessage –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
			hasCode, _, _, extractedQuestion, err := codevalidation.DetectCodeInMessage(ctx, b.llmClient, msg.Caption)
			if err != nil {
				log.Printf("‚ö†Ô∏è Failed to extract question from caption: %v", err)
			} else if extractedQuestion != "" {
				userQuestion = extractedQuestion
				log.Printf("‚ùì Extracted user question from document caption: %s", userQuestion)
			} else if !hasCode {
				// –ï—Å–ª–∏ –Ω–µ—Ç –∫–æ–¥–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, —Ç–æ –≤—Å—è caption –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ–ø—Ä–æ—Å–æ–º
				userQuestion = msg.Caption
				log.Printf("‚ùì Using entire caption as user question: %s", userQuestion)
			}
		}

		// –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
		if userQuestion == "" {
			userQuestion = "–û–ø–∏—à–∏ —ç—Ç–æ—Ç –ø—Ä–æ–µ–∫—Ç: –µ–≥–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É"
			log.Printf("üìã No user question found, using default project summary request")
		}

		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Code Validation workflow —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –≤–æ–ø—Ä–æ—Å–æ–º
		result, err := b.codeValidationWorkflow.ProcessProjectValidationWithQuestion(ctx, files, userQuestion, progressTracker)
		if err != nil {
			log.Printf("‚ùå Document validation workflow failed: %v", err)
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
			errorMsg := fmt.Sprintf("‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞**\n\n%s\n\nüìÑ **–§–∞–π–ª:** %s", html.EscapeString(err.Error()), html.EscapeString(msg.Document.FileName))
			editMsg := tgbotapi.NewEditMessageText(msg.Chat.ID, sentMsg.MessageID, errorMsg)
			editMsg.ParseMode = b.parseModeValue()
			if _, editErr := b.s.Send(editMsg); editErr != nil {
				log.Printf("‚ö†Ô∏è Failed to update error message: %v", editErr)
			}
			return
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		progressTracker.SetFinalResult(result)

		log.Printf("‚úÖ Document validation completed successfully for: %s", msg.Document.FileName)
	}()
}

// handleCodeValidation –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–æ–¥–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
func (b *Bot) handleCodeValidation(ctx context.Context, msg *tgbotapi.Message, code, filename, userQuestion string) {
	log.Printf("üîç Starting code validation for user %d", msg.From.ID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ code validation workflow
	if b.codeValidationWorkflow == nil {
		b.sendMessage(msg.Chat.ID, "‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Docker.")
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
	initialMsg := tgbotapi.NewMessage(msg.Chat.ID, "üîÑ **–ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞...**\n\n‚è≥ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...")
	initialMsg.ParseMode = b.parseModeValue()

	sentMsg, err := b.s.Send(initialMsg)
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to send initial code validation message: %v", err)
		b.sendMessage(msg.Chat.ID, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
		return
	}

	// –°–æ–∑–¥–∞–µ–º progress tracker
	progressTracker := codevalidation.NewCodeValidationProgressTracker(b, msg.Chat.ID, sentMsg.MessageID, filename, "")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
	go func() {
		// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Code Validation workflow —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–æ–º
		files := map[string]string{filename: code}
		result, err := b.codeValidationWorkflow.ProcessProjectValidationWithQuestion(ctx, files, userQuestion, progressTracker)
		if err != nil {
			log.Printf("‚ùå Code validation workflow failed: %v", err)
			// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
			errorMsg := fmt.Sprintf("‚ùå **–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞**\n\n%s\n\nüìÑ **–§–∞–π–ª:** %s", html.EscapeString(err.Error()), html.EscapeString(filename))
			editMsg := tgbotapi.NewEditMessageText(msg.Chat.ID, sentMsg.MessageID, errorMsg)
			editMsg.ParseMode = b.parseModeValue()
			if _, editErr := b.s.Send(editMsg); editErr != nil {
				log.Printf("‚ö†Ô∏è Failed to update error message: %v", editErr)
			}
			return
		}

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
		progressTracker.SetFinalResult(result)

		log.Printf("‚úÖ Code validation completed successfully for: %s", filename)
	}()
}

// downloadAndProcessFile —Å–∫–∞—á–∏–≤–∞–µ—Ç —Ñ–∞–π–ª –æ—Ç Telegram –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ (–≤–∫–ª—é—á–∞—è –∞—Ä—Ö–∏–≤—ã)
func (b *Bot) downloadAndProcessFile(file tgbotapi.File, filename string) (map[string]string, error) {
	log.Printf("üì• Downloading file: %s", filename)

	// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
	fileURL := file.Link(b.api.Token)
	resp, err := http.Get(fileURL)
	if err != nil {
		return nil, fmt.Errorf("failed to download file: %w", err)
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç —Ñ–∞–π–ª–∞ –≤ –ø–∞–º—è—Ç—å
	content, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read file content: %w", err)
	}

	log.Printf("üìÅ Processing file: %s, size: %d bytes", filename, len(content))

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
	ext := strings.ToLower(filepath.Ext(filename))

	switch ext {
	case ".zip":
		return b.processZipArchive(content, filename)
	case ".tar":
		return b.processTarArchive(content, filename)
	case ".gz":
		if strings.HasSuffix(strings.ToLower(filename), ".tar.gz") {
			return b.processTarGzArchive(content, filename)
		}
		fallthrough
	default:
		// –û–±—ã—á–Ω—ã–π —Ñ–∞–π–ª - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
		return map[string]string{filename: string(content)}, nil
	}
}

// processZipArchive –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤—ã
func (b *Bot) processZipArchive(data []byte, filename string) (map[string]string, error) {
	log.Printf("üì¶ Processing ZIP archive: %s", filename)

	// –°–æ–∑–¥–∞–µ–º reader –¥–ª—è zip –¥–∞–Ω–Ω—ã—Ö
	reader, err := zip.NewReader(bytes.NewReader(data), int64(len(data)))
	if err != nil {
		return nil, fmt.Errorf("failed to read ZIP archive: %w", err)
	}

	files := make(map[string]string)
	maxFiles := 50 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	fileCount := 0

	for _, f := range reader.File {
		if fileCount >= maxFiles {
			log.Printf("‚ö†Ô∏è ZIP archive contains too many files, limiting to %d", maxFiles)
			break
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
		if f.FileInfo().IsDir() || strings.HasPrefix(filepath.Base(f.Name), ".") {
			continue
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
		if f.UncompressedSize64 > 1024*1024 { // 1MB limit
			log.Printf("‚ö†Ô∏è Skipping large file: %s (%d bytes)", f.Name, f.UncompressedSize64)
			continue
		}

		// –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
		rc, err := f.Open()
		if err != nil {
			log.Printf("‚ö†Ô∏è Failed to open file %s in ZIP: %v", f.Name, err)
			continue
		}

		content, err := io.ReadAll(rc)
		rc.Close()
		if err != nil {
			log.Printf("‚ö†Ô∏è Failed to read file %s in ZIP: %v", f.Name, err)
			continue
		}
		log.Printf("‚ÑπÔ∏è Extracted file %s", f.Name)

		files[f.Name] = string(content)
		fileCount++
	}

	log.Printf("‚úÖ Extracted %d files from ZIP archive", fileCount)
	return files, nil
}

// processTarArchive –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç TAR –∞—Ä—Ö–∏–≤—ã
func (b *Bot) processTarArchive(data []byte, filename string) (map[string]string, error) {
	log.Printf("üì¶ Processing TAR archive: %s", filename)

	reader := tar.NewReader(bytes.NewReader(data))
	files := make(map[string]string)
	maxFiles := 50 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	fileCount := 0

	for {
		if fileCount >= maxFiles {
			log.Printf("‚ö†Ô∏è TAR archive contains too many files, limiting to %d", maxFiles)
			break
		}

		header, err := reader.Next()
		if err == io.EOF {
			break
		}
		if err != nil {
			return nil, fmt.Errorf("failed to read TAR entry: %w", err)
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã
		if header.Typeflag == tar.TypeDir || strings.HasPrefix(filepath.Base(header.Name), ".") {
			continue
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
		if header.Size > 1024*1024 { // 1MB limit
			log.Printf("‚ö†Ô∏è Skipping large file: %s (%d bytes)", header.Name, header.Size)
			continue
		}

		content, err := io.ReadAll(reader)
		if err != nil {
			log.Printf("‚ö†Ô∏è Failed to read file %s in TAR: %v", header.Name, err)
			continue
		}

		files[header.Name] = string(content)
		fileCount++
	}

	log.Printf("‚úÖ Extracted %d files from TAR archive", fileCount)
	return files, nil
}

// processTarGzArchive –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç TAR.GZ –∞—Ä—Ö–∏–≤—ã
func (b *Bot) processTarGzArchive(data []byte, filename string) (map[string]string, error) {
	log.Printf("üì¶ Processing TAR.GZ archive: %s", filename)

	// –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º gzip
	gzipReader, err := gzip.NewReader(bytes.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("failed to create gzip reader: %w", err)
	}
	defer gzipReader.Close()

	// –ß–∏—Ç–∞–µ–º —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	uncompressedData, err := io.ReadAll(gzipReader)
	if err != nil {
		return nil, fmt.Errorf("failed to read gzip data: %w", err)
	}

	// –¢–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π TAR
	return b.processTarArchive(uncompressedData, filename)
}
