package codevalidation

import (
	"archive/tar"
	"bytes"
	"context"
	"fmt"
	"log"
	"os/exec"
	"path/filepath"
	"strings"
)

// DockerManager –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
type DockerManager interface {
	CreateContainer(ctx context.Context, analysis *CodeAnalysisResult) (string, error)
	CopyCodeToContainer(ctx context.Context, containerID, code, filename string) error
	CopyFilesToContainer(ctx context.Context, containerID string, files map[string]string) error
	InstallDependencies(ctx context.Context, containerID string, analysis *CodeAnalysisResult) error
	ExecuteValidation(ctx context.Context, containerID string, analysis *CodeAnalysisResult) (*ValidationResult, error)
	RemoveContainer(ctx context.Context, containerID string) error
}

// DockerClient —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è DockerManager —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker CLI
type DockerClient struct {
	dockerPath string
}

// NewDockerClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Docker client
func NewDockerClient() (*DockerClient, error) {
	log.Printf("üê≥ Initializing Docker client")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
	dockerPath, err := exec.LookPath("docker")
	if err != nil {
		return nil, fmt.Errorf("docker not found in PATH: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç
	cmd := exec.Command(dockerPath, "version")
	if err := cmd.Run(); err != nil {
		return nil, fmt.Errorf("docker is not running or not accessible: %w", err)
	}

	return &DockerClient{
		dockerPath: dockerPath,
	}, nil
}

// NewMockDockerClient —Å–æ–∑–¥–∞–µ—Ç mock –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
func NewMockDockerClient() DockerManager {
	log.Printf("üîß Initializing mock Docker client (Docker not available)")
	return &MockDockerClient{}
}

// MockDockerClient —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è DockerManager –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Docker
type MockDockerClient struct{}

func (m *MockDockerClient) CreateContainer(ctx context.Context, analysis *CodeAnalysisResult) (string, error) {
	log.Printf("üîß Mock: Creating container with image %s", analysis.DockerImage)
	return "mock-container-id", nil
}

func (m *MockDockerClient) CopyCodeToContainer(ctx context.Context, containerID, code, filename string) error {
	log.Printf("üîß Mock: Copying code %s to container", filename)
	return nil
}

func (m *MockDockerClient) CopyFilesToContainer(ctx context.Context, containerID string, files map[string]string) error {
	log.Printf("üîß Mock: Copying %d files to container", len(files))
	return nil
}

func (m *MockDockerClient) InstallDependencies(ctx context.Context, containerID string, analysis *CodeAnalysisResult) error {
	log.Printf("üîß Mock: Installing dependencies: %v", analysis.InstallCommands)
	return nil
}

func (m *MockDockerClient) ExecuteValidation(ctx context.Context, containerID string, analysis *CodeAnalysisResult) (*ValidationResult, error) {
	log.Printf("üîß Mock: Executing validation commands: %v", analysis.Commands)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
	return &ValidationResult{
		Success:  true,
		Output:   "Mock validation completed - Docker is not available for actual execution",
		Errors:   []string{},
		Warnings: []string{"Code validation completed in mock mode (Docker not available)"},
		ExitCode: 0,
		Duration: "0.5s",
		Suggestions: []string{
			"Install Docker to enable real code validation",
			"Code analysis was performed but not executed",
			"Consider setting up Docker for full validation capabilities",
		},
		// –ù–æ–≤—ã–µ –ø–æ–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –Ω–æ –ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ –≤ mock —Ä–µ–∂–∏–º–µ
		UserQuestion:   "",
		QuestionAnswer: "",
		ErrorAnalysis:  "",
		RetryAttempt:   0,
		BuildProblems:  []string{},
		CodeProblems:   []string{},
		TotalTokens:    0, // –í mock —Ä–µ–∂–∏–º–µ —Ç–æ–∫–µ–Ω—ã –Ω–µ —Ç—Ä–∞—Ç—è—Ç—Å—è
	}, nil
}

func (m *MockDockerClient) RemoveContainer(ctx context.Context, containerID string) error {
	log.Printf("üîß Mock: Removing container %s", containerID)
	return nil
}

// CreateContainer —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
func (d *DockerClient) CreateContainer(ctx context.Context, analysis *CodeAnalysisResult) (string, error) {
	log.Printf("üê≥ Creating Docker container with image: %s", analysis.DockerImage)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–µ—Ç–µ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏ VibeCoding MCP —Å–µ—Ä–≤–µ—Ä–æ–º
	cmd := exec.CommandContext(ctx, d.dockerPath, "run", "-d", "-i",
		"--workdir=/workspace",
		"--network=host",  // –ò—Å–ø–æ–ª—å–∑—É–µ–º host —Å–µ—Ç—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
		"--dns=8.8.8.8",   // –î–æ–±–∞–≤–ª—è–µ–º Google DNS
		"--dns=8.8.4.4",   // –†–µ–∑–µ—Ä–≤–Ω—ã–π DNS
		"-p", "8080:8080", // –ü–æ—Ä—Ç –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
		"-p", "8090:8090", // –ü–æ—Ä—Ç –¥–ª—è VibeCoding MCP —Å–µ—Ä–≤–µ—Ä–∞
		"-e", "DEBIAN_FRONTEND=noninteractive",
		"-v", "/tmp/vibecoding-mcp:/tmp/vibecoding-mcp", // –ú–æ–Ω—Ç–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è MCP —Å–æ–∫–µ—Ç–æ–≤
		analysis.DockerImage, "sh")

	log.Printf("üîß Docker command: %s", cmd.String())

	output, err := cmd.Output()
	if err != nil {
		// –ü–æ–ª—É—á–∞–µ–º stderr –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
		if exitError, ok := err.(*exec.ExitError); ok {
			stderr := string(exitError.Stderr)
			log.Printf("‚ùå Docker command failed with stderr: %s", stderr)
			return "", fmt.Errorf("failed to create container: %w (stderr: %s)", err, stderr)
		}
		return "", fmt.Errorf("failed to create container: %w", err)
	}

	containerID := strings.TrimSpace(string(output))
	log.Printf("‚úÖ Container created and started: %s", containerID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
	if err := d.verifyNetworkAccess(ctx, containerID); err != nil {
		log.Printf("‚ö†Ô∏è Network connectivity check failed: %v", err)
	}

	return containerID, nil
}

// CopyCodeToContainer –∫–æ–ø–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
func (d *DockerClient) CopyCodeToContainer(ctx context.Context, containerID, code, filename string) error {
	log.Printf("üìã Copying code to container %s as %s", containerID, filename)

	return d.CopyFilesToContainer(ctx, containerID, map[string]string{
		filename: code,
	})
}

// CopyFilesToContainer –∫–æ–ø–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
func (d *DockerClient) CopyFilesToContainer(ctx context.Context, containerID string, files map[string]string) error {
	log.Printf("üìã Copying %d files to container %s", len(files), containerID)

	// –û—Ç–ª–∞–¥–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –∫–æ–ø–∏—Ä—É–µ–º
	for filename, content := range files {
		log.Printf("üîç File to copy: %s (size: %d bytes)", filename, len(content))
	}

	tarBuffer := &bytes.Buffer{}
	tw := tar.NewWriter(tarBuffer)

	for filename, content := range files {
		header := &tar.Header{
			Name: filename,
			Mode: 0644,
			Size: int64(len(content)),
		}

		if err := tw.WriteHeader(header); err != nil {
			return fmt.Errorf("failed to write tar header for %s: %w", filename, err)
		}

		if _, err := tw.Write([]byte(content)); err != nil {
			return fmt.Errorf("failed to write file content for %s: %w", filename, err)
		}
	}

	tw.Close()

	log.Printf("üì¶ Created TAR archive with size: %d bytes", tarBuffer.Len())

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º docker cp –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
	cmd := exec.CommandContext(ctx, d.dockerPath, "cp", "-", containerID+":/workspace")
	cmd.Stdin = tarBuffer

	output, err := cmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ùå Docker cp command failed: %v", err)
		log.Printf("‚ùå Docker cp output: %s", string(output))
		return fmt.Errorf("failed to copy files to container: %w", err)
	}

	if len(output) > 0 {
		log.Printf("üìã Docker cp output: %s", string(output))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã
	if err := d.verifyFilesCopied(ctx, containerID, files); err != nil {
		log.Printf("‚ö†Ô∏è File verification failed: %v", err)
		// –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
	}

	log.Printf("‚úÖ Files copied successfully")
	return nil
}

// verifyFilesCopied –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —Ñ–∞–π–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
func (d *DockerClient) verifyFilesCopied(ctx context.Context, containerID string, files map[string]string) error {
	log.Printf("üîç Verifying files were copied to container")

	for filename := range files {
		filePath := fmt.Sprintf("/workspace/%s", filename)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
		checkCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "test", "-f", filePath)
		if err := checkCmd.Run(); err != nil {
			return fmt.Errorf("file %s not found in container at %s", filename, filePath)
		}

		// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
		sizeCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "wc", "-c", filePath)
		output, err := sizeCmd.CombinedOutput()
		if err != nil {
			log.Printf("‚ö†Ô∏è Could not get size for %s: %v", filePath, err)
		} else {
			log.Printf("‚úÖ File %s exists in container, size: %s", filename, strings.TrimSpace(string(output)))
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É /workspace –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
	d.showWorkspaceTree(ctx, containerID)

	return nil
}

// detectProjectRoot –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
func (d *DockerClient) detectProjectRoot(ctx context.Context, containerID string) string {
	workspaceBase := "/workspace"

	// 1. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ /workspace
	findCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "find", workspaceBase, "-type", "f", "-o", "-type", "d")
	output, err := findCmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ö†Ô∏è Failed to analyze workspace structure: %v", err)
		return workspaceBase
	}

	lines := strings.Split(strings.TrimSpace(string(output)), "\n")
	log.Printf("üìÅ Found %d items in workspace", len(lines))

	// 2. –ò—â–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–æ–≤
	projectMarkers := []string{
		"build.gradle", "build.gradle.kts", "pom.xml", "package.json",
		"requirements.txt", "go.mod", "Cargo.toml", "CMakeLists.txt",
		"gradlew", "mvnw", "composer.json", "pyproject.toml",
	}

	projectRoots := make(map[string]int)

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" || line == workspaceBase {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø—É—Ç—å –º–∞—Ä–∫–µ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
		fileName := strings.ToLower(filepath.Base(line))
		for _, marker := range projectMarkers {
			if fileName == marker {
				// –ü–æ–ª—É—á–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —ç—Ç–æ—Ç —Ñ–∞–π–ª
				dir := filepath.Dir(line)
				projectRoots[dir]++
				log.Printf("üéØ Found project marker %s in %s", marker, dir)
			}
		}
	}

	// 3. –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø—Ä–æ–µ–∫—Ç–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã, –≤—ã–±–∏—Ä–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –º–∞—Ä–∫–µ—Ä–æ–≤
	if len(projectRoots) > 0 {
		bestRoot := workspaceBase
		maxMarkers := 0

		for root, count := range projectRoots {
			if count > maxMarkers || (count == maxMarkers && len(root) > len(bestRoot)) {
				bestRoot = root
				maxMarkers = count
			}
		}

		log.Printf("üèÜ Selected project root: %s (with %d markers)", bestRoot, maxMarkers)
		return bestRoot
	}

	// 4. –ï—Å–ª–∏ –º–∞—Ä–∫–µ—Ä–æ–≤ –Ω–µ—Ç, –∏—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –æ–±—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
	sourceDirs := make(map[string]int)
	sourceExts := []string{".java", ".kt", ".py", ".js", ".ts", ".go", ".cpp", ".c", ".rs"}

	for _, line := range lines {
		line = strings.TrimSpace(line)
		if line == "" || line == workspaceBase {
			continue
		}

		ext := strings.ToLower(filepath.Ext(line))
		for _, sourceExt := range sourceExts {
			if ext == sourceExt {
				dir := filepath.Dir(line)
				sourceDirs[dir]++
				break
			}
		}
	}

	if len(sourceDirs) > 0 {
		// –ò—â–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –æ–±—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é (shortest path —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤)
		bestDir := workspaceBase
		maxFiles := 0

		for dir, count := range sourceDirs {
			// –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∞–π–ª–æ–≤, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –≥–ª—É–±–æ–∫–∏–µ
			score := count - strings.Count(strings.TrimPrefix(dir, workspaceBase), "/")
			currentScore := maxFiles - strings.Count(strings.TrimPrefix(bestDir, workspaceBase), "/")

			if score > currentScore {
				bestDir = dir
				maxFiles = count
			}
		}

		log.Printf("üìÇ Selected source directory: %s (with %d source files)", bestDir, maxFiles)
		return bestDir
	}

	log.Printf("ü§∑ No project structure detected, using workspace root: %s", workspaceBase)
	return workspaceBase
}

// showWorkspaceTree –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ /workspace
func (d *DockerClient) showWorkspaceTree(ctx context.Context, containerID string) {
	log.Printf("üå≥ Displaying workspace tree structure")

	// –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å tree –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
	treeCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "tree", "/workspace", "-a", "-L", "4")
	if output, err := treeCmd.CombinedOutput(); err == nil {
		log.Printf("üìÅ /workspace tree structure:\n%s", string(output))
		return
	}

	// Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º find –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
	log.Printf("üìÅ tree command not available, using find to create tree structure")

	findCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "find", "/workspace", "-type", "f", "-o", "-type", "d")
	output, err := findCmd.CombinedOutput()
	if err != nil {
		log.Printf("‚ö†Ô∏è Could not list /workspace with find: %v", err)
		// Fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π ls
		d.fallbackListWorkspace(ctx, containerID)
		return
	}

	// –ü–∞—Ä—Å–∏–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ find –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
	lines := strings.Split(strings.TrimSpace(string(output)), "\n")
	tree := d.buildTreeFromPaths(lines)
	log.Printf("üìÅ /workspace tree structure:\n%s", tree)
}

// fallbackListWorkspace –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ tree –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
func (d *DockerClient) fallbackListWorkspace(ctx context.Context, containerID string) {
	listCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "ls", "-la", "/workspace")
	if output, err := listCmd.CombinedOutput(); err != nil {
		log.Printf("‚ö†Ô∏è Could not list /workspace: %v", err)
	} else {
		log.Printf("üìÅ /workspace contents (fallback):\n%s", string(output))
	}
}

// TreeNode –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É–∑–µ–ª –≤ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
type TreeNode struct {
	Name     string
	IsDir    bool
	Children map[string]*TreeNode
	Level    int
}

// buildTreeFromPaths —Å—Ç—Ä–æ–∏—Ç –¥—Ä–µ–≤–æ–≤–∏–¥–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π
func (d *DockerClient) buildTreeFromPaths(paths []string) string {
	if len(paths) == 0 {
		return "No files found in /workspace"
	}

	root := &TreeNode{
		Name:     "/workspace",
		IsDir:    true,
		Children: make(map[string]*TreeNode),
		Level:    0,
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—É—Ç–∏ –≤ –¥–µ—Ä–µ–≤–æ
	for _, path := range paths {
		path = strings.TrimSpace(path)
		if path == "" || path == "/workspace" {
			continue
		}

		// –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å /workspace/
		relativePath := strings.TrimPrefix(path, "/workspace/")
		if relativePath == "" {
			continue
		}

		parts := strings.Split(relativePath, "/")
		current := root

		// –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –ø—É—Ç–∏
		for i, part := range parts {
			if part == "" {
				continue
			}

			if current.Children[part] == nil {
				current.Children[part] = &TreeNode{
					Name:     part,
					IsDir:    i < len(parts)-1 || strings.HasSuffix(path, "/"), // –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –µ—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
					Children: make(map[string]*TreeNode),
					Level:    current.Level + 1,
				}
			}
			current = current.Children[part]
		}
	}

	// –†–µ–Ω–¥–µ—Ä–∏–º –¥–µ—Ä–µ–≤–æ
	var result strings.Builder
	result.WriteString("/workspace\n")
	d.renderTreeNode(root, "", true, &result)
	return result.String()
}

// renderTreeNode —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç —É–∑–µ–ª –¥–µ—Ä–µ–≤–∞
func (d *DockerClient) renderTreeNode(node *TreeNode, prefix string, isLast bool, result *strings.Builder) {
	// –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–µ—Ç–µ–π: —Å–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã, –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø
	type SortableChild struct {
		Name string
		Node *TreeNode
	}

	var children []SortableChild
	for name, child := range node.Children {
		children = append(children, SortableChild{Name: name, Node: child})
	}

	// –°–æ—Ä—Ç–∏—Ä—É–µ–º: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–Ω–∞—á–∞–ª–∞, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã, –≤–Ω—É—Ç—Ä–∏ –≥—Ä—É–ø–ø –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
	for i := 0; i < len(children)-1; i++ {
		for j := i + 1; j < len(children); j++ {
			a, b := children[i], children[j]

			// –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
			if a.Node.IsDir && !b.Node.IsDir {
				continue // a —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ
			}
			if !a.Node.IsDir && b.Node.IsDir {
				children[i], children[j] = children[j], children[i]
				continue
			}

			// –í–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–ª–∏ —Ñ–∞–π–ª—ã) —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
			if strings.ToLower(a.Name) > strings.ToLower(b.Name) {
				children[i], children[j] = children[j], children[i]
			}
		}
	}

	// –†–µ–Ω–¥–µ—Ä–∏–º –¥–µ—Ç–µ–π
	for i, child := range children {
		isLastChild := i == len(children)-1

		// –í—ã–±–∏—Ä–∞–µ–º —Å–∏–º–≤–æ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
		var connector, childPrefix string
		if isLastChild {
			connector = "‚îî‚îÄ‚îÄ "
			childPrefix = prefix + "    "
		} else {
			connector = "‚îú‚îÄ‚îÄ "
			childPrefix = prefix + "‚îÇ   "
		}

		// –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
		icon := "üìÑ"
		if child.Node.IsDir {
			icon = "üìÅ"
		} else {
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
			ext := strings.ToLower(filepath.Ext(child.Name))
			switch ext {
			case ".py":
				icon = "üêç"
			case ".js", ".ts":
				icon = "‚ö°"
			case ".go":
				icon = "üêπ"
			case ".java":
				icon = "‚òï"
			case ".cpp", ".c", ".h":
				icon = "‚öôÔ∏è"
			case ".rs":
				icon = "ü¶Ä"
			case ".json":
				icon = "üìã"
			case ".md":
				icon = "üìù"
			case ".txt":
				icon = "üìÑ"
			case ".yml", ".yaml":
				icon = "‚öôÔ∏è"
			case ".xml":
				icon = "üè∑Ô∏è"
			default:
				icon = "üìÑ"
			}
		}

		result.WriteString(prefix + connector + icon + " " + child.Name)
		if child.Node.IsDir {
			result.WriteString("/")
		}
		result.WriteString("\n")

		// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
		if len(child.Node.Children) > 0 {
			d.renderTreeNode(child.Node, childPrefix, isLastChild, result)
		}
	}
}

// getWorkingDirectory –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∫–æ–º–∞–Ω–¥
func (d *DockerClient) getWorkingDirectory(ctx context.Context, containerID string, analysis *CodeAnalysisResult) string {
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ LLM –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π
	detectedRoot := d.detectProjectRoot(ctx, containerID)

	// –ï—Å–ª–∏ LLM —É–∫–∞–∑–∞–ª–∞ working_dir, –ø—Ä–æ–≤–µ—Ä–∏–º –µ—ë, –Ω–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
	if analysis.WorkingDir != "" {
		workspaceBase := "/workspace"
		targetDir := fmt.Sprintf("%s/%s", workspaceBase, analysis.WorkingDir)

		checkCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "test", "-d", targetDir)
		if err := checkCmd.Run(); err != nil {
			log.Printf("‚ö†Ô∏è LLM suggested directory %s does not exist, using detected: %s", targetDir, detectedRoot)
		} else {
			log.Printf("‚úÖ LLM suggested directory %s exists, but using auto-detected: %s", targetDir, detectedRoot)
		}
	}

	return detectedRoot
}

// InstallDependencies —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
func (d *DockerClient) InstallDependencies(ctx context.Context, containerID string, analysis *CodeAnalysisResult) error {
	log.Printf("üì¶ Installing dependencies in container %s", containerID)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	if len(analysis.InstallCommands) == 0 {
		log.Printf("üì¶ No installation commands provided")
		return nil
	}

	workingDir := d.getWorkingDirectory(ctx, containerID, analysis)

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
	for i, cmd := range analysis.InstallCommands {
		log.Printf("üì¶ Running install command %d/%d: %s", i+1, len(analysis.InstallCommands), cmd)

		execCmd := exec.CommandContext(ctx, d.dockerPath, "exec", "-w", workingDir, containerID, "sh", "-c", cmd)
		output, err := execCmd.CombinedOutput()
		if err != nil {
			log.Printf("‚ùå Install command failed: %s", string(output))

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ —ç—Ç–æ —Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
			outputStr := string(output)
			if d.isNetworkError(outputStr) {
				log.Printf("üåê Detected network connectivity issue, running diagnostics...")
				d.diagnoseNetworkIssues(ctx, containerID)
			}

			return fmt.Errorf("install command '%s' failed: %w\nOutput: %s", cmd, err, outputStr)
		}

		log.Printf("üì¶ Install command output: %s", string(output))
	}

	log.Printf("‚úÖ All installation commands completed successfully")
	return nil
}

// ExecuteValidation –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
func (d *DockerClient) ExecuteValidation(ctx context.Context, containerID string, analysis *CodeAnalysisResult) (*ValidationResult, error) {
	log.Printf("‚ö° Executing validation commands in container %s", containerID)

	workingDir := d.getWorkingDirectory(ctx, containerID, analysis)

	result := &ValidationResult{
		Success:  true,
		Output:   "",
		Errors:   []string{},
		Warnings: []string{},
		ExitCode: 0,
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	for i, cmd := range analysis.Commands {
		log.Printf("‚ö° Running command %d/%d: %s", i+1, len(analysis.Commands), cmd)

		execCmd := exec.CommandContext(ctx, d.dockerPath, "exec", "-w", workingDir, containerID, "sh", "-c", cmd)
		output, err := execCmd.CombinedOutput()

		commandOutput := string(output)
		result.Output += fmt.Sprintf("=== Command: %s ===\n%s\n\n", cmd, commandOutput)

		if err != nil {
			if exitErr, ok := err.(*exec.ExitError); ok {
				result.ExitCode = exitErr.ExitCode()
			} else {
				result.ExitCode = 1
			}
			result.Success = false
			result.Errors = append(result.Errors, fmt.Sprintf("Command '%s' failed: %v", cmd, err))
		}
	}

	if result.Success {
		log.Printf("‚úÖ All validation commands completed successfully")
		result.Suggestions = []string{
			"Code validation passed all checks",
			"Consider adding more comprehensive tests",
			"Ensure proper error handling is implemented",
		}
	} else {
		log.Printf("‚ùå Some validation commands failed")
	}

	return result, nil
}

// RemoveContainer —É–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
func (d *DockerClient) RemoveContainer(ctx context.Context, containerID string) error {
	log.Printf("üóëÔ∏è Removing container: %s", containerID)

	cmd := exec.CommandContext(ctx, d.dockerPath, "rm", "-f", containerID)
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to remove container: %w", err)
	}

	log.Printf("‚úÖ Container removed: %s", containerID)
	return nil
}

// verifyNetworkAccess –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–µ—Ç–µ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
func (d *DockerClient) verifyNetworkAccess(ctx context.Context, containerID string) error {
	log.Printf("üåê Checking network connectivity in container %s", containerID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º DNS —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
	dnsCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "nslookup", "google.com")
	if err := dnsCmd.Run(); err != nil {
		log.Printf("‚ùå DNS resolution failed: %v", err)

		// –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π DNS
		dnsTestCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "nslookup", "8.8.8.8")
		if err := dnsTestCmd.Run(); err != nil {
			return fmt.Errorf("DNS resolution completely failed: %w", err)
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	httpCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "sh", "-c",
		"command -v wget >/dev/null 2>&1 && wget -q --spider https://google.com --timeout=10 || "+
			"command -v curl >/dev/null 2>&1 && curl -s --max-time 10 https://google.com >/dev/null || "+
			"echo 'No wget/curl available for HTTP test'")

	if err := httpCmd.Run(); err != nil {
		log.Printf("‚ö†Ô∏è HTTP connectivity test failed: %v", err)
		return fmt.Errorf("HTTP connectivity failed: %w", err)
	}

	log.Printf("‚úÖ Network connectivity verified")
	return nil
}

// isNetworkError –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤—ã–≤–æ–¥ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
func (d *DockerClient) isNetworkError(output string) bool {
	networkErrorPatterns := []string{
		"Failed to establish a new connection",
		"Temporary failure in name resolution",
		"network is unreachable",
		"Connection timed out",
		"Could not resolve host",
		"dial tcp: lookup",
		"connection broken",
		"NewConnectionError",
		"proxy.golang.org",
		"pypi.org",
		"registry.npmjs.org",
	}

	outputLower := strings.ToLower(output)
	for _, pattern := range networkErrorPatterns {
		if strings.Contains(outputLower, strings.ToLower(pattern)) {
			return true
		}
	}
	return false
}

// diagnoseNetworkIssues –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
func (d *DockerClient) diagnoseNetworkIssues(ctx context.Context, containerID string) {
	log.Printf("üîç Running network diagnostics for container %s", containerID)

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤
	ifCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "ip", "addr", "show")
	if output, err := ifCmd.CombinedOutput(); err == nil {
		log.Printf("üì° Network interfaces:\n%s", string(output))
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
	routeCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "ip", "route", "show")
	if output, err := routeCmd.CombinedOutput(); err == nil {
		log.Printf("üó∫Ô∏è Routing table:\n%s", string(output))
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –Ω–∞—Å—Ç—Ä–æ–µ–∫
	resolvCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "cat", "/etc/resolv.conf")
	if output, err := resolvCmd.CombinedOutput(); err == nil {
		log.Printf("üåê DNS configuration:\n%s", string(output))
	}

	// –¢–µ—Å—Ç ping –∫ –≤–Ω–µ—à–Ω–∏–º –∞–¥—Ä–µ—Å–∞–º
	pingCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "ping", "-c", "2", "8.8.8.8")
	if err := pingCmd.Run(); err != nil {
		log.Printf("‚ùå Cannot ping 8.8.8.8: %v", err)
	} else {
		log.Printf("‚úÖ Can ping 8.8.8.8")
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤
	tcpCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "sh", "-c",
		"timeout 5 bash -c '</dev/tcp/8.8.8.8/53' && echo 'Port 53 accessible' || echo 'Port 53 not accessible'")
	if output, err := tcpCmd.CombinedOutput(); err == nil {
		log.Printf("üîå TCP connectivity test: %s", strings.TrimSpace(string(output)))
	}
}
