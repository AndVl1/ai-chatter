package codevalidation

import (
	"archive/tar"
	"bytes"
	"context"
	"fmt"
	"log"
	"os/exec"
	"strings"
)

// DockerManager –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞–º–∏
type DockerManager interface {
	CreateContainer(ctx context.Context, analysis *CodeAnalysisResult) (string, error)
	CopyCodeToContainer(ctx context.Context, containerID, code, filename string) error
	CopyFilesToContainer(ctx context.Context, containerID string, files map[string]string) error
	InstallDependencies(ctx context.Context, containerID string, analysis *CodeAnalysisResult) error
	ExecuteValidation(ctx context.Context, containerID string, analysis *CodeAnalysisResult) (*ValidationResult, error)
	RemoveContainer(ctx context.Context, containerID string) error
}

// DockerClient —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è DockerManager —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Docker CLI
type DockerClient struct {
	dockerPath string
}

// NewDockerClient —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π Docker client
func NewDockerClient() (*DockerClient, error) {
	log.Printf("üê≥ Initializing Docker client")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Docker
	dockerPath, err := exec.LookPath("docker")
	if err != nil {
		return nil, fmt.Errorf("docker not found in PATH: %w", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ Docker —Ä–∞–±–æ—Ç–∞–µ—Ç
	cmd := exec.Command(dockerPath, "version")
	if err := cmd.Run(); err != nil {
		return nil, fmt.Errorf("docker is not running or not accessible: %w", err)
	}

	return &DockerClient{
		dockerPath: dockerPath,
	}, nil
}

// NewMockDockerClient —Å–æ–∑–¥–∞–µ—Ç mock –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ Docker –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
func NewMockDockerClient() DockerManager {
	log.Printf("üîß Initializing mock Docker client (Docker not available)")
	return &MockDockerClient{}
}

// MockDockerClient —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è DockerManager –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ Docker
type MockDockerClient struct{}

func (m *MockDockerClient) CreateContainer(ctx context.Context, analysis *CodeAnalysisResult) (string, error) {
	log.Printf("üîß Mock: Creating container with image %s", analysis.DockerImage)
	return "mock-container-id", nil
}

func (m *MockDockerClient) CopyCodeToContainer(ctx context.Context, containerID, code, filename string) error {
	log.Printf("üîß Mock: Copying code %s to container", filename)
	return nil
}

func (m *MockDockerClient) CopyFilesToContainer(ctx context.Context, containerID string, files map[string]string) error {
	log.Printf("üîß Mock: Copying %d files to container", len(files))
	return nil
}

func (m *MockDockerClient) InstallDependencies(ctx context.Context, containerID string, analysis *CodeAnalysisResult) error {
	log.Printf("üîß Mock: Installing dependencies: %v", analysis.InstallCommands)
	return nil
}

func (m *MockDockerClient) ExecuteValidation(ctx context.Context, containerID string, analysis *CodeAnalysisResult) (*ValidationResult, error) {
	log.Printf("üîß Mock: Executing validation commands: %v", analysis.Commands)

	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º mock —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
	return &ValidationResult{
		Success:  true,
		Output:   "Mock validation completed - Docker is not available for actual execution",
		Errors:   []string{},
		Warnings: []string{"Code validation completed in mock mode (Docker not available)"},
		ExitCode: 0,
		Duration: "0.5s",
		Suggestions: []string{
			"Install Docker to enable real code validation",
			"Code analysis was performed but not executed",
			"Consider setting up Docker for full validation capabilities",
		},
		// –ù–æ–≤—ã–µ –ø–æ–ª—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –Ω–æ –ø–æ–∫–∞ –ø—É—Å—Ç—ã–µ –≤ mock —Ä–µ–∂–∏–º–µ
		UserQuestion:   "",
		QuestionAnswer: "",
		ErrorAnalysis:  "",
		RetryAttempt:   0,
		BuildProblems:  []string{},
		CodeProblems:   []string{},
	}, nil
}

func (m *MockDockerClient) RemoveContainer(ctx context.Context, containerID string) error {
	log.Printf("üîß Mock: Removing container %s", containerID)
	return nil
}

// CreateContainer —Å–æ–∑–¥–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
func (d *DockerClient) CreateContainer(ctx context.Context, analysis *CodeAnalysisResult) (string, error) {
	log.Printf("üê≥ Creating Docker container with image: %s", analysis.DockerImage)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
	cmd := exec.CommandContext(ctx, d.dockerPath, "run", "-d", "-i",
		"--workdir=/workspace",
		"-e", "DEBIAN_FRONTEND=noninteractive",
		analysis.DockerImage, "sh")

	output, err := cmd.Output()
	if err != nil {
		return "", fmt.Errorf("failed to create container: %w", err)
	}

	containerID := strings.TrimSpace(string(output))
	log.Printf("‚úÖ Container created and started: %s", containerID)
	return containerID, nil
}

// CopyCodeToContainer –∫–æ–ø–∏—Ä—É–µ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
func (d *DockerClient) CopyCodeToContainer(ctx context.Context, containerID, code, filename string) error {
	log.Printf("üìã Copying code to container %s as %s", containerID, filename)

	return d.CopyFilesToContainer(ctx, containerID, map[string]string{
		filename: code,
	})
}

// CopyFilesToContainer –∫–æ–ø–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
func (d *DockerClient) CopyFilesToContainer(ctx context.Context, containerID string, files map[string]string) error {
	log.Printf("üìã Copying %d files to container %s", len(files), containerID)

	tarBuffer := &bytes.Buffer{}
	tw := tar.NewWriter(tarBuffer)

	for filename, content := range files {
		header := &tar.Header{
			Name: filename,
			Mode: 0644,
			Size: int64(len(content)),
		}

		if err := tw.WriteHeader(header); err != nil {
			return fmt.Errorf("failed to write tar header for %s: %w", filename, err)
		}

		if _, err := tw.Write([]byte(content)); err != nil {
			return fmt.Errorf("failed to write file content for %s: %w", filename, err)
		}
	}

	tw.Close()

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º docker cp –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
	cmd := exec.CommandContext(ctx, d.dockerPath, "cp", "-", containerID+":/workspace")
	cmd.Stdin = tarBuffer

	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to copy files to container: %w", err)
	}

	log.Printf("‚úÖ Files copied successfully")
	return nil
}

// InstallDependencies —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
func (d *DockerClient) InstallDependencies(ctx context.Context, containerID string, analysis *CodeAnalysisResult) error {
	log.Printf("üì¶ Installing dependencies in container %s", containerID)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º LLM-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
	if len(analysis.InstallCommands) == 0 {
		log.Printf("üì¶ No installation commands provided")
		return nil
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É —É—Å—Ç–∞–Ω–æ–≤–∫–∏
	for i, cmd := range analysis.InstallCommands {
		log.Printf("üì¶ Running install command %d/%d: %s", i+1, len(analysis.InstallCommands), cmd)

		execCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "sh", "-c", cmd)
		output, err := execCmd.CombinedOutput()
		if err != nil {
			return fmt.Errorf("install command '%s' failed: %w\nOutput: %s", cmd, err, string(output))
		}

		log.Printf("üì¶ Install command output: %s", string(output))
	}

	log.Printf("‚úÖ All installation commands completed successfully")
	return nil
}

// ExecuteValidation –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
func (d *DockerClient) ExecuteValidation(ctx context.Context, containerID string, analysis *CodeAnalysisResult) (*ValidationResult, error) {
	log.Printf("‚ö° Executing validation commands in container %s", containerID)

	result := &ValidationResult{
		Success:  true,
		Output:   "",
		Errors:   []string{},
		Warnings: []string{},
		ExitCode: 0,
	}

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫–æ–º–∞–Ω–¥—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏
	for i, cmd := range analysis.Commands {
		log.Printf("‚ö° Running command %d/%d: %s", i+1, len(analysis.Commands), cmd)

		execCmd := exec.CommandContext(ctx, d.dockerPath, "exec", containerID, "sh", "-c", cmd)
		output, err := execCmd.CombinedOutput()

		commandOutput := string(output)
		result.Output += fmt.Sprintf("=== Command: %s ===\n%s\n\n", cmd, commandOutput)

		if err != nil {
			if exitErr, ok := err.(*exec.ExitError); ok {
				result.ExitCode = exitErr.ExitCode()
			} else {
				result.ExitCode = 1
			}
			result.Success = false
			result.Errors = append(result.Errors, fmt.Sprintf("Command '%s' failed: %v", cmd, err))
		}
	}

	if result.Success {
		log.Printf("‚úÖ All validation commands completed successfully")
		result.Suggestions = []string{
			"Code validation passed all checks",
			"Consider adding more comprehensive tests",
			"Ensure proper error handling is implemented",
		}
	} else {
		log.Printf("‚ùå Some validation commands failed")
	}

	return result, nil
}

// RemoveContainer —É–¥–∞–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
func (d *DockerClient) RemoveContainer(ctx context.Context, containerID string) error {
	log.Printf("üóëÔ∏è Removing container: %s", containerID)

	cmd := exec.CommandContext(ctx, d.dockerPath, "rm", "-f", containerID)
	if err := cmd.Run(); err != nil {
		return fmt.Errorf("failed to remove container: %w", err)
	}

	log.Printf("‚úÖ Container removed: %s", containerID)
	return nil
}
