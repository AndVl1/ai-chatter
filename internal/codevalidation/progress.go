package codevalidation

import (
	"fmt"
	"html"
	"strings"
	"sync"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// CodeValidationProgressTracker –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞
type CodeValidationProgressTracker struct {
	bot       BotInterface
	chatID    int64
	messageID int
	steps     map[string]*ProgressStep
	mu        sync.RWMutex
	filename  string
	language  string
}

// BotInterface –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π)
type BotInterface interface {
	Send(c tgbotapi.Chattable) (tgbotapi.Message, error)
	ParseModeValue() string
}

// ProgressStep –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —à–∞–≥ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ–¥–∞
type ProgressStep struct {
	Name        string
	Description string
	Status      string // pending, in_progress, completed, error
	StartTime   time.Time
	EndTime     time.Time
}

// NewCodeValidationProgressTracker —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
func NewCodeValidationProgressTracker(bot BotInterface, chatID int64, messageID int, filename, language string) *CodeValidationProgressTracker {
	steps := map[string]*ProgressStep{
		"code_analysis":  {Name: "üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞", Description: "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", Status: "pending"},
		"docker_setup":   {Name: "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è", Description: "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å—Ä–µ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", Status: "pending"},
		"copy_code":      {Name: "üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤", Description: "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä", Status: "pending"},
		"install_deps":   {Name: "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", Description: "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫", Status: "pending"},
		"run_validation": {Name: "‚ö° –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞", Description: "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞", Status: "pending"},
	}

	return &CodeValidationProgressTracker{
		bot:       bot,
		chatID:    chatID,
		messageID: messageID,
		steps:     steps,
		filename:  filename,
		language:  language,
	}
}

// UpdateProgress —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ProgressCallback
func (pt *CodeValidationProgressTracker) UpdateProgress(stepKey string, status string) {
	pt.mu.Lock()
	defer pt.mu.Unlock()

	if step, exists := pt.steps[stepKey]; exists {
		step.Status = status
		if status == "in_progress" {
			step.StartTime = time.Now()
		} else if status == "completed" || status == "error" {
			step.EndTime = time.Now()
		}
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
	pt.updateMessage()
}

// SetFinalResult —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
func (pt *CodeValidationProgressTracker) SetFinalResult(result *ValidationResult) {
	pt.mu.Lock()
	defer pt.mu.Unlock()

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
	message := pt.buildFinalMessage(result)

	editMsg := tgbotapi.NewEditMessageText(pt.chatID, pt.messageID, message)
	editMsg.ParseMode = pt.bot.ParseModeValue()

	if _, err := pt.bot.Send(editMsg); err != nil {
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
		fmt.Printf("‚ö†Ô∏è Failed to update final result message: %v\n", err)
	}
}

// updateMessage –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
func (pt *CodeValidationProgressTracker) updateMessage() {
	message := pt.buildProgressMessage()

	editMsg := tgbotapi.NewEditMessageText(pt.chatID, pt.messageID, message)
	editMsg.ParseMode = pt.bot.ParseModeValue()

	if _, err := pt.bot.Send(editMsg); err != nil {
		// –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
		fmt.Printf("‚ö†Ô∏è Failed to update progress message: %v\n", err)
	}
}

// buildProgressMessage —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
func (pt *CodeValidationProgressTracker) buildProgressMessage() string {
	var message strings.Builder

	message.WriteString("üîÑ **–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...**\n\n")
	message.WriteString(fmt.Sprintf("üìÑ **–§–∞–π–ª:** %s\n", html.EscapeString(pt.filename)))
	if pt.language != "" {
		message.WriteString(fmt.Sprintf("üíª **–Ø–∑—ã–∫:** %s\n\n", html.EscapeString(pt.language)))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–∞—Ö (–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
	stepOrder := []string{"code_analysis", "docker_setup", "copy_code", "install_deps", "run_validation"}

	for _, stepKey := range stepOrder {
		if step, exists := pt.steps[stepKey]; exists {
			var statusIcon string
			switch step.Status {
			case "pending":
				statusIcon = "‚è≥"
			case "in_progress":
				statusIcon = "üîÑ"
			case "completed":
				statusIcon = "‚úÖ"
			case "error":
				statusIcon = "‚ùå"
			default:
				statusIcon = "‚ùì"
			}

			message.WriteString(fmt.Sprintf("%s %s\n", statusIcon, step.Name))

			// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤
			if step.Status == "completed" && !step.EndTime.IsZero() && !step.StartTime.IsZero() {
				duration := step.EndTime.Sub(step.StartTime)
				if duration > 0 && duration < 5*time.Minute { // –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–µ–¥–µ–ª—ã
					if duration < time.Second {
						message.WriteString(fmt.Sprintf("   ‚è±Ô∏è %.0fms\n", float64(duration.Nanoseconds())/1e6))
					} else {
						message.WriteString(fmt.Sprintf("   ‚è±Ô∏è %.1fs\n", duration.Seconds()))
					}
				}
			}
		}
	}

	message.WriteString("\nüí≠ *–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-3 –º–∏–Ω—É—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–¥–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...*")

	return message.String()
}

// buildFinalMessage —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
func (pt *CodeValidationProgressTracker) buildFinalMessage(result *ValidationResult) string {
	var message strings.Builder

	// –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ–∫–µ–Ω–∞—Ö
	var statusEmoji, statusText string
	if result.Success {
		statusEmoji = "‚úÖ"
		statusText = "—É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
	} else {
		statusEmoji = "‚ùå"
		statusText = "–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏"
	}

	if result.TotalTokens > 0 {
		message.WriteString(fmt.Sprintf("%s **–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ %s** | üß† %d —Ç–æ–∫–µ–Ω–æ–≤\n\n", statusEmoji, statusText, result.TotalTokens))
	} else {
		message.WriteString(fmt.Sprintf("%s **–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–¥–∞ %s**\n\n", statusEmoji, statusText))
	}

	message.WriteString(fmt.Sprintf("üìÑ **–§–∞–π–ª:** %s\n", html.EscapeString(pt.filename)))
	if pt.language != "" {
		message.WriteString(fmt.Sprintf("üíª **–Ø–∑—ã–∫:** %s\n", html.EscapeString(pt.language)))
	}
	message.WriteString(fmt.Sprintf("‚è±Ô∏è **–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** %s\n", result.Duration))
	message.WriteString(fmt.Sprintf("üî¢ **Exit Code:** %d", result.ExitCode))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ–ø—ã—Ç–∫–∏ –µ—Å–ª–∏ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ
	if result.RetryAttempt > 1 {
		message.WriteString(fmt.Sprintf(" (–ø–æ–ø—ã—Ç–∫–∞ %d)", result.RetryAttempt))
	}
	message.WriteString("\n\n")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ—Å—Ç—å
	if result.UserQuestion != "" && result.QuestionAnswer != "" {
		message.WriteString("‚ùì **–í–∞—à –≤–æ–ø—Ä–æ—Å:** ")
		message.WriteString(html.EscapeString(result.UserQuestion))
		message.WriteString("\n\nüí¨ **–û—Ç–≤–µ—Ç:**\n")
		message.WriteString(html.EscapeString(result.QuestionAnswer))
		message.WriteString("\n\n")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã
	message.WriteString("üìä **–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —ç—Ç–∞–ø—ã:**\n")
	stepOrder := []string{"code_analysis", "docker_setup", "copy_code", "install_deps", "run_validation"}

	for _, stepKey := range stepOrder {
		if step, exists := pt.steps[stepKey]; exists {
			var statusIcon string
			switch step.Status {
			case "completed":
				statusIcon = "‚úÖ"
			case "error":
				statusIcon = "‚ùå"
			case "in_progress":
				statusIcon = "üîÑ" // –ü—Ä–µ—Ä–≤–∞–Ω
			default:
				statusIcon = "‚è≥" // –ù–µ –Ω–∞—á–∞—Ç
			}

			message.WriteString(fmt.Sprintf("%s %s\n", statusIcon, step.Name))
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
	if result.ErrorAnalysis != "" {
		message.WriteString(fmt.Sprintf("\nüîç **–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫:** %s\n", html.EscapeString(result.ErrorAnalysis)))
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if result.Success {
		message.WriteString("\nüéâ **–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!**\n")
	} else {
		// –†–∞–∑–¥–µ–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å–±–æ—Ä–∫–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–¥–∞
		if len(result.BuildProblems) > 0 {
			message.WriteString("\nüîß **–ü—Ä–æ–±–ª–µ–º—ã —Å–±–æ—Ä–∫–∏:**\n")
			for _, problem := range result.BuildProblems {
				message.WriteString(fmt.Sprintf("‚Ä¢ %s\n", html.EscapeString(problem)))
			}
		}

		if len(result.CodeProblems) > 0 {
			message.WriteString("\nüíª **–ü—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ:**\n")
			for _, problem := range result.CodeProblems {
				message.WriteString(fmt.Sprintf("‚Ä¢ %s\n", html.EscapeString(problem)))
			}
		}

		// –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —Ä–∞–∑–¥–µ–ª–∏–ª –æ—à–∏–±–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–∫ –æ–±—ã—á–Ω–æ
		if len(result.BuildProblems) == 0 && len(result.CodeProblems) == 0 && len(result.Errors) > 0 {
			message.WriteString("\n‚ùå **–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:**\n")
			for _, err := range result.Errors {
				message.WriteString(fmt.Sprintf("‚Ä¢ %s\n", html.EscapeString(err)))
			}
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
	if len(result.Warnings) > 0 {
		message.WriteString("\n‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**\n")
		for _, warning := range result.Warnings {
			message.WriteString(fmt.Sprintf("‚Ä¢ %s\n", html.EscapeString(warning)))
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	if len(result.Suggestions) > 0 {
		message.WriteString("\nüí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n")
		for _, suggestion := range result.Suggestions {
			message.WriteString(fmt.Sprintf("‚Ä¢ %s\n", html.EscapeString(suggestion)))
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º output –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–≤ –±–ª–æ–∫–µ –∫–æ–¥–∞ HTML —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω—É–∂–Ω–æ)
	if len(result.Output) > 0 && len(result.Output) < 1000 {
		message.WriteString(fmt.Sprintf("\nüìã **–î–µ—Ç–∞–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:**\n```\n%s\n```", result.Output))
	}

	return message.String()
}
